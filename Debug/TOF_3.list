
TOF_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007330  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08007600  08007600  00017600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080076c8  080076c8  000176c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080076d0  080076d0  000176d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080076d4  080076d4  000176d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  24000000  080076d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000148  2400008c  08007764  0002008c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240001d4  08007764  000201d4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014175  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000233a  00000000  00000000  0003422f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e30  00000000  00000000  00036570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000d58  00000000  00000000  000373a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031ec5  00000000  00000000  000380f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012f9c  00000000  00000000  00069fbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001419c4  00000000  00000000  0007cf59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001be91d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003f28  00000000  00000000  001be970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400008c 	.word	0x2400008c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080075e8 	.word	0x080075e8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000090 	.word	0x24000090
 800030c:	080075e8 	.word	0x080075e8

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b974 	b.w	80006c0 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468e      	mov	lr, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d14d      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fe:	428a      	cmp	r2, r1
 8000400:	4694      	mov	ip, r2
 8000402:	d969      	bls.n	80004d8 <__udivmoddi4+0xe8>
 8000404:	fab2 f282 	clz	r2, r2
 8000408:	b152      	cbz	r2, 8000420 <__udivmoddi4+0x30>
 800040a:	fa01 f302 	lsl.w	r3, r1, r2
 800040e:	f1c2 0120 	rsb	r1, r2, #32
 8000412:	fa20 f101 	lsr.w	r1, r0, r1
 8000416:	fa0c fc02 	lsl.w	ip, ip, r2
 800041a:	ea41 0e03 	orr.w	lr, r1, r3
 800041e:	4094      	lsls	r4, r2
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	0c21      	lsrs	r1, r4, #16
 8000426:	fbbe f6f8 	udiv	r6, lr, r8
 800042a:	fa1f f78c 	uxth.w	r7, ip
 800042e:	fb08 e316 	mls	r3, r8, r6, lr
 8000432:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000436:	fb06 f107 	mul.w	r1, r6, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f106 30ff 	add.w	r0, r6, #4294967295
 8000446:	f080 811f 	bcs.w	8000688 <__udivmoddi4+0x298>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 811c 	bls.w	8000688 <__udivmoddi4+0x298>
 8000450:	3e02      	subs	r6, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3310 	mls	r3, r8, r0, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb00 f707 	mul.w	r7, r0, r7
 8000468:	42a7      	cmp	r7, r4
 800046a:	d90a      	bls.n	8000482 <__udivmoddi4+0x92>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f100 33ff 	add.w	r3, r0, #4294967295
 8000474:	f080 810a 	bcs.w	800068c <__udivmoddi4+0x29c>
 8000478:	42a7      	cmp	r7, r4
 800047a:	f240 8107 	bls.w	800068c <__udivmoddi4+0x29c>
 800047e:	4464      	add	r4, ip
 8000480:	3802      	subs	r0, #2
 8000482:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000486:	1be4      	subs	r4, r4, r7
 8000488:	2600      	movs	r6, #0
 800048a:	b11d      	cbz	r5, 8000494 <__udivmoddi4+0xa4>
 800048c:	40d4      	lsrs	r4, r2
 800048e:	2300      	movs	r3, #0
 8000490:	e9c5 4300 	strd	r4, r3, [r5]
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d909      	bls.n	80004b2 <__udivmoddi4+0xc2>
 800049e:	2d00      	cmp	r5, #0
 80004a0:	f000 80ef 	beq.w	8000682 <__udivmoddi4+0x292>
 80004a4:	2600      	movs	r6, #0
 80004a6:	e9c5 0100 	strd	r0, r1, [r5]
 80004aa:	4630      	mov	r0, r6
 80004ac:	4631      	mov	r1, r6
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	fab3 f683 	clz	r6, r3
 80004b6:	2e00      	cmp	r6, #0
 80004b8:	d14a      	bne.n	8000550 <__udivmoddi4+0x160>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d302      	bcc.n	80004c4 <__udivmoddi4+0xd4>
 80004be:	4282      	cmp	r2, r0
 80004c0:	f200 80f9 	bhi.w	80006b6 <__udivmoddi4+0x2c6>
 80004c4:	1a84      	subs	r4, r0, r2
 80004c6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ca:	2001      	movs	r0, #1
 80004cc:	469e      	mov	lr, r3
 80004ce:	2d00      	cmp	r5, #0
 80004d0:	d0e0      	beq.n	8000494 <__udivmoddi4+0xa4>
 80004d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004d6:	e7dd      	b.n	8000494 <__udivmoddi4+0xa4>
 80004d8:	b902      	cbnz	r2, 80004dc <__udivmoddi4+0xec>
 80004da:	deff      	udf	#255	; 0xff
 80004dc:	fab2 f282 	clz	r2, r2
 80004e0:	2a00      	cmp	r2, #0
 80004e2:	f040 8092 	bne.w	800060a <__udivmoddi4+0x21a>
 80004e6:	eba1 010c 	sub.w	r1, r1, ip
 80004ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ee:	fa1f fe8c 	uxth.w	lr, ip
 80004f2:	2601      	movs	r6, #1
 80004f4:	0c20      	lsrs	r0, r4, #16
 80004f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004fa:	fb07 1113 	mls	r1, r7, r3, r1
 80004fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000502:	fb0e f003 	mul.w	r0, lr, r3
 8000506:	4288      	cmp	r0, r1
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x12c>
 800050a:	eb1c 0101 	adds.w	r1, ip, r1
 800050e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x12a>
 8000514:	4288      	cmp	r0, r1
 8000516:	f200 80cb 	bhi.w	80006b0 <__udivmoddi4+0x2c0>
 800051a:	4643      	mov	r3, r8
 800051c:	1a09      	subs	r1, r1, r0
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb1 f0f7 	udiv	r0, r1, r7
 8000524:	fb07 1110 	mls	r1, r7, r0, r1
 8000528:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800052c:	fb0e fe00 	mul.w	lr, lr, r0
 8000530:	45a6      	cmp	lr, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x156>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f100 31ff 	add.w	r1, r0, #4294967295
 800053c:	d202      	bcs.n	8000544 <__udivmoddi4+0x154>
 800053e:	45a6      	cmp	lr, r4
 8000540:	f200 80bb 	bhi.w	80006ba <__udivmoddi4+0x2ca>
 8000544:	4608      	mov	r0, r1
 8000546:	eba4 040e 	sub.w	r4, r4, lr
 800054a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x9a>
 8000550:	f1c6 0720 	rsb	r7, r6, #32
 8000554:	40b3      	lsls	r3, r6
 8000556:	fa22 fc07 	lsr.w	ip, r2, r7
 800055a:	ea4c 0c03 	orr.w	ip, ip, r3
 800055e:	fa20 f407 	lsr.w	r4, r0, r7
 8000562:	fa01 f306 	lsl.w	r3, r1, r6
 8000566:	431c      	orrs	r4, r3
 8000568:	40f9      	lsrs	r1, r7
 800056a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800056e:	fa00 f306 	lsl.w	r3, r0, r6
 8000572:	fbb1 f8f9 	udiv	r8, r1, r9
 8000576:	0c20      	lsrs	r0, r4, #16
 8000578:	fa1f fe8c 	uxth.w	lr, ip
 800057c:	fb09 1118 	mls	r1, r9, r8, r1
 8000580:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000584:	fb08 f00e 	mul.w	r0, r8, lr
 8000588:	4288      	cmp	r0, r1
 800058a:	fa02 f206 	lsl.w	r2, r2, r6
 800058e:	d90b      	bls.n	80005a8 <__udivmoddi4+0x1b8>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f108 3aff 	add.w	sl, r8, #4294967295
 8000598:	f080 8088 	bcs.w	80006ac <__udivmoddi4+0x2bc>
 800059c:	4288      	cmp	r0, r1
 800059e:	f240 8085 	bls.w	80006ac <__udivmoddi4+0x2bc>
 80005a2:	f1a8 0802 	sub.w	r8, r8, #2
 80005a6:	4461      	add	r1, ip
 80005a8:	1a09      	subs	r1, r1, r0
 80005aa:	b2a4      	uxth	r4, r4
 80005ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80005b0:	fb09 1110 	mls	r1, r9, r0, r1
 80005b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005bc:	458e      	cmp	lr, r1
 80005be:	d908      	bls.n	80005d2 <__udivmoddi4+0x1e2>
 80005c0:	eb1c 0101 	adds.w	r1, ip, r1
 80005c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005c8:	d26c      	bcs.n	80006a4 <__udivmoddi4+0x2b4>
 80005ca:	458e      	cmp	lr, r1
 80005cc:	d96a      	bls.n	80006a4 <__udivmoddi4+0x2b4>
 80005ce:	3802      	subs	r0, #2
 80005d0:	4461      	add	r1, ip
 80005d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005d6:	fba0 9402 	umull	r9, r4, r0, r2
 80005da:	eba1 010e 	sub.w	r1, r1, lr
 80005de:	42a1      	cmp	r1, r4
 80005e0:	46c8      	mov	r8, r9
 80005e2:	46a6      	mov	lr, r4
 80005e4:	d356      	bcc.n	8000694 <__udivmoddi4+0x2a4>
 80005e6:	d053      	beq.n	8000690 <__udivmoddi4+0x2a0>
 80005e8:	b15d      	cbz	r5, 8000602 <__udivmoddi4+0x212>
 80005ea:	ebb3 0208 	subs.w	r2, r3, r8
 80005ee:	eb61 010e 	sbc.w	r1, r1, lr
 80005f2:	fa01 f707 	lsl.w	r7, r1, r7
 80005f6:	fa22 f306 	lsr.w	r3, r2, r6
 80005fa:	40f1      	lsrs	r1, r6
 80005fc:	431f      	orrs	r7, r3
 80005fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000602:	2600      	movs	r6, #0
 8000604:	4631      	mov	r1, r6
 8000606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	40d8      	lsrs	r0, r3
 8000610:	fa0c fc02 	lsl.w	ip, ip, r2
 8000614:	fa21 f303 	lsr.w	r3, r1, r3
 8000618:	4091      	lsls	r1, r2
 800061a:	4301      	orrs	r1, r0
 800061c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000620:	fa1f fe8c 	uxth.w	lr, ip
 8000624:	fbb3 f0f7 	udiv	r0, r3, r7
 8000628:	fb07 3610 	mls	r6, r7, r0, r3
 800062c:	0c0b      	lsrs	r3, r1, #16
 800062e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000632:	fb00 f60e 	mul.w	r6, r0, lr
 8000636:	429e      	cmp	r6, r3
 8000638:	fa04 f402 	lsl.w	r4, r4, r2
 800063c:	d908      	bls.n	8000650 <__udivmoddi4+0x260>
 800063e:	eb1c 0303 	adds.w	r3, ip, r3
 8000642:	f100 38ff 	add.w	r8, r0, #4294967295
 8000646:	d22f      	bcs.n	80006a8 <__udivmoddi4+0x2b8>
 8000648:	429e      	cmp	r6, r3
 800064a:	d92d      	bls.n	80006a8 <__udivmoddi4+0x2b8>
 800064c:	3802      	subs	r0, #2
 800064e:	4463      	add	r3, ip
 8000650:	1b9b      	subs	r3, r3, r6
 8000652:	b289      	uxth	r1, r1
 8000654:	fbb3 f6f7 	udiv	r6, r3, r7
 8000658:	fb07 3316 	mls	r3, r7, r6, r3
 800065c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000660:	fb06 f30e 	mul.w	r3, r6, lr
 8000664:	428b      	cmp	r3, r1
 8000666:	d908      	bls.n	800067a <__udivmoddi4+0x28a>
 8000668:	eb1c 0101 	adds.w	r1, ip, r1
 800066c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000670:	d216      	bcs.n	80006a0 <__udivmoddi4+0x2b0>
 8000672:	428b      	cmp	r3, r1
 8000674:	d914      	bls.n	80006a0 <__udivmoddi4+0x2b0>
 8000676:	3e02      	subs	r6, #2
 8000678:	4461      	add	r1, ip
 800067a:	1ac9      	subs	r1, r1, r3
 800067c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000680:	e738      	b.n	80004f4 <__udivmoddi4+0x104>
 8000682:	462e      	mov	r6, r5
 8000684:	4628      	mov	r0, r5
 8000686:	e705      	b.n	8000494 <__udivmoddi4+0xa4>
 8000688:	4606      	mov	r6, r0
 800068a:	e6e3      	b.n	8000454 <__udivmoddi4+0x64>
 800068c:	4618      	mov	r0, r3
 800068e:	e6f8      	b.n	8000482 <__udivmoddi4+0x92>
 8000690:	454b      	cmp	r3, r9
 8000692:	d2a9      	bcs.n	80005e8 <__udivmoddi4+0x1f8>
 8000694:	ebb9 0802 	subs.w	r8, r9, r2
 8000698:	eb64 0e0c 	sbc.w	lr, r4, ip
 800069c:	3801      	subs	r0, #1
 800069e:	e7a3      	b.n	80005e8 <__udivmoddi4+0x1f8>
 80006a0:	4646      	mov	r6, r8
 80006a2:	e7ea      	b.n	800067a <__udivmoddi4+0x28a>
 80006a4:	4620      	mov	r0, r4
 80006a6:	e794      	b.n	80005d2 <__udivmoddi4+0x1e2>
 80006a8:	4640      	mov	r0, r8
 80006aa:	e7d1      	b.n	8000650 <__udivmoddi4+0x260>
 80006ac:	46d0      	mov	r8, sl
 80006ae:	e77b      	b.n	80005a8 <__udivmoddi4+0x1b8>
 80006b0:	3b02      	subs	r3, #2
 80006b2:	4461      	add	r1, ip
 80006b4:	e732      	b.n	800051c <__udivmoddi4+0x12c>
 80006b6:	4630      	mov	r0, r6
 80006b8:	e709      	b.n	80004ce <__udivmoddi4+0xde>
 80006ba:	4464      	add	r4, ip
 80006bc:	3802      	subs	r0, #2
 80006be:	e742      	b.n	8000546 <__udivmoddi4+0x156>

080006c0 <__aeabi_idiv0>:
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop

080006c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ca:	f000 fbe5 	bl	8000e98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ce:	f000 f8b9 	bl	8000844 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d2:	f000 f9a1 	bl	8000a18 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006d6:	f000 f913 	bl	8000900 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80006da:	f000 f951 	bl	8000980 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  sprintf( (char*)strbuf, "testing VL53L0X\n--------------\n");
 80006de:	494e      	ldr	r1, [pc, #312]	; (8000818 <main+0x154>)
 80006e0:	484e      	ldr	r0, [pc, #312]	; (800081c <main+0x158>)
 80006e2:	f006 fb13 	bl	8006d0c <siprintf>
  HAL_UART_Transmit( &huart3, strbuf, strlen( (char*)strbuf ), 0xFFFF );
 80006e6:	484d      	ldr	r0, [pc, #308]	; (800081c <main+0x158>)
 80006e8:	f7ff fe12 	bl	8000310 <strlen>
 80006ec:	4603      	mov	r3, r0
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006f4:	4949      	ldr	r1, [pc, #292]	; (800081c <main+0x158>)
 80006f6:	484a      	ldr	r0, [pc, #296]	; (8000820 <main+0x15c>)
 80006f8:	f003 ff94 	bl	8004624 <HAL_UART_Transmit>

  HAL_GPIO_WritePin(XSHUT_GPIO_Port, XSHUT_Pin, GPIO_PIN_RESET); // Disable XSHUT
 80006fc:	2200      	movs	r2, #0
 80006fe:	2101      	movs	r1, #1
 8000700:	4848      	ldr	r0, [pc, #288]	; (8000824 <main+0x160>)
 8000702:	f000 ff0b 	bl	800151c <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8000706:	2014      	movs	r0, #20
 8000708:	f000 fc58 	bl	8000fbc <HAL_Delay>
    HAL_GPIO_WritePin(XSHUT_GPIO_Port, XSHUT_Pin, GPIO_PIN_SET); // Enable XSHUT
 800070c:	2201      	movs	r2, #1
 800070e:	2101      	movs	r1, #1
 8000710:	4844      	ldr	r0, [pc, #272]	; (8000824 <main+0x160>)
 8000712:	f000 ff03 	bl	800151c <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8000716:	2014      	movs	r0, #20
 8000718:	f000 fc50 	bl	8000fbc <HAL_Delay>

    if( VL53L0X_init(&myTOFsensor) ){
 800071c:	4842      	ldr	r0, [pc, #264]	; (8000828 <main+0x164>)
 800071e:	f005 f93b 	bl	8005998 <VL53L0X_init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d036      	beq.n	8000796 <main+0xd2>
    		sprintf((char*)strbuf,"init successful\n");
 8000728:	4940      	ldr	r1, [pc, #256]	; (800082c <main+0x168>)
 800072a:	483c      	ldr	r0, [pc, #240]	; (800081c <main+0x158>)
 800072c:	f006 faee 	bl	8006d0c <siprintf>
    		HAL_UART_Transmit( &huart3, strbuf, strlen( (char*)strbuf ), 0xFFFF );
 8000730:	483a      	ldr	r0, [pc, #232]	; (800081c <main+0x158>)
 8000732:	f7ff fded 	bl	8000310 <strlen>
 8000736:	4603      	mov	r3, r0
 8000738:	b29a      	uxth	r2, r3
 800073a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800073e:	4937      	ldr	r1, [pc, #220]	; (800081c <main+0x158>)
 8000740:	4837      	ldr	r0, [pc, #220]	; (8000820 <main+0x15c>)
 8000742:	f003 ff6f 	bl	8004624 <HAL_UART_Transmit>
    		return 0;
    	}

    #ifdef LONG_RANGE
    	// lower the return signal rate limit (default is 0.25 MCPS)
    	VL53L0X_setSignalRateLimit(&myTOFsensor, 0.1);
 8000746:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8000830 <main+0x16c>
 800074a:	4837      	ldr	r0, [pc, #220]	; (8000828 <main+0x164>)
 800074c:	f005 fd0c 	bl	8006168 <VL53L0X_setSignalRateLimit>
    	// increase laser pulse periods (defaults are 14 and 10 PCLKs)
    	VL53L0X_setVcselPulsePeriod(&myTOFsensor, VcselPeriodPreRange, 18);
 8000750:	2212      	movs	r2, #18
 8000752:	2100      	movs	r1, #0
 8000754:	4834      	ldr	r0, [pc, #208]	; (8000828 <main+0x164>)
 8000756:	f005 fe3d 	bl	80063d4 <VL53L0X_setVcselPulsePeriod>
    	VL53L0X_setVcselPulsePeriod(&myTOFsensor, VcselPeriodFinalRange, 14);
 800075a:	220e      	movs	r2, #14
 800075c:	2101      	movs	r1, #1
 800075e:	4832      	ldr	r0, [pc, #200]	; (8000828 <main+0x164>)
 8000760:	f005 fe38 	bl	80063d4 <VL53L0X_setVcselPulsePeriod>
    #endif
    #ifdef HIGH_SPEED
    	// reduce timing budget to 20 ms (default is about 33 ms)
    	VL53L0X_setMeasurementTimingBudget(&myTOFsensor, 20000);
 8000764:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000768:	482f      	ldr	r0, [pc, #188]	; (8000828 <main+0x164>)
 800076a:	f005 fd33 	bl	80061d4 <VL53L0X_setMeasurementTimingBudget>

    	sprintf((char*)strbuf,"step1\n");
 800076e:	4931      	ldr	r1, [pc, #196]	; (8000834 <main+0x170>)
 8000770:	482a      	ldr	r0, [pc, #168]	; (800081c <main+0x158>)
 8000772:	f006 facb 	bl	8006d0c <siprintf>
       	HAL_UART_Transmit( &huart3, strbuf, strlen( (char*)strbuf ), 0xFFFF );
 8000776:	4829      	ldr	r0, [pc, #164]	; (800081c <main+0x158>)
 8000778:	f7ff fdca 	bl	8000310 <strlen>
 800077c:	4603      	mov	r3, r0
 800077e:	b29a      	uxth	r2, r3
 8000780:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000784:	4925      	ldr	r1, [pc, #148]	; (800081c <main+0x158>)
 8000786:	4826      	ldr	r0, [pc, #152]	; (8000820 <main+0x15c>)
 8000788:	f003 ff4c 	bl	8004624 <HAL_UART_Transmit>
    #else //HIGH_ACCURACY
    	// increase timing budget to 200 ms
    	VL53L0X_setMeasurementTimingBudget(&myTOFsensor, 200000);
    #endif

    	VL53L0X_startContinuous(&myTOFsensor, 0);
 800078c:	2100      	movs	r1, #0
 800078e:	4826      	ldr	r0, [pc, #152]	; (8000828 <main+0x164>)
 8000790:	f005 ffbb 	bl	800670a <VL53L0X_startContinuous>
 8000794:	e010      	b.n	80007b8 <main+0xf4>
     		sprintf((char*)strbuf,"init error");
 8000796:	4928      	ldr	r1, [pc, #160]	; (8000838 <main+0x174>)
 8000798:	4820      	ldr	r0, [pc, #128]	; (800081c <main+0x158>)
 800079a:	f006 fab7 	bl	8006d0c <siprintf>
    		HAL_UART_Transmit( &huart3, strbuf, strlen( (char*)strbuf ), 0xFFFF );
 800079e:	481f      	ldr	r0, [pc, #124]	; (800081c <main+0x158>)
 80007a0:	f7ff fdb6 	bl	8000310 <strlen>
 80007a4:	4603      	mov	r3, r0
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ac:	491b      	ldr	r1, [pc, #108]	; (800081c <main+0x158>)
 80007ae:	481c      	ldr	r0, [pc, #112]	; (8000820 <main+0x15c>)
 80007b0:	f003 ff38 	bl	8004624 <HAL_UART_Transmit>
    		return 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	e02b      	b.n	8000810 <main+0x14c>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint16_t value = VL53L0X_readRangeContinuousMillimeters(&myTOFsensor);
 80007b8:	481b      	ldr	r0, [pc, #108]	; (8000828 <main+0x164>)
 80007ba:	f005 fff5 	bl	80067a8 <VL53L0X_readRangeContinuousMillimeters>
 80007be:	4603      	mov	r3, r0
 80007c0:	80fb      	strh	r3, [r7, #6]
	 sprintf((char*)strbuf,"%d mm \n",value);
 80007c2:	88fb      	ldrh	r3, [r7, #6]
 80007c4:	461a      	mov	r2, r3
 80007c6:	491d      	ldr	r1, [pc, #116]	; (800083c <main+0x178>)
 80007c8:	4814      	ldr	r0, [pc, #80]	; (800081c <main+0x158>)
 80007ca:	f006 fa9f 	bl	8006d0c <siprintf>
	 HAL_UART_Transmit( &huart3, strbuf, strlen( (char*)strbuf ), 0xFFFF );
 80007ce:	4813      	ldr	r0, [pc, #76]	; (800081c <main+0x158>)
 80007d0:	f7ff fd9e 	bl	8000310 <strlen>
 80007d4:	4603      	mov	r3, r0
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007dc:	490f      	ldr	r1, [pc, #60]	; (800081c <main+0x158>)
 80007de:	4810      	ldr	r0, [pc, #64]	; (8000820 <main+0x15c>)
 80007e0:	f003 ff20 	bl	8004624 <HAL_UART_Transmit>
	 if ( VL53L0X_timeoutOccurred(&myTOFsensor) ) {
 80007e4:	4810      	ldr	r0, [pc, #64]	; (8000828 <main+0x164>)
 80007e6:	f006 f80c 	bl	8006802 <VL53L0X_timeoutOccurred>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d0e3      	beq.n	80007b8 <main+0xf4>

				 sprintf((char*)strbuf,"TIMEOUT\n");
 80007f0:	4913      	ldr	r1, [pc, #76]	; (8000840 <main+0x17c>)
 80007f2:	480a      	ldr	r0, [pc, #40]	; (800081c <main+0x158>)
 80007f4:	f006 fa8a 	bl	8006d0c <siprintf>
			     HAL_UART_Transmit( &huart3, strbuf, strlen( (char*)strbuf ), 0xFFFF );
 80007f8:	4808      	ldr	r0, [pc, #32]	; (800081c <main+0x158>)
 80007fa:	f7ff fd89 	bl	8000310 <strlen>
 80007fe:	4603      	mov	r3, r0
 8000800:	b29a      	uxth	r2, r3
 8000802:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000806:	4905      	ldr	r1, [pc, #20]	; (800081c <main+0x158>)
 8000808:	4805      	ldr	r0, [pc, #20]	; (8000820 <main+0x15c>)
 800080a:	f003 ff0b 	bl	8004624 <HAL_UART_Transmit>
  {
 800080e:	e7d3      	b.n	80007b8 <main+0xf4>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000810:	4618      	mov	r0, r3
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	08007600 	.word	0x08007600
 800081c:	24000184 	.word	0x24000184
 8000820:	240000f4 	.word	0x240000f4
 8000824:	58020800 	.word	0x58020800
 8000828:	24000000 	.word	0x24000000
 800082c:	08007620 	.word	0x08007620
 8000830:	3dcccccd 	.word	0x3dcccccd
 8000834:	08007640 	.word	0x08007640
 8000838:	08007634 	.word	0x08007634
 800083c:	08007648 	.word	0x08007648
 8000840:	08007650 	.word	0x08007650

08000844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b09c      	sub	sp, #112	; 0x70
 8000848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084e:	224c      	movs	r2, #76	; 0x4c
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f006 fa52 	bl	8006cfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	2220      	movs	r2, #32
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f006 fa4c 	bl	8006cfc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000864:	2002      	movs	r0, #2
 8000866:	f001 fbfd 	bl	8002064 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800086a:	2300      	movs	r3, #0
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	4b23      	ldr	r3, [pc, #140]	; (80008fc <SystemClock_Config+0xb8>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000876:	4a21      	ldr	r2, [pc, #132]	; (80008fc <SystemClock_Config+0xb8>)
 8000878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800087c:	6193      	str	r3, [r2, #24]
 800087e:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <SystemClock_Config+0xb8>)
 8000880:	699b      	ldr	r3, [r3, #24]
 8000882:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800088a:	bf00      	nop
 800088c:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <SystemClock_Config+0xb8>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000898:	d1f8      	bne.n	800088c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800089a:	2302      	movs	r3, #2
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800089e:	2301      	movs	r3, #1
 80008a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a2:	2340      	movs	r3, #64	; 0x40
 80008a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ae:	4618      	mov	r0, r3
 80008b0:	f001 fc12 	bl	80020d8 <HAL_RCC_OscConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80008ba:	f000 f901 	bl	8000ac0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008be:	233f      	movs	r3, #63	; 0x3f
 80008c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008ce:	2340      	movs	r3, #64	; 0x40
 80008d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008d2:	2340      	movs	r3, #64	; 0x40
 80008d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008da:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008dc:	2340      	movs	r3, #64	; 0x40
 80008de:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	2101      	movs	r1, #1
 80008e4:	4618      	mov	r0, r3
 80008e6:	f001 ffa5 	bl	8002834 <HAL_RCC_ClockConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80008f0:	f000 f8e6 	bl	8000ac0 <Error_Handler>
  }
}
 80008f4:	bf00      	nop
 80008f6:	3770      	adds	r7, #112	; 0x70
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	58024800 	.word	0x58024800

08000900 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000904:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <MX_I2C1_Init+0x74>)
 8000906:	4a1c      	ldr	r2, [pc, #112]	; (8000978 <MX_I2C1_Init+0x78>)
 8000908:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800090a:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <MX_I2C1_Init+0x74>)
 800090c:	4a1b      	ldr	r2, [pc, #108]	; (800097c <MX_I2C1_Init+0x7c>)
 800090e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000910:	4b18      	ldr	r3, [pc, #96]	; (8000974 <MX_I2C1_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <MX_I2C1_Init+0x74>)
 8000918:	2201      	movs	r2, #1
 800091a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800091c:	4b15      	ldr	r3, [pc, #84]	; (8000974 <MX_I2C1_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000922:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_I2C1_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <MX_I2C1_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_I2C1_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_I2C1_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800093a:	480e      	ldr	r0, [pc, #56]	; (8000974 <MX_I2C1_Init+0x74>)
 800093c:	f000 fe08 	bl	8001550 <HAL_I2C_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000946:	f000 f8bb 	bl	8000ac0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800094a:	2100      	movs	r1, #0
 800094c:	4809      	ldr	r0, [pc, #36]	; (8000974 <MX_I2C1_Init+0x74>)
 800094e:	f001 faf1 	bl	8001f34 <HAL_I2CEx_ConfigAnalogFilter>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000958:	f000 f8b2 	bl	8000ac0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800095c:	2100      	movs	r1, #0
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_I2C1_Init+0x74>)
 8000960:	f001 fb33 	bl	8001fca <HAL_I2CEx_ConfigDigitalFilter>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800096a:	f000 f8a9 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	240000a8 	.word	0x240000a8
 8000978:	40005400 	.word	0x40005400
 800097c:	00707cbb 	.word	0x00707cbb

08000980 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000984:	4b22      	ldr	r3, [pc, #136]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 8000986:	4a23      	ldr	r2, [pc, #140]	; (8000a14 <MX_USART3_UART_Init+0x94>)
 8000988:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800098a:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 800098c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000990:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800099e:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b6:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009be:	2200      	movs	r2, #0
 80009c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c2:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009c8:	4811      	ldr	r0, [pc, #68]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009ca:	f003 fddb 	bl	8004584 <HAL_UART_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009d4:	f000 f874 	bl	8000ac0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d8:	2100      	movs	r1, #0
 80009da:	480d      	ldr	r0, [pc, #52]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009dc:	f004 ff12 	bl	8005804 <HAL_UARTEx_SetTxFifoThreshold>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009e6:	f000 f86b 	bl	8000ac0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ea:	2100      	movs	r1, #0
 80009ec:	4808      	ldr	r0, [pc, #32]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009ee:	f004 ff47 	bl	8005880 <HAL_UARTEx_SetRxFifoThreshold>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009f8:	f000 f862 	bl	8000ac0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009fe:	f004 fec8 	bl	8005792 <HAL_UARTEx_DisableFifoMode>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a08:	f000 f85a 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	240000f4 	.word	0x240000f4
 8000a14:	40004800 	.word	0x40004800

08000a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b088      	sub	sp, #32
 8000a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <MX_GPIO_Init+0xa0>)
 8000a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a34:	4a20      	ldr	r2, [pc, #128]	; (8000ab8 <MX_GPIO_Init+0xa0>)
 8000a36:	f043 0304 	orr.w	r3, r3, #4
 8000a3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a3e:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <MX_GPIO_Init+0xa0>)
 8000a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a44:	f003 0304 	and.w	r3, r3, #4
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <MX_GPIO_Init+0xa0>)
 8000a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a52:	4a19      	ldr	r2, [pc, #100]	; (8000ab8 <MX_GPIO_Init+0xa0>)
 8000a54:	f043 0308 	orr.w	r3, r3, #8
 8000a58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a5c:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <MX_GPIO_Init+0xa0>)
 8000a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a62:	f003 0308 	and.w	r3, r3, #8
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <MX_GPIO_Init+0xa0>)
 8000a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a70:	4a11      	ldr	r2, [pc, #68]	; (8000ab8 <MX_GPIO_Init+0xa0>)
 8000a72:	f043 0302 	orr.w	r3, r3, #2
 8000a76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_GPIO_Init+0xa0>)
 8000a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a80:	f003 0302 	and.w	r3, r3, #2
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XSHUT_GPIO_Port, XSHUT_Pin, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	480b      	ldr	r0, [pc, #44]	; (8000abc <MX_GPIO_Init+0xa4>)
 8000a8e:	f000 fd45 	bl	800151c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : XSHUT_Pin */
  GPIO_InitStruct.Pin = XSHUT_Pin;
 8000a92:	2301      	movs	r3, #1
 8000a94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(XSHUT_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 030c 	add.w	r3, r7, #12
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4804      	ldr	r0, [pc, #16]	; (8000abc <MX_GPIO_Init+0xa4>)
 8000aaa:	f000 fb8f 	bl	80011cc <HAL_GPIO_Init>

}
 8000aae:	bf00      	nop
 8000ab0:	3720      	adds	r7, #32
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	58024400 	.word	0x58024400
 8000abc:	58020800 	.word	0x58020800

08000ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac4:	b672      	cpsid	i
}
 8000ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <Error_Handler+0x8>
	...

08000acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <HAL_MspInit+0x30>)
 8000ad4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ad8:	4a08      	ldr	r2, [pc, #32]	; (8000afc <HAL_MspInit+0x30>)
 8000ada:	f043 0302 	orr.w	r3, r3, #2
 8000ade:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_MspInit+0x30>)
 8000ae4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ae8:	f003 0302 	and.w	r3, r3, #2
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	58024400 	.word	0x58024400

08000b00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b0b6      	sub	sp, #216	; 0xd8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b18:	f107 0310 	add.w	r3, r7, #16
 8000b1c:	22b4      	movs	r2, #180	; 0xb4
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f006 f8eb 	bl	8006cfc <memset>
  if(hi2c->Instance==I2C1)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a24      	ldr	r2, [pc, #144]	; (8000bbc <HAL_I2C_MspInit+0xbc>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d141      	bne.n	8000bb4 <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b30:	2308      	movs	r3, #8
 8000b32:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f002 fa04 	bl	8002f4c <HAL_RCCEx_PeriphCLKConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000b4a:	f7ff ffb9 	bl	8000ac0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <HAL_I2C_MspInit+0xc0>)
 8000b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b54:	4a1a      	ldr	r2, [pc, #104]	; (8000bc0 <HAL_I2C_MspInit+0xc0>)
 8000b56:	f043 0302 	orr.w	r3, r3, #2
 8000b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b5e:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <HAL_I2C_MspInit+0xc0>)
 8000b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b64:	f003 0302 	and.w	r3, r3, #2
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b6c:	23c0      	movs	r3, #192	; 0xc0
 8000b6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b72:	2312      	movs	r3, #18
 8000b74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b84:	2304      	movs	r3, #4
 8000b86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b8e:	4619      	mov	r1, r3
 8000b90:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <HAL_I2C_MspInit+0xc4>)
 8000b92:	f000 fb1b 	bl	80011cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b96:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <HAL_I2C_MspInit+0xc0>)
 8000b98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b9c:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <HAL_I2C_MspInit+0xc0>)
 8000b9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ba2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_I2C_MspInit+0xc0>)
 8000ba8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bb4:	bf00      	nop
 8000bb6:	37d8      	adds	r7, #216	; 0xd8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40005400 	.word	0x40005400
 8000bc0:	58024400 	.word	0x58024400
 8000bc4:	58020400 	.word	0x58020400

08000bc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b0b6      	sub	sp, #216	; 0xd8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000be0:	f107 0310 	add.w	r3, r7, #16
 8000be4:	22b4      	movs	r2, #180	; 0xb4
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f006 f887 	bl	8006cfc <memset>
  if(huart->Instance==USART3)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a25      	ldr	r2, [pc, #148]	; (8000c88 <HAL_UART_MspInit+0xc0>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d142      	bne.n	8000c7e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c02:	f107 0310 	add.w	r3, r7, #16
 8000c06:	4618      	mov	r0, r3
 8000c08:	f002 f9a0 	bl	8002f4c <HAL_RCCEx_PeriphCLKConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c12:	f7ff ff55 	bl	8000ac0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c16:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <HAL_UART_MspInit+0xc4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	4a1b      	ldr	r2, [pc, #108]	; (8000c8c <HAL_UART_MspInit+0xc4>)
 8000c1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c22:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c26:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <HAL_UART_MspInit+0xc4>)
 8000c28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c34:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <HAL_UART_MspInit+0xc4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	4a14      	ldr	r2, [pc, #80]	; (8000c8c <HAL_UART_MspInit+0xc4>)
 8000c3c:	f043 0308 	orr.w	r3, r3, #8
 8000c40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <HAL_UART_MspInit+0xc4>)
 8000c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4a:	f003 0308 	and.w	r3, r3, #8
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c6c:	2307      	movs	r3, #7
 8000c6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c72:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000c76:	4619      	mov	r1, r3
 8000c78:	4805      	ldr	r0, [pc, #20]	; (8000c90 <HAL_UART_MspInit+0xc8>)
 8000c7a:	f000 faa7 	bl	80011cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c7e:	bf00      	nop
 8000c80:	37d8      	adds	r7, #216	; 0xd8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40004800 	.word	0x40004800
 8000c8c:	58024400 	.word	0x58024400
 8000c90:	58020c00 	.word	0x58020c00

08000c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <NMI_Handler+0x4>

08000c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <HardFault_Handler+0x4>

08000ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <MemManage_Handler+0x4>

08000ca6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000caa:	e7fe      	b.n	8000caa <BusFault_Handler+0x4>

08000cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <UsageFault_Handler+0x4>

08000cb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce0:	f000 f94c 	bl	8000f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf0:	4a14      	ldr	r2, [pc, #80]	; (8000d44 <_sbrk+0x5c>)
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <_sbrk+0x60>)
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cfc:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <_sbrk+0x64>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d102      	bne.n	8000d0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <_sbrk+0x64>)
 8000d06:	4a12      	ldr	r2, [pc, #72]	; (8000d50 <_sbrk+0x68>)
 8000d08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d207      	bcs.n	8000d28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d18:	f005 ffc6 	bl	8006ca8 <__errno>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	220c      	movs	r2, #12
 8000d20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295
 8000d26:	e009      	b.n	8000d3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <_sbrk+0x64>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d2e:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <_sbrk+0x64>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	4a05      	ldr	r2, [pc, #20]	; (8000d4c <_sbrk+0x64>)
 8000d38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	24050000 	.word	0x24050000
 8000d48:	00000400 	.word	0x00000400
 8000d4c:	240001bc 	.word	0x240001bc
 8000d50:	240001d8 	.word	0x240001d8

08000d54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d58:	4b32      	ldr	r3, [pc, #200]	; (8000e24 <SystemInit+0xd0>)
 8000d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d5e:	4a31      	ldr	r2, [pc, #196]	; (8000e24 <SystemInit+0xd0>)
 8000d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d68:	4b2f      	ldr	r3, [pc, #188]	; (8000e28 <SystemInit+0xd4>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f003 030f 	and.w	r3, r3, #15
 8000d70:	2b06      	cmp	r3, #6
 8000d72:	d807      	bhi.n	8000d84 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d74:	4b2c      	ldr	r3, [pc, #176]	; (8000e28 <SystemInit+0xd4>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f023 030f 	bic.w	r3, r3, #15
 8000d7c:	4a2a      	ldr	r2, [pc, #168]	; (8000e28 <SystemInit+0xd4>)
 8000d7e:	f043 0307 	orr.w	r3, r3, #7
 8000d82:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d84:	4b29      	ldr	r3, [pc, #164]	; (8000e2c <SystemInit+0xd8>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a28      	ldr	r2, [pc, #160]	; (8000e2c <SystemInit+0xd8>)
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d90:	4b26      	ldr	r3, [pc, #152]	; (8000e2c <SystemInit+0xd8>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d96:	4b25      	ldr	r3, [pc, #148]	; (8000e2c <SystemInit+0xd8>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	4924      	ldr	r1, [pc, #144]	; (8000e2c <SystemInit+0xd8>)
 8000d9c:	4b24      	ldr	r3, [pc, #144]	; (8000e30 <SystemInit+0xdc>)
 8000d9e:	4013      	ands	r3, r2
 8000da0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000da2:	4b21      	ldr	r3, [pc, #132]	; (8000e28 <SystemInit+0xd4>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f003 0308 	and.w	r3, r3, #8
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d007      	beq.n	8000dbe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dae:	4b1e      	ldr	r3, [pc, #120]	; (8000e28 <SystemInit+0xd4>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f023 030f 	bic.w	r3, r3, #15
 8000db6:	4a1c      	ldr	r2, [pc, #112]	; (8000e28 <SystemInit+0xd4>)
 8000db8:	f043 0307 	orr.w	r3, r3, #7
 8000dbc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000dbe:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <SystemInit+0xd8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000dc4:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <SystemInit+0xd8>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000dca:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <SystemInit+0xd8>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000dd0:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <SystemInit+0xd8>)
 8000dd2:	4a18      	ldr	r2, [pc, #96]	; (8000e34 <SystemInit+0xe0>)
 8000dd4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <SystemInit+0xd8>)
 8000dd8:	4a17      	ldr	r2, [pc, #92]	; (8000e38 <SystemInit+0xe4>)
 8000dda:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ddc:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <SystemInit+0xd8>)
 8000dde:	4a17      	ldr	r2, [pc, #92]	; (8000e3c <SystemInit+0xe8>)
 8000de0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000de2:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <SystemInit+0xd8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000de8:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <SystemInit+0xd8>)
 8000dea:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <SystemInit+0xe8>)
 8000dec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <SystemInit+0xd8>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000df4:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <SystemInit+0xd8>)
 8000df6:	4a11      	ldr	r2, [pc, #68]	; (8000e3c <SystemInit+0xe8>)
 8000df8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <SystemInit+0xd8>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e00:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <SystemInit+0xd8>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a09      	ldr	r2, [pc, #36]	; (8000e2c <SystemInit+0xd8>)
 8000e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e0c:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <SystemInit+0xd8>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <SystemInit+0xec>)
 8000e14:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000e18:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00
 8000e28:	52002000 	.word	0x52002000
 8000e2c:	58024400 	.word	0x58024400
 8000e30:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e34:	02020200 	.word	0x02020200
 8000e38:	01ff0000 	.word	0x01ff0000
 8000e3c:	01010280 	.word	0x01010280
 8000e40:	52004000 	.word	0x52004000

08000e44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e48:	f7ff ff84 	bl	8000d54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e4c:	480c      	ldr	r0, [pc, #48]	; (8000e80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e4e:	490d      	ldr	r1, [pc, #52]	; (8000e84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e50:	4a0d      	ldr	r2, [pc, #52]	; (8000e88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e54:	e002      	b.n	8000e5c <LoopCopyDataInit>

08000e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5a:	3304      	adds	r3, #4

08000e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e60:	d3f9      	bcc.n	8000e56 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e62:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e64:	4c0a      	ldr	r4, [pc, #40]	; (8000e90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e68:	e001      	b.n	8000e6e <LoopFillZerobss>

08000e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e6c:	3204      	adds	r2, #4

08000e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e70:	d3fb      	bcc.n	8000e6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e72:	f005 ff1f 	bl	8006cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e76:	f7ff fc25 	bl	80006c4 <main>
  bx  lr
 8000e7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e7c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000e80:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e84:	2400008c 	.word	0x2400008c
  ldr r2, =_sidata
 8000e88:	080076d8 	.word	0x080076d8
  ldr r2, =_sbss
 8000e8c:	2400008c 	.word	0x2400008c
  ldr r4, =_ebss
 8000e90:	240001d4 	.word	0x240001d4

08000e94 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e94:	e7fe      	b.n	8000e94 <ADC3_IRQHandler>
	...

08000e98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e9e:	2003      	movs	r0, #3
 8000ea0:	f000 f962 	bl	8001168 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ea4:	f001 fe7c 	bl	8002ba0 <HAL_RCC_GetSysClockFreq>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <HAL_Init+0x68>)
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	0a1b      	lsrs	r3, r3, #8
 8000eb0:	f003 030f 	and.w	r3, r3, #15
 8000eb4:	4913      	ldr	r1, [pc, #76]	; (8000f04 <HAL_Init+0x6c>)
 8000eb6:	5ccb      	ldrb	r3, [r1, r3]
 8000eb8:	f003 031f 	and.w	r3, r3, #31
 8000ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ec0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <HAL_Init+0x68>)
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	f003 030f 	and.w	r3, r3, #15
 8000eca:	4a0e      	ldr	r2, [pc, #56]	; (8000f04 <HAL_Init+0x6c>)
 8000ecc:	5cd3      	ldrb	r3, [r2, r3]
 8000ece:	f003 031f 	and.w	r3, r3, #31
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed8:	4a0b      	ldr	r2, [pc, #44]	; (8000f08 <HAL_Init+0x70>)
 8000eda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000edc:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <HAL_Init+0x74>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ee2:	200f      	movs	r0, #15
 8000ee4:	f000 f814 	bl	8000f10 <HAL_InitTick>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e002      	b.n	8000ef8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef2:	f7ff fdeb 	bl	8000acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	58024400 	.word	0x58024400
 8000f04:	0800765c 	.word	0x0800765c
 8000f08:	2400001c 	.word	0x2400001c
 8000f0c:	24000018 	.word	0x24000018

08000f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f18:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <HAL_InitTick+0x60>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d101      	bne.n	8000f24 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	e021      	b.n	8000f68 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f24:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <HAL_InitTick+0x64>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <HAL_InitTick+0x60>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 f939 	bl	80011b2 <HAL_SYSTICK_Config>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e00e      	b.n	8000f68 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b0f      	cmp	r3, #15
 8000f4e:	d80a      	bhi.n	8000f66 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f50:	2200      	movs	r2, #0
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295
 8000f58:	f000 f911 	bl	800117e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f5c:	4a06      	ldr	r2, [pc, #24]	; (8000f78 <HAL_InitTick+0x68>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f62:	2300      	movs	r3, #0
 8000f64:	e000      	b.n	8000f68 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	24000024 	.word	0x24000024
 8000f74:	24000018 	.word	0x24000018
 8000f78:	24000020 	.word	0x24000020

08000f7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_IncTick+0x20>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_IncTick+0x24>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <HAL_IncTick+0x24>)
 8000f8e:	6013      	str	r3, [r2, #0]
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	24000024 	.word	0x24000024
 8000fa0:	240001c0 	.word	0x240001c0

08000fa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <HAL_GetTick+0x14>)
 8000faa:	681b      	ldr	r3, [r3, #0]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	240001c0 	.word	0x240001c0

08000fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc4:	f7ff ffee 	bl	8000fa4 <HAL_GetTick>
 8000fc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd4:	d005      	beq.n	8000fe2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <HAL_Delay+0x44>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4413      	add	r3, r2
 8000fe0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fe2:	bf00      	nop
 8000fe4:	f7ff ffde 	bl	8000fa4 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d8f7      	bhi.n	8000fe4 <HAL_Delay+0x28>
  {
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	bf00      	nop
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	24000024 	.word	0x24000024

08001004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001014:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <__NVIC_SetPriorityGrouping+0x40>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001020:	4013      	ands	r3, r2
 8001022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <__NVIC_SetPriorityGrouping+0x44>)
 800102e:	4313      	orrs	r3, r2
 8001030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001032:	4a04      	ldr	r2, [pc, #16]	; (8001044 <__NVIC_SetPriorityGrouping+0x40>)
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	60d3      	str	r3, [r2, #12]
}
 8001038:	bf00      	nop
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000ed00 	.word	0xe000ed00
 8001048:	05fa0000 	.word	0x05fa0000

0800104c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <__NVIC_GetPriorityGrouping+0x18>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	0a1b      	lsrs	r3, r3, #8
 8001056:	f003 0307 	and.w	r3, r3, #7
}
 800105a:	4618      	mov	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	6039      	str	r1, [r7, #0]
 8001072:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001074:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001078:	2b00      	cmp	r3, #0
 800107a:	db0a      	blt.n	8001092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	b2da      	uxtb	r2, r3
 8001080:	490c      	ldr	r1, [pc, #48]	; (80010b4 <__NVIC_SetPriority+0x4c>)
 8001082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001086:	0112      	lsls	r2, r2, #4
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	440b      	add	r3, r1
 800108c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001090:	e00a      	b.n	80010a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4908      	ldr	r1, [pc, #32]	; (80010b8 <__NVIC_SetPriority+0x50>)
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	3b04      	subs	r3, #4
 80010a0:	0112      	lsls	r2, r2, #4
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	440b      	add	r3, r1
 80010a6:	761a      	strb	r2, [r3, #24]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000e100 	.word	0xe000e100
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	; 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f1c3 0307 	rsb	r3, r3, #7
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	bf28      	it	cs
 80010da:	2304      	movcs	r3, #4
 80010dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3304      	adds	r3, #4
 80010e2:	2b06      	cmp	r3, #6
 80010e4:	d902      	bls.n	80010ec <NVIC_EncodePriority+0x30>
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3b03      	subs	r3, #3
 80010ea:	e000      	b.n	80010ee <NVIC_EncodePriority+0x32>
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	f04f 32ff 	mov.w	r2, #4294967295
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43da      	mvns	r2, r3
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	401a      	ands	r2, r3
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001104:	f04f 31ff 	mov.w	r1, #4294967295
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fa01 f303 	lsl.w	r3, r1, r3
 800110e:	43d9      	mvns	r1, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	4313      	orrs	r3, r2
         );
}
 8001116:	4618      	mov	r0, r3
 8001118:	3724      	adds	r7, #36	; 0x24
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3b01      	subs	r3, #1
 8001130:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001134:	d301      	bcc.n	800113a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001136:	2301      	movs	r3, #1
 8001138:	e00f      	b.n	800115a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113a:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <SysTick_Config+0x40>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3b01      	subs	r3, #1
 8001140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001142:	210f      	movs	r1, #15
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f7ff ff8e 	bl	8001068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <SysTick_Config+0x40>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001152:	4b04      	ldr	r3, [pc, #16]	; (8001164 <SysTick_Config+0x40>)
 8001154:	2207      	movs	r2, #7
 8001156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	e000e010 	.word	0xe000e010

08001168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ff47 	bl	8001004 <__NVIC_SetPriorityGrouping>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b086      	sub	sp, #24
 8001182:	af00      	add	r7, sp, #0
 8001184:	4603      	mov	r3, r0
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	607a      	str	r2, [r7, #4]
 800118a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800118c:	f7ff ff5e 	bl	800104c <__NVIC_GetPriorityGrouping>
 8001190:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	68b9      	ldr	r1, [r7, #8]
 8001196:	6978      	ldr	r0, [r7, #20]
 8001198:	f7ff ff90 	bl	80010bc <NVIC_EncodePriority>
 800119c:	4602      	mov	r2, r0
 800119e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff5f 	bl	8001068 <__NVIC_SetPriority>
}
 80011aa:	bf00      	nop
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff ffb2 	bl	8001124 <SysTick_Config>
 80011c0:	4603      	mov	r3, r0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b089      	sub	sp, #36	; 0x24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80011da:	4b86      	ldr	r3, [pc, #536]	; (80013f4 <HAL_GPIO_Init+0x228>)
 80011dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80011de:	e18c      	b.n	80014fa <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	2101      	movs	r1, #1
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 817e 	beq.w	80014f4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	2b01      	cmp	r3, #1
 8001202:	d005      	beq.n	8001210 <HAL_GPIO_Init+0x44>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d130      	bne.n	8001272 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	2203      	movs	r2, #3
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	68da      	ldr	r2, [r3, #12]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001246:	2201      	movs	r2, #1
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4013      	ands	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	091b      	lsrs	r3, r3, #4
 800125c:	f003 0201 	and.w	r2, r3, #1
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4313      	orrs	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 0303 	and.w	r3, r3, #3
 800127a:	2b03      	cmp	r3, #3
 800127c:	d017      	beq.n	80012ae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	2203      	movs	r2, #3
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d123      	bne.n	8001302 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	08da      	lsrs	r2, r3, #3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	3208      	adds	r2, #8
 80012c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	220f      	movs	r2, #15
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	691a      	ldr	r2, [r3, #16]
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	08da      	lsrs	r2, r3, #3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3208      	adds	r2, #8
 80012fc:	69b9      	ldr	r1, [r7, #24]
 80012fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	2203      	movs	r2, #3
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 0203 	and.w	r2, r3, #3
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4313      	orrs	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 80d8 	beq.w	80014f4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001344:	4b2c      	ldr	r3, [pc, #176]	; (80013f8 <HAL_GPIO_Init+0x22c>)
 8001346:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800134a:	4a2b      	ldr	r2, [pc, #172]	; (80013f8 <HAL_GPIO_Init+0x22c>)
 800134c:	f043 0302 	orr.w	r3, r3, #2
 8001350:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001354:	4b28      	ldr	r3, [pc, #160]	; (80013f8 <HAL_GPIO_Init+0x22c>)
 8001356:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001362:	4a26      	ldr	r2, [pc, #152]	; (80013fc <HAL_GPIO_Init+0x230>)
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	089b      	lsrs	r3, r3, #2
 8001368:	3302      	adds	r3, #2
 800136a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f003 0303 	and.w	r3, r3, #3
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	220f      	movs	r2, #15
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43db      	mvns	r3, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4013      	ands	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a1d      	ldr	r2, [pc, #116]	; (8001400 <HAL_GPIO_Init+0x234>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d04a      	beq.n	8001424 <HAL_GPIO_Init+0x258>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a1c      	ldr	r2, [pc, #112]	; (8001404 <HAL_GPIO_Init+0x238>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d02b      	beq.n	80013ee <HAL_GPIO_Init+0x222>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a1b      	ldr	r2, [pc, #108]	; (8001408 <HAL_GPIO_Init+0x23c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d025      	beq.n	80013ea <HAL_GPIO_Init+0x21e>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a1a      	ldr	r2, [pc, #104]	; (800140c <HAL_GPIO_Init+0x240>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d01f      	beq.n	80013e6 <HAL_GPIO_Init+0x21a>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a19      	ldr	r2, [pc, #100]	; (8001410 <HAL_GPIO_Init+0x244>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d019      	beq.n	80013e2 <HAL_GPIO_Init+0x216>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a18      	ldr	r2, [pc, #96]	; (8001414 <HAL_GPIO_Init+0x248>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d013      	beq.n	80013de <HAL_GPIO_Init+0x212>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a17      	ldr	r2, [pc, #92]	; (8001418 <HAL_GPIO_Init+0x24c>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d00d      	beq.n	80013da <HAL_GPIO_Init+0x20e>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a16      	ldr	r2, [pc, #88]	; (800141c <HAL_GPIO_Init+0x250>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d007      	beq.n	80013d6 <HAL_GPIO_Init+0x20a>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a15      	ldr	r2, [pc, #84]	; (8001420 <HAL_GPIO_Init+0x254>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d101      	bne.n	80013d2 <HAL_GPIO_Init+0x206>
 80013ce:	2309      	movs	r3, #9
 80013d0:	e029      	b.n	8001426 <HAL_GPIO_Init+0x25a>
 80013d2:	230a      	movs	r3, #10
 80013d4:	e027      	b.n	8001426 <HAL_GPIO_Init+0x25a>
 80013d6:	2307      	movs	r3, #7
 80013d8:	e025      	b.n	8001426 <HAL_GPIO_Init+0x25a>
 80013da:	2306      	movs	r3, #6
 80013dc:	e023      	b.n	8001426 <HAL_GPIO_Init+0x25a>
 80013de:	2305      	movs	r3, #5
 80013e0:	e021      	b.n	8001426 <HAL_GPIO_Init+0x25a>
 80013e2:	2304      	movs	r3, #4
 80013e4:	e01f      	b.n	8001426 <HAL_GPIO_Init+0x25a>
 80013e6:	2303      	movs	r3, #3
 80013e8:	e01d      	b.n	8001426 <HAL_GPIO_Init+0x25a>
 80013ea:	2302      	movs	r3, #2
 80013ec:	e01b      	b.n	8001426 <HAL_GPIO_Init+0x25a>
 80013ee:	2301      	movs	r3, #1
 80013f0:	e019      	b.n	8001426 <HAL_GPIO_Init+0x25a>
 80013f2:	bf00      	nop
 80013f4:	58000080 	.word	0x58000080
 80013f8:	58024400 	.word	0x58024400
 80013fc:	58000400 	.word	0x58000400
 8001400:	58020000 	.word	0x58020000
 8001404:	58020400 	.word	0x58020400
 8001408:	58020800 	.word	0x58020800
 800140c:	58020c00 	.word	0x58020c00
 8001410:	58021000 	.word	0x58021000
 8001414:	58021400 	.word	0x58021400
 8001418:	58021800 	.word	0x58021800
 800141c:	58021c00 	.word	0x58021c00
 8001420:	58022400 	.word	0x58022400
 8001424:	2300      	movs	r3, #0
 8001426:	69fa      	ldr	r2, [r7, #28]
 8001428:	f002 0203 	and.w	r2, r2, #3
 800142c:	0092      	lsls	r2, r2, #2
 800142e:	4093      	lsls	r3, r2
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4313      	orrs	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001436:	4938      	ldr	r1, [pc, #224]	; (8001518 <HAL_GPIO_Init+0x34c>)
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	089b      	lsrs	r3, r3, #2
 800143c:	3302      	adds	r3, #2
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800146a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001498:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4013      	ands	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	3301      	adds	r3, #1
 80014f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	fa22 f303 	lsr.w	r3, r2, r3
 8001504:	2b00      	cmp	r3, #0
 8001506:	f47f ae6b 	bne.w	80011e0 <HAL_GPIO_Init+0x14>
  }
}
 800150a:	bf00      	nop
 800150c:	bf00      	nop
 800150e:	3724      	adds	r7, #36	; 0x24
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	58000400 	.word	0x58000400

0800151c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	807b      	strh	r3, [r7, #2]
 8001528:	4613      	mov	r3, r2
 800152a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800152c:	787b      	ldrb	r3, [r7, #1]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001532:	887a      	ldrh	r2, [r7, #2]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001538:	e003      	b.n	8001542 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800153a:	887b      	ldrh	r3, [r7, #2]
 800153c:	041a      	lsls	r2, r3, #16
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	619a      	str	r2, [r3, #24]
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e07f      	b.n	8001662 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d106      	bne.n	800157c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff fac2 	bl	8000b00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2224      	movs	r2, #36	; 0x24
 8001580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 0201 	bic.w	r2, r2, #1
 8001592:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d107      	bne.n	80015ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	e006      	b.n	80015d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689a      	ldr	r2, [r3, #8]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80015d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d104      	bne.n	80015ea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6859      	ldr	r1, [r3, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b1d      	ldr	r3, [pc, #116]	; (800166c <HAL_I2C_Init+0x11c>)
 80015f6:	430b      	orrs	r3, r1
 80015f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	68da      	ldr	r2, [r3, #12]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001608:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	691a      	ldr	r2, [r3, #16]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	430a      	orrs	r2, r1
 8001622:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69d9      	ldr	r1, [r3, #28]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a1a      	ldr	r2, [r3, #32]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	430a      	orrs	r2, r1
 8001632:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f042 0201 	orr.w	r2, r2, #1
 8001642:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2220      	movs	r2, #32
 800164e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	02008000 	.word	0x02008000

08001670 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af02      	add	r7, sp, #8
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	461a      	mov	r2, r3
 800167c:	460b      	mov	r3, r1
 800167e:	817b      	strh	r3, [r7, #10]
 8001680:	4613      	mov	r3, r2
 8001682:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b20      	cmp	r3, #32
 800168e:	f040 80da 	bne.w	8001846 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001698:	2b01      	cmp	r3, #1
 800169a:	d101      	bne.n	80016a0 <HAL_I2C_Master_Transmit+0x30>
 800169c:	2302      	movs	r3, #2
 800169e:	e0d3      	b.n	8001848 <HAL_I2C_Master_Transmit+0x1d8>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016a8:	f7ff fc7c 	bl	8000fa4 <HAL_GetTick>
 80016ac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	2319      	movs	r3, #25
 80016b4:	2201      	movs	r2, #1
 80016b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f000 f9e6 	bl	8001a8c <I2C_WaitOnFlagUntilTimeout>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e0be      	b.n	8001848 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2221      	movs	r2, #33	; 0x21
 80016ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2210      	movs	r2, #16
 80016d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2200      	movs	r2, #0
 80016de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	893a      	ldrh	r2, [r7, #8]
 80016ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2200      	movs	r2, #0
 80016f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	2bff      	cmp	r3, #255	; 0xff
 80016fa:	d90e      	bls.n	800171a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	22ff      	movs	r2, #255	; 0xff
 8001700:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001706:	b2da      	uxtb	r2, r3
 8001708:	8979      	ldrh	r1, [r7, #10]
 800170a:	4b51      	ldr	r3, [pc, #324]	; (8001850 <HAL_I2C_Master_Transmit+0x1e0>)
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f000 fbdc 	bl	8001ed0 <I2C_TransferConfig>
 8001718:	e06c      	b.n	80017f4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800171e:	b29a      	uxth	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001728:	b2da      	uxtb	r2, r3
 800172a:	8979      	ldrh	r1, [r7, #10]
 800172c:	4b48      	ldr	r3, [pc, #288]	; (8001850 <HAL_I2C_Master_Transmit+0x1e0>)
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f000 fbcb 	bl	8001ed0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800173a:	e05b      	b.n	80017f4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	6a39      	ldr	r1, [r7, #32]
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f000 f9e3 	bl	8001b0c <I2C_WaitOnTXISFlagUntilTimeout>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e07b      	b.n	8001848 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001754:	781a      	ldrb	r2, [r3, #0]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	1c5a      	adds	r2, r3, #1
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800176a:	b29b      	uxth	r3, r3
 800176c:	3b01      	subs	r3, #1
 800176e:	b29a      	uxth	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001778:	3b01      	subs	r3, #1
 800177a:	b29a      	uxth	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001784:	b29b      	uxth	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d034      	beq.n	80017f4 <HAL_I2C_Master_Transmit+0x184>
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800178e:	2b00      	cmp	r3, #0
 8001790:	d130      	bne.n	80017f4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	2200      	movs	r2, #0
 800179a:	2180      	movs	r1, #128	; 0x80
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f000 f975 	bl	8001a8c <I2C_WaitOnFlagUntilTimeout>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e04d      	b.n	8001848 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	2bff      	cmp	r3, #255	; 0xff
 80017b4:	d90e      	bls.n	80017d4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	22ff      	movs	r2, #255	; 0xff
 80017ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	8979      	ldrh	r1, [r7, #10]
 80017c4:	2300      	movs	r3, #0
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f000 fb7f 	bl	8001ed0 <I2C_TransferConfig>
 80017d2:	e00f      	b.n	80017f4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d8:	b29a      	uxth	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	8979      	ldrh	r1, [r7, #10]
 80017e6:	2300      	movs	r3, #0
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f000 fb6e 	bl	8001ed0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d19e      	bne.n	800173c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	6a39      	ldr	r1, [r7, #32]
 8001802:	68f8      	ldr	r0, [r7, #12]
 8001804:	f000 f9c2 	bl	8001b8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e01a      	b.n	8001848 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2220      	movs	r2, #32
 8001818:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6859      	ldr	r1, [r3, #4]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_I2C_Master_Transmit+0x1e4>)
 8001826:	400b      	ands	r3, r1
 8001828:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2220      	movs	r2, #32
 800182e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	e000      	b.n	8001848 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001846:	2302      	movs	r3, #2
  }
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	80002000 	.word	0x80002000
 8001854:	fe00e800 	.word	0xfe00e800

08001858 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af02      	add	r7, sp, #8
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	607a      	str	r2, [r7, #4]
 8001862:	461a      	mov	r2, r3
 8001864:	460b      	mov	r3, r1
 8001866:	817b      	strh	r3, [r7, #10]
 8001868:	4613      	mov	r3, r2
 800186a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b20      	cmp	r3, #32
 8001876:	f040 80db 	bne.w	8001a30 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001880:	2b01      	cmp	r3, #1
 8001882:	d101      	bne.n	8001888 <HAL_I2C_Master_Receive+0x30>
 8001884:	2302      	movs	r3, #2
 8001886:	e0d4      	b.n	8001a32 <HAL_I2C_Master_Receive+0x1da>
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001890:	f7ff fb88 	bl	8000fa4 <HAL_GetTick>
 8001894:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	2319      	movs	r3, #25
 800189c:	2201      	movs	r2, #1
 800189e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f000 f8f2 	bl	8001a8c <I2C_WaitOnFlagUntilTimeout>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e0bf      	b.n	8001a32 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2222      	movs	r2, #34	; 0x22
 80018b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2210      	movs	r2, #16
 80018be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2200      	movs	r2, #0
 80018c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	893a      	ldrh	r2, [r7, #8]
 80018d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2200      	movs	r2, #0
 80018d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018de:	b29b      	uxth	r3, r3
 80018e0:	2bff      	cmp	r3, #255	; 0xff
 80018e2:	d90e      	bls.n	8001902 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	22ff      	movs	r2, #255	; 0xff
 80018e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	8979      	ldrh	r1, [r7, #10]
 80018f2:	4b52      	ldr	r3, [pc, #328]	; (8001a3c <HAL_I2C_Master_Receive+0x1e4>)
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018fa:	68f8      	ldr	r0, [r7, #12]
 80018fc:	f000 fae8 	bl	8001ed0 <I2C_TransferConfig>
 8001900:	e06d      	b.n	80019de <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001906:	b29a      	uxth	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001910:	b2da      	uxtb	r2, r3
 8001912:	8979      	ldrh	r1, [r7, #10]
 8001914:	4b49      	ldr	r3, [pc, #292]	; (8001a3c <HAL_I2C_Master_Receive+0x1e4>)
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f000 fad7 	bl	8001ed0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001922:	e05c      	b.n	80019de <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	6a39      	ldr	r1, [r7, #32]
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f000 f96b 	bl	8001c04 <I2C_WaitOnRXNEFlagUntilTimeout>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e07c      	b.n	8001a32 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194a:	1c5a      	adds	r2, r3, #1
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001954:	3b01      	subs	r3, #1
 8001956:	b29a      	uxth	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001960:	b29b      	uxth	r3, r3
 8001962:	3b01      	subs	r3, #1
 8001964:	b29a      	uxth	r2, r3
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800196e:	b29b      	uxth	r3, r3
 8001970:	2b00      	cmp	r3, #0
 8001972:	d034      	beq.n	80019de <HAL_I2C_Master_Receive+0x186>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001978:	2b00      	cmp	r3, #0
 800197a:	d130      	bne.n	80019de <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	6a3b      	ldr	r3, [r7, #32]
 8001982:	2200      	movs	r2, #0
 8001984:	2180      	movs	r1, #128	; 0x80
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	f000 f880 	bl	8001a8c <I2C_WaitOnFlagUntilTimeout>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e04d      	b.n	8001a32 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800199a:	b29b      	uxth	r3, r3
 800199c:	2bff      	cmp	r3, #255	; 0xff
 800199e:	d90e      	bls.n	80019be <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	22ff      	movs	r2, #255	; 0xff
 80019a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	8979      	ldrh	r1, [r7, #10]
 80019ae:	2300      	movs	r3, #0
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f000 fa8a 	bl	8001ed0 <I2C_TransferConfig>
 80019bc:	e00f      	b.n	80019de <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	8979      	ldrh	r1, [r7, #10]
 80019d0:	2300      	movs	r3, #0
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f000 fa79 	bl	8001ed0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d19d      	bne.n	8001924 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	6a39      	ldr	r1, [r7, #32]
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f000 f8cd 	bl	8001b8c <I2C_WaitOnSTOPFlagUntilTimeout>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e01a      	b.n	8001a32 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2220      	movs	r2, #32
 8001a02:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6859      	ldr	r1, [r3, #4]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <HAL_I2C_Master_Receive+0x1e8>)
 8001a10:	400b      	ands	r3, r1
 8001a12:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2220      	movs	r2, #32
 8001a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	e000      	b.n	8001a32 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001a30:	2302      	movs	r3, #2
  }
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	80002400 	.word	0x80002400
 8001a40:	fe00e800 	.word	0xfe00e800

08001a44 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d103      	bne.n	8001a62 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d007      	beq.n	8001a80 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	699a      	ldr	r2, [r3, #24]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f042 0201 	orr.w	r2, r2, #1
 8001a7e:	619a      	str	r2, [r3, #24]
  }
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a9c:	e022      	b.n	8001ae4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa4:	d01e      	beq.n	8001ae4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aa6:	f7ff fa7d 	bl	8000fa4 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d302      	bcc.n	8001abc <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d113      	bne.n	8001ae4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac0:	f043 0220 	orr.w	r2, r3, #32
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2220      	movs	r2, #32
 8001acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e00f      	b.n	8001b04 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	699a      	ldr	r2, [r3, #24]
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	4013      	ands	r3, r2
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	bf0c      	ite	eq
 8001af4:	2301      	moveq	r3, #1
 8001af6:	2300      	movne	r3, #0
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	461a      	mov	r2, r3
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d0cd      	beq.n	8001a9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b18:	e02c      	b.n	8001b74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	68b9      	ldr	r1, [r7, #8]
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f000 f8ea 	bl	8001cf8 <I2C_IsErrorOccurred>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e02a      	b.n	8001b84 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b34:	d01e      	beq.n	8001b74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b36:	f7ff fa35 	bl	8000fa4 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d302      	bcc.n	8001b4c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d113      	bne.n	8001b74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b50:	f043 0220 	orr.w	r2, r3, #32
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e007      	b.n	8001b84 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d1cb      	bne.n	8001b1a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b98:	e028      	b.n	8001bec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	68b9      	ldr	r1, [r7, #8]
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 f8aa 	bl	8001cf8 <I2C_IsErrorOccurred>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e026      	b.n	8001bfc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bae:	f7ff f9f9 	bl	8000fa4 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	68ba      	ldr	r2, [r7, #8]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d302      	bcc.n	8001bc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d113      	bne.n	8001bec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc8:	f043 0220 	orr.w	r2, r3, #32
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e007      	b.n	8001bfc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	f003 0320 	and.w	r3, r3, #32
 8001bf6:	2b20      	cmp	r3, #32
 8001bf8:	d1cf      	bne.n	8001b9a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001c10:	e064      	b.n	8001cdc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	68b9      	ldr	r1, [r7, #8]
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f000 f86e 	bl	8001cf8 <I2C_IsErrorOccurred>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e062      	b.n	8001cec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	f003 0320 	and.w	r3, r3, #32
 8001c30:	2b20      	cmp	r3, #32
 8001c32:	d138      	bne.n	8001ca6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d105      	bne.n	8001c4e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	e04e      	b.n	8001cec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	f003 0310 	and.w	r3, r3, #16
 8001c58:	2b10      	cmp	r3, #16
 8001c5a:	d107      	bne.n	8001c6c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2210      	movs	r2, #16
 8001c62:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2204      	movs	r2, #4
 8001c68:	645a      	str	r2, [r3, #68]	; 0x44
 8001c6a:	e002      	b.n	8001c72 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2220      	movs	r2, #32
 8001c78:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6859      	ldr	r1, [r3, #4]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8001c86:	400b      	ands	r3, r1
 8001c88:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e022      	b.n	8001cec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ca6:	f7ff f97d 	bl	8000fa4 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	68ba      	ldr	r2, [r7, #8]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d302      	bcc.n	8001cbc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10f      	bne.n	8001cdc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc0:	f043 0220 	orr.w	r2, r3, #32
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e007      	b.n	8001cec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	d193      	bne.n	8001c12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	fe00e800 	.word	0xfe00e800

08001cf8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	; 0x28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	f003 0310 	and.w	r3, r3, #16
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d075      	beq.n	8001e10 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2210      	movs	r2, #16
 8001d2a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d2c:	e056      	b.n	8001ddc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d34:	d052      	beq.n	8001ddc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d36:	f7ff f935 	bl	8000fa4 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	68ba      	ldr	r2, [r7, #8]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d302      	bcc.n	8001d4c <I2C_IsErrorOccurred+0x54>
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d147      	bne.n	8001ddc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d56:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d5e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d6e:	d12e      	bne.n	8001dce <I2C_IsErrorOccurred+0xd6>
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d76:	d02a      	beq.n	8001dce <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001d78:	7cfb      	ldrb	r3, [r7, #19]
 8001d7a:	2b20      	cmp	r3, #32
 8001d7c:	d027      	beq.n	8001dce <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d8c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001d8e:	f7ff f909 	bl	8000fa4 <HAL_GetTick>
 8001d92:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d94:	e01b      	b.n	8001dce <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001d96:	f7ff f905 	bl	8000fa4 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b19      	cmp	r3, #25
 8001da2:	d914      	bls.n	8001dce <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da8:	f043 0220 	orr.w	r2, r3, #32
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2220      	movs	r2, #32
 8001db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	f003 0320 	and.w	r3, r3, #32
 8001dd8:	2b20      	cmp	r3, #32
 8001dda:	d1dc      	bne.n	8001d96 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	f003 0320 	and.w	r3, r3, #32
 8001de6:	2b20      	cmp	r3, #32
 8001de8:	d003      	beq.n	8001df2 <I2C_IsErrorOccurred+0xfa>
 8001dea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d09d      	beq.n	8001d2e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001df2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d103      	bne.n	8001e02 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2220      	movs	r2, #32
 8001e00:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	f043 0304 	orr.w	r3, r3, #4
 8001e08:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00b      	beq.n	8001e3a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001e22:	6a3b      	ldr	r3, [r7, #32]
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00b      	beq.n	8001e5c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001e44:	6a3b      	ldr	r3, [r7, #32]
 8001e46:	f043 0308 	orr.w	r3, r3, #8
 8001e4a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00b      	beq.n	8001e7e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001e66:	6a3b      	ldr	r3, [r7, #32]
 8001e68:	f043 0302 	orr.w	r3, r3, #2
 8001e6c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e76:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001e7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d01c      	beq.n	8001ec0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f7ff fddc 	bl	8001a44 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6859      	ldr	r1, [r3, #4]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <I2C_IsErrorOccurred+0x1d4>)
 8001e98:	400b      	ands	r3, r1
 8001e9a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ea0:	6a3b      	ldr	r3, [r7, #32]
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3728      	adds	r7, #40	; 0x28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	fe00e800 	.word	0xfe00e800

08001ed0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b087      	sub	sp, #28
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	607b      	str	r3, [r7, #4]
 8001eda:	460b      	mov	r3, r1
 8001edc:	817b      	strh	r3, [r7, #10]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ee2:	897b      	ldrh	r3, [r7, #10]
 8001ee4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ee8:	7a7b      	ldrb	r3, [r7, #9]
 8001eea:	041b      	lsls	r3, r3, #16
 8001eec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ef0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ef6:	6a3b      	ldr	r3, [r7, #32]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001efe:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	6a3b      	ldr	r3, [r7, #32]
 8001f08:	0d5b      	lsrs	r3, r3, #21
 8001f0a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001f0e:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <I2C_TransferConfig+0x60>)
 8001f10:	430b      	orrs	r3, r1
 8001f12:	43db      	mvns	r3, r3
 8001f14:	ea02 0103 	and.w	r1, r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001f22:	bf00      	nop
 8001f24:	371c      	adds	r7, #28
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	03ff63ff 	.word	0x03ff63ff

08001f34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b20      	cmp	r3, #32
 8001f48:	d138      	bne.n	8001fbc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d101      	bne.n	8001f58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f54:	2302      	movs	r3, #2
 8001f56:	e032      	b.n	8001fbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2224      	movs	r2, #36	; 0x24
 8001f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0201 	bic.w	r2, r2, #1
 8001f76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6819      	ldr	r1, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0201 	orr.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2220      	movs	r2, #32
 8001fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	e000      	b.n	8001fbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fbc:	2302      	movs	r3, #2
  }
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b085      	sub	sp, #20
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b20      	cmp	r3, #32
 8001fde:	d139      	bne.n	8002054 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d101      	bne.n	8001fee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e033      	b.n	8002056 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2224      	movs	r2, #36	; 0x24
 8001ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0201 	bic.w	r2, r2, #1
 800200c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800201c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	021b      	lsls	r3, r3, #8
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	4313      	orrs	r3, r2
 8002026:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0201 	orr.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2220      	movs	r2, #32
 8002044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	e000      	b.n	8002056 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002054:	2302      	movs	r3, #2
  }
}
 8002056:	4618      	mov	r0, r3
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
	...

08002064 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800206c:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <HAL_PWREx_ConfigSupply+0x70>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b04      	cmp	r3, #4
 8002076:	d00a      	beq.n	800208e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002078:	4b16      	ldr	r3, [pc, #88]	; (80020d4 <HAL_PWREx_ConfigSupply+0x70>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	429a      	cmp	r2, r3
 8002084:	d001      	beq.n	800208a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e01f      	b.n	80020ca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	e01d      	b.n	80020ca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800208e:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <HAL_PWREx_ConfigSupply+0x70>)
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	f023 0207 	bic.w	r2, r3, #7
 8002096:	490f      	ldr	r1, [pc, #60]	; (80020d4 <HAL_PWREx_ConfigSupply+0x70>)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4313      	orrs	r3, r2
 800209c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800209e:	f7fe ff81 	bl	8000fa4 <HAL_GetTick>
 80020a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80020a4:	e009      	b.n	80020ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80020a6:	f7fe ff7d 	bl	8000fa4 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020b4:	d901      	bls.n	80020ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e007      	b.n	80020ca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80020ba:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <HAL_PWREx_ConfigSupply+0x70>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020c6:	d1ee      	bne.n	80020a6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	58024800 	.word	0x58024800

080020d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08c      	sub	sp, #48	; 0x30
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e39d      	b.n	8002826 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 8087 	beq.w	8002206 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020f8:	4b88      	ldr	r3, [pc, #544]	; (800231c <HAL_RCC_OscConfig+0x244>)
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002100:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002102:	4b86      	ldr	r3, [pc, #536]	; (800231c <HAL_RCC_OscConfig+0x244>)
 8002104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002106:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800210a:	2b10      	cmp	r3, #16
 800210c:	d007      	beq.n	800211e <HAL_RCC_OscConfig+0x46>
 800210e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002110:	2b18      	cmp	r3, #24
 8002112:	d110      	bne.n	8002136 <HAL_RCC_OscConfig+0x5e>
 8002114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d10b      	bne.n	8002136 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800211e:	4b7f      	ldr	r3, [pc, #508]	; (800231c <HAL_RCC_OscConfig+0x244>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d06c      	beq.n	8002204 <HAL_RCC_OscConfig+0x12c>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d168      	bne.n	8002204 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e377      	b.n	8002826 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800213e:	d106      	bne.n	800214e <HAL_RCC_OscConfig+0x76>
 8002140:	4b76      	ldr	r3, [pc, #472]	; (800231c <HAL_RCC_OscConfig+0x244>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a75      	ldr	r2, [pc, #468]	; (800231c <HAL_RCC_OscConfig+0x244>)
 8002146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214a:	6013      	str	r3, [r2, #0]
 800214c:	e02e      	b.n	80021ac <HAL_RCC_OscConfig+0xd4>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10c      	bne.n	8002170 <HAL_RCC_OscConfig+0x98>
 8002156:	4b71      	ldr	r3, [pc, #452]	; (800231c <HAL_RCC_OscConfig+0x244>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a70      	ldr	r2, [pc, #448]	; (800231c <HAL_RCC_OscConfig+0x244>)
 800215c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	4b6e      	ldr	r3, [pc, #440]	; (800231c <HAL_RCC_OscConfig+0x244>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a6d      	ldr	r2, [pc, #436]	; (800231c <HAL_RCC_OscConfig+0x244>)
 8002168:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	e01d      	b.n	80021ac <HAL_RCC_OscConfig+0xd4>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002178:	d10c      	bne.n	8002194 <HAL_RCC_OscConfig+0xbc>
 800217a:	4b68      	ldr	r3, [pc, #416]	; (800231c <HAL_RCC_OscConfig+0x244>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a67      	ldr	r2, [pc, #412]	; (800231c <HAL_RCC_OscConfig+0x244>)
 8002180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	4b65      	ldr	r3, [pc, #404]	; (800231c <HAL_RCC_OscConfig+0x244>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a64      	ldr	r2, [pc, #400]	; (800231c <HAL_RCC_OscConfig+0x244>)
 800218c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	e00b      	b.n	80021ac <HAL_RCC_OscConfig+0xd4>
 8002194:	4b61      	ldr	r3, [pc, #388]	; (800231c <HAL_RCC_OscConfig+0x244>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a60      	ldr	r2, [pc, #384]	; (800231c <HAL_RCC_OscConfig+0x244>)
 800219a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	4b5e      	ldr	r3, [pc, #376]	; (800231c <HAL_RCC_OscConfig+0x244>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a5d      	ldr	r2, [pc, #372]	; (800231c <HAL_RCC_OscConfig+0x244>)
 80021a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d013      	beq.n	80021dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7fe fef6 	bl	8000fa4 <HAL_GetTick>
 80021b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021bc:	f7fe fef2 	bl	8000fa4 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b64      	cmp	r3, #100	; 0x64
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e32b      	b.n	8002826 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021ce:	4b53      	ldr	r3, [pc, #332]	; (800231c <HAL_RCC_OscConfig+0x244>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0xe4>
 80021da:	e014      	b.n	8002206 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021dc:	f7fe fee2 	bl	8000fa4 <HAL_GetTick>
 80021e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021e4:	f7fe fede 	bl	8000fa4 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b64      	cmp	r3, #100	; 0x64
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e317      	b.n	8002826 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80021f6:	4b49      	ldr	r3, [pc, #292]	; (800231c <HAL_RCC_OscConfig+0x244>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x10c>
 8002202:	e000      	b.n	8002206 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 808c 	beq.w	800232c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002214:	4b41      	ldr	r3, [pc, #260]	; (800231c <HAL_RCC_OscConfig+0x244>)
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800221c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800221e:	4b3f      	ldr	r3, [pc, #252]	; (800231c <HAL_RCC_OscConfig+0x244>)
 8002220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002222:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d007      	beq.n	800223a <HAL_RCC_OscConfig+0x162>
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	2b18      	cmp	r3, #24
 800222e:	d137      	bne.n	80022a0 <HAL_RCC_OscConfig+0x1c8>
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d132      	bne.n	80022a0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800223a:	4b38      	ldr	r3, [pc, #224]	; (800231c <HAL_RCC_OscConfig+0x244>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0304 	and.w	r3, r3, #4
 8002242:	2b00      	cmp	r3, #0
 8002244:	d005      	beq.n	8002252 <HAL_RCC_OscConfig+0x17a>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e2e9      	b.n	8002826 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002252:	4b32      	ldr	r3, [pc, #200]	; (800231c <HAL_RCC_OscConfig+0x244>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 0219 	bic.w	r2, r3, #25
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	492f      	ldr	r1, [pc, #188]	; (800231c <HAL_RCC_OscConfig+0x244>)
 8002260:	4313      	orrs	r3, r2
 8002262:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002264:	f7fe fe9e 	bl	8000fa4 <HAL_GetTick>
 8002268:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800226c:	f7fe fe9a 	bl	8000fa4 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e2d3      	b.n	8002826 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800227e:	4b27      	ldr	r3, [pc, #156]	; (800231c <HAL_RCC_OscConfig+0x244>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0f0      	beq.n	800226c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228a:	4b24      	ldr	r3, [pc, #144]	; (800231c <HAL_RCC_OscConfig+0x244>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	061b      	lsls	r3, r3, #24
 8002298:	4920      	ldr	r1, [pc, #128]	; (800231c <HAL_RCC_OscConfig+0x244>)
 800229a:	4313      	orrs	r3, r2
 800229c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800229e:	e045      	b.n	800232c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d026      	beq.n	80022f6 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80022a8:	4b1c      	ldr	r3, [pc, #112]	; (800231c <HAL_RCC_OscConfig+0x244>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f023 0219 	bic.w	r2, r3, #25
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4919      	ldr	r1, [pc, #100]	; (800231c <HAL_RCC_OscConfig+0x244>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ba:	f7fe fe73 	bl	8000fa4 <HAL_GetTick>
 80022be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022c2:	f7fe fe6f 	bl	8000fa4 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e2a8      	b.n	8002826 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <HAL_RCC_OscConfig+0x244>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0f0      	beq.n	80022c2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e0:	4b0e      	ldr	r3, [pc, #56]	; (800231c <HAL_RCC_OscConfig+0x244>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	061b      	lsls	r3, r3, #24
 80022ee:	490b      	ldr	r1, [pc, #44]	; (800231c <HAL_RCC_OscConfig+0x244>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	604b      	str	r3, [r1, #4]
 80022f4:	e01a      	b.n	800232c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022f6:	4b09      	ldr	r3, [pc, #36]	; (800231c <HAL_RCC_OscConfig+0x244>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a08      	ldr	r2, [pc, #32]	; (800231c <HAL_RCC_OscConfig+0x244>)
 80022fc:	f023 0301 	bic.w	r3, r3, #1
 8002300:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002302:	f7fe fe4f 	bl	8000fa4 <HAL_GetTick>
 8002306:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002308:	e00a      	b.n	8002320 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800230a:	f7fe fe4b 	bl	8000fa4 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d903      	bls.n	8002320 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e284      	b.n	8002826 <HAL_RCC_OscConfig+0x74e>
 800231c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002320:	4b96      	ldr	r3, [pc, #600]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1ee      	bne.n	800230a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	2b00      	cmp	r3, #0
 8002336:	d06a      	beq.n	800240e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002338:	4b90      	ldr	r3, [pc, #576]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002340:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002342:	4b8e      	ldr	r3, [pc, #568]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 8002344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002346:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	2b08      	cmp	r3, #8
 800234c:	d007      	beq.n	800235e <HAL_RCC_OscConfig+0x286>
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	2b18      	cmp	r3, #24
 8002352:	d11b      	bne.n	800238c <HAL_RCC_OscConfig+0x2b4>
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	f003 0303 	and.w	r3, r3, #3
 800235a:	2b01      	cmp	r3, #1
 800235c:	d116      	bne.n	800238c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800235e:	4b87      	ldr	r3, [pc, #540]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002366:	2b00      	cmp	r3, #0
 8002368:	d005      	beq.n	8002376 <HAL_RCC_OscConfig+0x29e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	2b80      	cmp	r3, #128	; 0x80
 8002370:	d001      	beq.n	8002376 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e257      	b.n	8002826 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002376:	4b81      	ldr	r3, [pc, #516]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	061b      	lsls	r3, r3, #24
 8002384:	497d      	ldr	r1, [pc, #500]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 8002386:	4313      	orrs	r3, r2
 8002388:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800238a:	e040      	b.n	800240e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d023      	beq.n	80023dc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002394:	4b79      	ldr	r3, [pc, #484]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a78      	ldr	r2, [pc, #480]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 800239a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800239e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a0:	f7fe fe00 	bl	8000fa4 <HAL_GetTick>
 80023a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80023a8:	f7fe fdfc 	bl	8000fa4 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e235      	b.n	8002826 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80023ba:	4b70      	ldr	r3, [pc, #448]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80023c6:	4b6d      	ldr	r3, [pc, #436]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	061b      	lsls	r3, r3, #24
 80023d4:	4969      	ldr	r1, [pc, #420]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60cb      	str	r3, [r1, #12]
 80023da:	e018      	b.n	800240e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80023dc:	4b67      	ldr	r3, [pc, #412]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a66      	ldr	r2, [pc, #408]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 80023e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e8:	f7fe fddc 	bl	8000fa4 <HAL_GetTick>
 80023ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80023f0:	f7fe fdd8 	bl	8000fa4 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e211      	b.n	8002826 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002402:	4b5e      	ldr	r3, [pc, #376]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b00      	cmp	r3, #0
 8002418:	d036      	beq.n	8002488 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d019      	beq.n	8002456 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002422:	4b56      	ldr	r3, [pc, #344]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 8002424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002426:	4a55      	ldr	r2, [pc, #340]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242e:	f7fe fdb9 	bl	8000fa4 <HAL_GetTick>
 8002432:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002436:	f7fe fdb5 	bl	8000fa4 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e1ee      	b.n	8002826 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002448:	4b4c      	ldr	r3, [pc, #304]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 800244a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0f0      	beq.n	8002436 <HAL_RCC_OscConfig+0x35e>
 8002454:	e018      	b.n	8002488 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002456:	4b49      	ldr	r3, [pc, #292]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 8002458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800245a:	4a48      	ldr	r2, [pc, #288]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 800245c:	f023 0301 	bic.w	r3, r3, #1
 8002460:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002462:	f7fe fd9f 	bl	8000fa4 <HAL_GetTick>
 8002466:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800246a:	f7fe fd9b 	bl	8000fa4 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e1d4      	b.n	8002826 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800247c:	4b3f      	ldr	r3, [pc, #252]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 800247e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f0      	bne.n	800246a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0320 	and.w	r3, r3, #32
 8002490:	2b00      	cmp	r3, #0
 8002492:	d036      	beq.n	8002502 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d019      	beq.n	80024d0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800249c:	4b37      	ldr	r3, [pc, #220]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a36      	ldr	r2, [pc, #216]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 80024a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80024a8:	f7fe fd7c 	bl	8000fa4 <HAL_GetTick>
 80024ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80024b0:	f7fe fd78 	bl	8000fa4 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e1b1      	b.n	8002826 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80024c2:	4b2e      	ldr	r3, [pc, #184]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCC_OscConfig+0x3d8>
 80024ce:	e018      	b.n	8002502 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024d0:	4b2a      	ldr	r3, [pc, #168]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a29      	ldr	r2, [pc, #164]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 80024d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80024dc:	f7fe fd62 	bl	8000fa4 <HAL_GetTick>
 80024e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80024e4:	f7fe fd5e 	bl	8000fa4 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e197      	b.n	8002826 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80024f6:	4b21      	ldr	r3, [pc, #132]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 8086 	beq.w	800261c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002510:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <HAL_RCC_OscConfig+0x4a8>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a1a      	ldr	r2, [pc, #104]	; (8002580 <HAL_RCC_OscConfig+0x4a8>)
 8002516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800251a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800251c:	f7fe fd42 	bl	8000fa4 <HAL_GetTick>
 8002520:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002524:	f7fe fd3e 	bl	8000fa4 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b64      	cmp	r3, #100	; 0x64
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e177      	b.n	8002826 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002536:	4b12      	ldr	r3, [pc, #72]	; (8002580 <HAL_RCC_OscConfig+0x4a8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d106      	bne.n	8002558 <HAL_RCC_OscConfig+0x480>
 800254a:	4b0c      	ldr	r3, [pc, #48]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254e:	4a0b      	ldr	r2, [pc, #44]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	6713      	str	r3, [r2, #112]	; 0x70
 8002556:	e032      	b.n	80025be <HAL_RCC_OscConfig+0x4e6>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d111      	bne.n	8002584 <HAL_RCC_OscConfig+0x4ac>
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 8002562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002564:	4a05      	ldr	r2, [pc, #20]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 8002566:	f023 0301 	bic.w	r3, r3, #1
 800256a:	6713      	str	r3, [r2, #112]	; 0x70
 800256c:	4b03      	ldr	r3, [pc, #12]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 800256e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002570:	4a02      	ldr	r2, [pc, #8]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 8002572:	f023 0304 	bic.w	r3, r3, #4
 8002576:	6713      	str	r3, [r2, #112]	; 0x70
 8002578:	e021      	b.n	80025be <HAL_RCC_OscConfig+0x4e6>
 800257a:	bf00      	nop
 800257c:	58024400 	.word	0x58024400
 8002580:	58024800 	.word	0x58024800
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	2b05      	cmp	r3, #5
 800258a:	d10c      	bne.n	80025a6 <HAL_RCC_OscConfig+0x4ce>
 800258c:	4b83      	ldr	r3, [pc, #524]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 800258e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002590:	4a82      	ldr	r2, [pc, #520]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 8002592:	f043 0304 	orr.w	r3, r3, #4
 8002596:	6713      	str	r3, [r2, #112]	; 0x70
 8002598:	4b80      	ldr	r3, [pc, #512]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 800259a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259c:	4a7f      	ldr	r2, [pc, #508]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	6713      	str	r3, [r2, #112]	; 0x70
 80025a4:	e00b      	b.n	80025be <HAL_RCC_OscConfig+0x4e6>
 80025a6:	4b7d      	ldr	r3, [pc, #500]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 80025a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025aa:	4a7c      	ldr	r2, [pc, #496]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 80025ac:	f023 0301 	bic.w	r3, r3, #1
 80025b0:	6713      	str	r3, [r2, #112]	; 0x70
 80025b2:	4b7a      	ldr	r3, [pc, #488]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 80025b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b6:	4a79      	ldr	r2, [pc, #484]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 80025b8:	f023 0304 	bic.w	r3, r3, #4
 80025bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d015      	beq.n	80025f2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c6:	f7fe fced 	bl	8000fa4 <HAL_GetTick>
 80025ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025cc:	e00a      	b.n	80025e4 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ce:	f7fe fce9 	bl	8000fa4 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025dc:	4293      	cmp	r3, r2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e120      	b.n	8002826 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025e4:	4b6d      	ldr	r3, [pc, #436]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 80025e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0ee      	beq.n	80025ce <HAL_RCC_OscConfig+0x4f6>
 80025f0:	e014      	b.n	800261c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f2:	f7fe fcd7 	bl	8000fa4 <HAL_GetTick>
 80025f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025f8:	e00a      	b.n	8002610 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025fa:	f7fe fcd3 	bl	8000fa4 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	f241 3288 	movw	r2, #5000	; 0x1388
 8002608:	4293      	cmp	r3, r2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e10a      	b.n	8002826 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002610:	4b62      	ldr	r3, [pc, #392]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 8002612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1ee      	bne.n	80025fa <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 80ff 	beq.w	8002824 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002626:	4b5d      	ldr	r3, [pc, #372]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800262e:	2b18      	cmp	r3, #24
 8002630:	f000 80ba 	beq.w	80027a8 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	2b02      	cmp	r3, #2
 800263a:	f040 8095 	bne.w	8002768 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800263e:	4b57      	ldr	r3, [pc, #348]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a56      	ldr	r2, [pc, #344]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 8002644:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264a:	f7fe fcab 	bl	8000fa4 <HAL_GetTick>
 800264e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002652:	f7fe fca7 	bl	8000fa4 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e0e0      	b.n	8002826 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002664:	4b4d      	ldr	r3, [pc, #308]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1f0      	bne.n	8002652 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002670:	4b4a      	ldr	r3, [pc, #296]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 8002672:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002674:	4b4a      	ldr	r3, [pc, #296]	; (80027a0 <HAL_RCC_OscConfig+0x6c8>)
 8002676:	4013      	ands	r3, r2
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002680:	0112      	lsls	r2, r2, #4
 8002682:	430a      	orrs	r2, r1
 8002684:	4945      	ldr	r1, [pc, #276]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 8002686:	4313      	orrs	r3, r2
 8002688:	628b      	str	r3, [r1, #40]	; 0x28
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	3b01      	subs	r3, #1
 8002690:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002698:	3b01      	subs	r3, #1
 800269a:	025b      	lsls	r3, r3, #9
 800269c:	b29b      	uxth	r3, r3
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a4:	3b01      	subs	r3, #1
 80026a6:	041b      	lsls	r3, r3, #16
 80026a8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b2:	3b01      	subs	r3, #1
 80026b4:	061b      	lsls	r3, r3, #24
 80026b6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80026ba:	4938      	ldr	r1, [pc, #224]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80026c0:	4b36      	ldr	r3, [pc, #216]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	4a35      	ldr	r2, [pc, #212]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 80026c6:	f023 0301 	bic.w	r3, r3, #1
 80026ca:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80026cc:	4b33      	ldr	r3, [pc, #204]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 80026ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026d0:	4b34      	ldr	r3, [pc, #208]	; (80027a4 <HAL_RCC_OscConfig+0x6cc>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80026d8:	00d2      	lsls	r2, r2, #3
 80026da:	4930      	ldr	r1, [pc, #192]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80026e0:	4b2e      	ldr	r3, [pc, #184]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 80026e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e4:	f023 020c 	bic.w	r2, r3, #12
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	492b      	ldr	r1, [pc, #172]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80026f2:	4b2a      	ldr	r3, [pc, #168]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 80026f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f6:	f023 0202 	bic.w	r2, r3, #2
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	4927      	ldr	r1, [pc, #156]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 8002700:	4313      	orrs	r3, r2
 8002702:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002704:	4b25      	ldr	r3, [pc, #148]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 8002706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002708:	4a24      	ldr	r2, [pc, #144]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 800270a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800270e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002710:	4b22      	ldr	r3, [pc, #136]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 8002712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002714:	4a21      	ldr	r2, [pc, #132]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 8002716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800271a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800271c:	4b1f      	ldr	r3, [pc, #124]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 800271e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002720:	4a1e      	ldr	r2, [pc, #120]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 8002722:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002726:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002728:	4b1c      	ldr	r3, [pc, #112]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 800272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272c:	4a1b      	ldr	r2, [pc, #108]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002734:	4b19      	ldr	r3, [pc, #100]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a18      	ldr	r2, [pc, #96]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 800273a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800273e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002740:	f7fe fc30 	bl	8000fa4 <HAL_GetTick>
 8002744:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002748:	f7fe fc2c 	bl	8000fa4 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e065      	b.n	8002826 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800275a:	4b10      	ldr	r3, [pc, #64]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0f0      	beq.n	8002748 <HAL_RCC_OscConfig+0x670>
 8002766:	e05d      	b.n	8002824 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002768:	4b0c      	ldr	r3, [pc, #48]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a0b      	ldr	r2, [pc, #44]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 800276e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002774:	f7fe fc16 	bl	8000fa4 <HAL_GetTick>
 8002778:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800277c:	f7fe fc12 	bl	8000fa4 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e04b      	b.n	8002826 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800278e:	4b03      	ldr	r3, [pc, #12]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1f0      	bne.n	800277c <HAL_RCC_OscConfig+0x6a4>
 800279a:	e043      	b.n	8002824 <HAL_RCC_OscConfig+0x74c>
 800279c:	58024400 	.word	0x58024400
 80027a0:	fffffc0c 	.word	0xfffffc0c
 80027a4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80027a8:	4b21      	ldr	r3, [pc, #132]	; (8002830 <HAL_RCC_OscConfig+0x758>)
 80027aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80027ae:	4b20      	ldr	r3, [pc, #128]	; (8002830 <HAL_RCC_OscConfig+0x758>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d031      	beq.n	8002820 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	f003 0203 	and.w	r2, r3, #3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d12a      	bne.n	8002820 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d122      	bne.n	8002820 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d11a      	bne.n	8002820 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	0a5b      	lsrs	r3, r3, #9
 80027ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d111      	bne.n	8002820 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	0c1b      	lsrs	r3, r3, #16
 8002800:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002808:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800280a:	429a      	cmp	r2, r3
 800280c:	d108      	bne.n	8002820 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	0e1b      	lsrs	r3, r3, #24
 8002812:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800281c:	429a      	cmp	r2, r3
 800281e:	d001      	beq.n	8002824 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e000      	b.n	8002826 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3730      	adds	r7, #48	; 0x30
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	58024400 	.word	0x58024400

08002834 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e19c      	b.n	8002b82 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002848:	4b8a      	ldr	r3, [pc, #552]	; (8002a74 <HAL_RCC_ClockConfig+0x240>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	429a      	cmp	r2, r3
 8002854:	d910      	bls.n	8002878 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002856:	4b87      	ldr	r3, [pc, #540]	; (8002a74 <HAL_RCC_ClockConfig+0x240>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 020f 	bic.w	r2, r3, #15
 800285e:	4985      	ldr	r1, [pc, #532]	; (8002a74 <HAL_RCC_ClockConfig+0x240>)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	4313      	orrs	r3, r2
 8002864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002866:	4b83      	ldr	r3, [pc, #524]	; (8002a74 <HAL_RCC_ClockConfig+0x240>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	429a      	cmp	r2, r3
 8002872:	d001      	beq.n	8002878 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e184      	b.n	8002b82 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	d010      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	4b7b      	ldr	r3, [pc, #492]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002890:	429a      	cmp	r2, r3
 8002892:	d908      	bls.n	80028a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002894:	4b78      	ldr	r3, [pc, #480]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	4975      	ldr	r1, [pc, #468]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0308 	and.w	r3, r3, #8
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d010      	beq.n	80028d4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	695a      	ldr	r2, [r3, #20]
 80028b6:	4b70      	ldr	r3, [pc, #448]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028be:	429a      	cmp	r2, r3
 80028c0:	d908      	bls.n	80028d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80028c2:	4b6d      	ldr	r3, [pc, #436]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	496a      	ldr	r1, [pc, #424]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0310 	and.w	r3, r3, #16
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d010      	beq.n	8002902 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	699a      	ldr	r2, [r3, #24]
 80028e4:	4b64      	ldr	r3, [pc, #400]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d908      	bls.n	8002902 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80028f0:	4b61      	ldr	r3, [pc, #388]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	495e      	ldr	r1, [pc, #376]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0320 	and.w	r3, r3, #32
 800290a:	2b00      	cmp	r3, #0
 800290c:	d010      	beq.n	8002930 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69da      	ldr	r2, [r3, #28]
 8002912:	4b59      	ldr	r3, [pc, #356]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800291a:	429a      	cmp	r2, r3
 800291c:	d908      	bls.n	8002930 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800291e:	4b56      	ldr	r3, [pc, #344]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	4953      	ldr	r1, [pc, #332]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 800292c:	4313      	orrs	r3, r2
 800292e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d010      	beq.n	800295e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	4b4d      	ldr	r3, [pc, #308]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	f003 030f 	and.w	r3, r3, #15
 8002948:	429a      	cmp	r2, r3
 800294a:	d908      	bls.n	800295e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800294c:	4b4a      	ldr	r3, [pc, #296]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	f023 020f 	bic.w	r2, r3, #15
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	4947      	ldr	r1, [pc, #284]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 800295a:	4313      	orrs	r3, r2
 800295c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d055      	beq.n	8002a16 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800296a:	4b43      	ldr	r3, [pc, #268]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	4940      	ldr	r1, [pc, #256]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 8002978:	4313      	orrs	r3, r2
 800297a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b02      	cmp	r3, #2
 8002982:	d107      	bne.n	8002994 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002984:	4b3c      	ldr	r3, [pc, #240]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d121      	bne.n	80029d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0f6      	b.n	8002b82 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b03      	cmp	r3, #3
 800299a:	d107      	bne.n	80029ac <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800299c:	4b36      	ldr	r3, [pc, #216]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d115      	bne.n	80029d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0ea      	b.n	8002b82 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d107      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029b4:	4b30      	ldr	r3, [pc, #192]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d109      	bne.n	80029d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0de      	b.n	8002b82 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029c4:	4b2c      	ldr	r3, [pc, #176]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e0d6      	b.n	8002b82 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029d4:	4b28      	ldr	r3, [pc, #160]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	f023 0207 	bic.w	r2, r3, #7
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	4925      	ldr	r1, [pc, #148]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e6:	f7fe fadd 	bl	8000fa4 <HAL_GetTick>
 80029ea:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ec:	e00a      	b.n	8002a04 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ee:	f7fe fad9 	bl	8000fa4 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e0be      	b.n	8002b82 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a04:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d1eb      	bne.n	80029ee <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d010      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	4b14      	ldr	r3, [pc, #80]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d208      	bcs.n	8002a44 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a32:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	f023 020f 	bic.w	r2, r3, #15
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	490e      	ldr	r1, [pc, #56]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <HAL_RCC_ClockConfig+0x240>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 030f 	and.w	r3, r3, #15
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d214      	bcs.n	8002a7c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a52:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <HAL_RCC_ClockConfig+0x240>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f023 020f 	bic.w	r2, r3, #15
 8002a5a:	4906      	ldr	r1, [pc, #24]	; (8002a74 <HAL_RCC_ClockConfig+0x240>)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a62:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <HAL_RCC_ClockConfig+0x240>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d005      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e086      	b.n	8002b82 <HAL_RCC_ClockConfig+0x34e>
 8002a74:	52002000 	.word	0x52002000
 8002a78:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d010      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691a      	ldr	r2, [r3, #16]
 8002a8c:	4b3f      	ldr	r3, [pc, #252]	; (8002b8c <HAL_RCC_ClockConfig+0x358>)
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d208      	bcs.n	8002aaa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a98:	4b3c      	ldr	r3, [pc, #240]	; (8002b8c <HAL_RCC_ClockConfig+0x358>)
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	4939      	ldr	r1, [pc, #228]	; (8002b8c <HAL_RCC_ClockConfig+0x358>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d010      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695a      	ldr	r2, [r3, #20]
 8002aba:	4b34      	ldr	r3, [pc, #208]	; (8002b8c <HAL_RCC_ClockConfig+0x358>)
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d208      	bcs.n	8002ad8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ac6:	4b31      	ldr	r3, [pc, #196]	; (8002b8c <HAL_RCC_ClockConfig+0x358>)
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	492e      	ldr	r1, [pc, #184]	; (8002b8c <HAL_RCC_ClockConfig+0x358>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0310 	and.w	r3, r3, #16
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d010      	beq.n	8002b06 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	699a      	ldr	r2, [r3, #24]
 8002ae8:	4b28      	ldr	r3, [pc, #160]	; (8002b8c <HAL_RCC_ClockConfig+0x358>)
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d208      	bcs.n	8002b06 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002af4:	4b25      	ldr	r3, [pc, #148]	; (8002b8c <HAL_RCC_ClockConfig+0x358>)
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	4922      	ldr	r1, [pc, #136]	; (8002b8c <HAL_RCC_ClockConfig+0x358>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0320 	and.w	r3, r3, #32
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d010      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69da      	ldr	r2, [r3, #28]
 8002b16:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <HAL_RCC_ClockConfig+0x358>)
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d208      	bcs.n	8002b34 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002b22:	4b1a      	ldr	r3, [pc, #104]	; (8002b8c <HAL_RCC_ClockConfig+0x358>)
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	4917      	ldr	r1, [pc, #92]	; (8002b8c <HAL_RCC_ClockConfig+0x358>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b34:	f000 f834 	bl	8002ba0 <HAL_RCC_GetSysClockFreq>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	4b14      	ldr	r3, [pc, #80]	; (8002b8c <HAL_RCC_ClockConfig+0x358>)
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	0a1b      	lsrs	r3, r3, #8
 8002b40:	f003 030f 	and.w	r3, r3, #15
 8002b44:	4912      	ldr	r1, [pc, #72]	; (8002b90 <HAL_RCC_ClockConfig+0x35c>)
 8002b46:	5ccb      	ldrb	r3, [r1, r3]
 8002b48:	f003 031f 	and.w	r3, r3, #31
 8002b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b50:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b52:	4b0e      	ldr	r3, [pc, #56]	; (8002b8c <HAL_RCC_ClockConfig+0x358>)
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	4a0d      	ldr	r2, [pc, #52]	; (8002b90 <HAL_RCC_ClockConfig+0x35c>)
 8002b5c:	5cd3      	ldrb	r3, [r2, r3]
 8002b5e:	f003 031f 	and.w	r3, r3, #31
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	fa22 f303 	lsr.w	r3, r2, r3
 8002b68:	4a0a      	ldr	r2, [pc, #40]	; (8002b94 <HAL_RCC_ClockConfig+0x360>)
 8002b6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b6c:	4a0a      	ldr	r2, [pc, #40]	; (8002b98 <HAL_RCC_ClockConfig+0x364>)
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002b72:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <HAL_RCC_ClockConfig+0x368>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe f9ca 	bl	8000f10 <HAL_InitTick>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	58024400 	.word	0x58024400
 8002b90:	0800765c 	.word	0x0800765c
 8002b94:	2400001c 	.word	0x2400001c
 8002b98:	24000018 	.word	0x24000018
 8002b9c:	24000020 	.word	0x24000020

08002ba0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b089      	sub	sp, #36	; 0x24
 8002ba4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ba6:	4bb3      	ldr	r3, [pc, #716]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bae:	2b18      	cmp	r3, #24
 8002bb0:	f200 8155 	bhi.w	8002e5e <HAL_RCC_GetSysClockFreq+0x2be>
 8002bb4:	a201      	add	r2, pc, #4	; (adr r2, 8002bbc <HAL_RCC_GetSysClockFreq+0x1c>)
 8002bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bba:	bf00      	nop
 8002bbc:	08002c21 	.word	0x08002c21
 8002bc0:	08002e5f 	.word	0x08002e5f
 8002bc4:	08002e5f 	.word	0x08002e5f
 8002bc8:	08002e5f 	.word	0x08002e5f
 8002bcc:	08002e5f 	.word	0x08002e5f
 8002bd0:	08002e5f 	.word	0x08002e5f
 8002bd4:	08002e5f 	.word	0x08002e5f
 8002bd8:	08002e5f 	.word	0x08002e5f
 8002bdc:	08002c47 	.word	0x08002c47
 8002be0:	08002e5f 	.word	0x08002e5f
 8002be4:	08002e5f 	.word	0x08002e5f
 8002be8:	08002e5f 	.word	0x08002e5f
 8002bec:	08002e5f 	.word	0x08002e5f
 8002bf0:	08002e5f 	.word	0x08002e5f
 8002bf4:	08002e5f 	.word	0x08002e5f
 8002bf8:	08002e5f 	.word	0x08002e5f
 8002bfc:	08002c4d 	.word	0x08002c4d
 8002c00:	08002e5f 	.word	0x08002e5f
 8002c04:	08002e5f 	.word	0x08002e5f
 8002c08:	08002e5f 	.word	0x08002e5f
 8002c0c:	08002e5f 	.word	0x08002e5f
 8002c10:	08002e5f 	.word	0x08002e5f
 8002c14:	08002e5f 	.word	0x08002e5f
 8002c18:	08002e5f 	.word	0x08002e5f
 8002c1c:	08002c53 	.word	0x08002c53
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c20:	4b94      	ldr	r3, [pc, #592]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0320 	and.w	r3, r3, #32
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d009      	beq.n	8002c40 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002c2c:	4b91      	ldr	r3, [pc, #580]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	08db      	lsrs	r3, r3, #3
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	4a90      	ldr	r2, [pc, #576]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c38:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002c3e:	e111      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002c40:	4b8d      	ldr	r3, [pc, #564]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c42:	61bb      	str	r3, [r7, #24]
    break;
 8002c44:	e10e      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002c46:	4b8d      	ldr	r3, [pc, #564]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c48:	61bb      	str	r3, [r7, #24]
    break;
 8002c4a:	e10b      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002c4c:	4b8c      	ldr	r3, [pc, #560]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002c4e:	61bb      	str	r3, [r7, #24]
    break;
 8002c50:	e108      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c52:	4b88      	ldr	r3, [pc, #544]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002c5c:	4b85      	ldr	r3, [pc, #532]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c60:	091b      	lsrs	r3, r3, #4
 8002c62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c66:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002c68:	4b82      	ldr	r3, [pc, #520]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002c72:	4b80      	ldr	r3, [pc, #512]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c76:	08db      	lsrs	r3, r3, #3
 8002c78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	fb02 f303 	mul.w	r3, r2, r3
 8002c82:	ee07 3a90 	vmov	s15, r3
 8002c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c8a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 80e1 	beq.w	8002e58 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	f000 8083 	beq.w	8002da4 <HAL_RCC_GetSysClockFreq+0x204>
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	f200 80a1 	bhi.w	8002de8 <HAL_RCC_GetSysClockFreq+0x248>
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x114>
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d056      	beq.n	8002d60 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002cb2:	e099      	b.n	8002de8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002cb4:	4b6f      	ldr	r3, [pc, #444]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0320 	and.w	r3, r3, #32
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d02d      	beq.n	8002d1c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002cc0:	4b6c      	ldr	r3, [pc, #432]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	08db      	lsrs	r3, r3, #3
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	4a6b      	ldr	r2, [pc, #428]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	ee07 3a90 	vmov	s15, r3
 8002cd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	ee07 3a90 	vmov	s15, r3
 8002ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cea:	4b62      	ldr	r3, [pc, #392]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cf2:	ee07 3a90 	vmov	s15, r3
 8002cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cfe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002e84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d16:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002d1a:	e087      	b.n	8002e2c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	ee07 3a90 	vmov	s15, r3
 8002d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d26:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002e88 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d2e:	4b51      	ldr	r3, [pc, #324]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d36:	ee07 3a90 	vmov	s15, r3
 8002d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d42:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002e84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d5e:	e065      	b.n	8002e2c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	ee07 3a90 	vmov	s15, r3
 8002d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d6a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002e8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d72:	4b40      	ldr	r3, [pc, #256]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d7a:	ee07 3a90 	vmov	s15, r3
 8002d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d82:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d86:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002e84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002da2:	e043      	b.n	8002e2c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	ee07 3a90 	vmov	s15, r3
 8002daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dae:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002e90 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002db6:	4b2f      	ldr	r3, [pc, #188]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dbe:	ee07 3a90 	vmov	s15, r3
 8002dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dca:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002e84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002de6:	e021      	b.n	8002e2c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	ee07 3a90 	vmov	s15, r3
 8002dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002df2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002e8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dfa:	4b1e      	ldr	r3, [pc, #120]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e02:	ee07 3a90 	vmov	s15, r3
 8002e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e0e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002e84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e2a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002e2c:	4b11      	ldr	r3, [pc, #68]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	0a5b      	lsrs	r3, r3, #9
 8002e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e36:	3301      	adds	r3, #1
 8002e38:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	ee07 3a90 	vmov	s15, r3
 8002e40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e44:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e50:	ee17 3a90 	vmov	r3, s15
 8002e54:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002e56:	e005      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	61bb      	str	r3, [r7, #24]
    break;
 8002e5c:	e002      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002e5e:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e60:	61bb      	str	r3, [r7, #24]
    break;
 8002e62:	bf00      	nop
  }

  return sysclockfreq;
 8002e64:	69bb      	ldr	r3, [r7, #24]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3724      	adds	r7, #36	; 0x24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	58024400 	.word	0x58024400
 8002e78:	03d09000 	.word	0x03d09000
 8002e7c:	003d0900 	.word	0x003d0900
 8002e80:	017d7840 	.word	0x017d7840
 8002e84:	46000000 	.word	0x46000000
 8002e88:	4c742400 	.word	0x4c742400
 8002e8c:	4a742400 	.word	0x4a742400
 8002e90:	4bbebc20 	.word	0x4bbebc20

08002e94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002e9a:	f7ff fe81 	bl	8002ba0 <HAL_RCC_GetSysClockFreq>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	4b10      	ldr	r3, [pc, #64]	; (8002ee4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	0a1b      	lsrs	r3, r3, #8
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	490f      	ldr	r1, [pc, #60]	; (8002ee8 <HAL_RCC_GetHCLKFreq+0x54>)
 8002eac:	5ccb      	ldrb	r3, [r1, r3]
 8002eae:	f003 031f 	and.w	r3, r3, #31
 8002eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002eb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ee4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	f003 030f 	and.w	r3, r3, #15
 8002ec0:	4a09      	ldr	r2, [pc, #36]	; (8002ee8 <HAL_RCC_GetHCLKFreq+0x54>)
 8002ec2:	5cd3      	ldrb	r3, [r2, r3]
 8002ec4:	f003 031f 	and.w	r3, r3, #31
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	fa22 f303 	lsr.w	r3, r2, r3
 8002ece:	4a07      	ldr	r2, [pc, #28]	; (8002eec <HAL_RCC_GetHCLKFreq+0x58>)
 8002ed0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ed2:	4a07      	ldr	r2, [pc, #28]	; (8002ef0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002ed8:	4b04      	ldr	r3, [pc, #16]	; (8002eec <HAL_RCC_GetHCLKFreq+0x58>)
 8002eda:	681b      	ldr	r3, [r3, #0]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	58024400 	.word	0x58024400
 8002ee8:	0800765c 	.word	0x0800765c
 8002eec:	2400001c 	.word	0x2400001c
 8002ef0:	24000018 	.word	0x24000018

08002ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002ef8:	f7ff ffcc 	bl	8002e94 <HAL_RCC_GetHCLKFreq>
 8002efc:	4602      	mov	r2, r0
 8002efe:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	091b      	lsrs	r3, r3, #4
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	4904      	ldr	r1, [pc, #16]	; (8002f1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f0a:	5ccb      	ldrb	r3, [r1, r3]
 8002f0c:	f003 031f 	and.w	r3, r3, #31
 8002f10:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	58024400 	.word	0x58024400
 8002f1c:	0800765c 	.word	0x0800765c

08002f20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002f24:	f7ff ffb6 	bl	8002e94 <HAL_RCC_GetHCLKFreq>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	0a1b      	lsrs	r3, r3, #8
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	4904      	ldr	r1, [pc, #16]	; (8002f48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f36:	5ccb      	ldrb	r3, [r1, r3]
 8002f38:	f003 031f 	and.w	r3, r3, #31
 8002f3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	58024400 	.word	0x58024400
 8002f48:	0800765c 	.word	0x0800765c

08002f4c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f54:	2300      	movs	r3, #0
 8002f56:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f58:	2300      	movs	r3, #0
 8002f5a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d03f      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f70:	d02a      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002f72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f76:	d824      	bhi.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f7c:	d018      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f82:	d81e      	bhi.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f8c:	d007      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002f8e:	e018      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f90:	4ba4      	ldr	r3, [pc, #656]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f94:	4aa3      	ldr	r2, [pc, #652]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002f96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002f9c:	e015      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	2102      	movs	r1, #2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f001 f989 	bl	80042bc <RCCEx_PLL2_Config>
 8002faa:	4603      	mov	r3, r0
 8002fac:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002fae:	e00c      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3324      	adds	r3, #36	; 0x24
 8002fb4:	2102      	movs	r1, #2
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f001 fa32 	bl	8004420 <RCCEx_PLL3_Config>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002fc0:	e003      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	75fb      	strb	r3, [r7, #23]
      break;
 8002fc6:	e000      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002fc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fca:	7dfb      	ldrb	r3, [r7, #23]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d109      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002fd0:	4b94      	ldr	r3, [pc, #592]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fdc:	4991      	ldr	r1, [pc, #580]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	650b      	str	r3, [r1, #80]	; 0x50
 8002fe2:	e001      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe4:	7dfb      	ldrb	r3, [r7, #23]
 8002fe6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d03d      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff8:	2b04      	cmp	r3, #4
 8002ffa:	d826      	bhi.n	800304a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002ffc:	a201      	add	r2, pc, #4	; (adr r2, 8003004 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003002:	bf00      	nop
 8003004:	08003019 	.word	0x08003019
 8003008:	08003027 	.word	0x08003027
 800300c:	08003039 	.word	0x08003039
 8003010:	08003051 	.word	0x08003051
 8003014:	08003051 	.word	0x08003051
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003018:	4b82      	ldr	r3, [pc, #520]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	4a81      	ldr	r2, [pc, #516]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800301e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003022:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003024:	e015      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3304      	adds	r3, #4
 800302a:	2100      	movs	r1, #0
 800302c:	4618      	mov	r0, r3
 800302e:	f001 f945 	bl	80042bc <RCCEx_PLL2_Config>
 8003032:	4603      	mov	r3, r0
 8003034:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003036:	e00c      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3324      	adds	r3, #36	; 0x24
 800303c:	2100      	movs	r1, #0
 800303e:	4618      	mov	r0, r3
 8003040:	f001 f9ee 	bl	8004420 <RCCEx_PLL3_Config>
 8003044:	4603      	mov	r3, r0
 8003046:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003048:	e003      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	75fb      	strb	r3, [r7, #23]
      break;
 800304e:	e000      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003050:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003052:	7dfb      	ldrb	r3, [r7, #23]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d109      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003058:	4b72      	ldr	r3, [pc, #456]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800305a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800305c:	f023 0207 	bic.w	r2, r3, #7
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003064:	496f      	ldr	r1, [pc, #444]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003066:	4313      	orrs	r3, r2
 8003068:	650b      	str	r3, [r1, #80]	; 0x50
 800306a:	e001      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800306c:	7dfb      	ldrb	r3, [r7, #23]
 800306e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003078:	2b00      	cmp	r3, #0
 800307a:	d051      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003082:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003086:	d036      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003088:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800308c:	d830      	bhi.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800308e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003092:	d032      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003094:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003098:	d82a      	bhi.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800309a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800309e:	d02e      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80030a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80030a4:	d824      	bhi.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80030a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030aa:	d018      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x192>
 80030ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030b0:	d81e      	bhi.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x172>
 80030b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030ba:	d007      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x180>
 80030bc:	e018      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030be:	4b59      	ldr	r3, [pc, #356]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80030c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c2:	4a58      	ldr	r2, [pc, #352]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80030c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80030ca:	e019      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3304      	adds	r3, #4
 80030d0:	2100      	movs	r1, #0
 80030d2:	4618      	mov	r0, r3
 80030d4:	f001 f8f2 	bl	80042bc <RCCEx_PLL2_Config>
 80030d8:	4603      	mov	r3, r0
 80030da:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80030dc:	e010      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3324      	adds	r3, #36	; 0x24
 80030e2:	2100      	movs	r1, #0
 80030e4:	4618      	mov	r0, r3
 80030e6:	f001 f99b 	bl	8004420 <RCCEx_PLL3_Config>
 80030ea:	4603      	mov	r3, r0
 80030ec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80030ee:	e007      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	75fb      	strb	r3, [r7, #23]
      break;
 80030f4:	e004      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80030f6:	bf00      	nop
 80030f8:	e002      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80030fa:	bf00      	nop
 80030fc:	e000      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80030fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003100:	7dfb      	ldrb	r3, [r7, #23]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10a      	bne.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003106:	4b47      	ldr	r3, [pc, #284]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003114:	4943      	ldr	r1, [pc, #268]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003116:	4313      	orrs	r3, r2
 8003118:	658b      	str	r3, [r1, #88]	; 0x58
 800311a:	e001      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800311c:	7dfb      	ldrb	r3, [r7, #23]
 800311e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003128:	2b00      	cmp	r3, #0
 800312a:	d051      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003132:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003136:	d036      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8003138:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800313c:	d830      	bhi.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800313e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003142:	d032      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8003144:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003148:	d82a      	bhi.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800314a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800314e:	d02e      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x262>
 8003150:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003154:	d824      	bhi.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003156:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800315a:	d018      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x242>
 800315c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003160:	d81e      	bhi.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003166:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800316a:	d007      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800316c:	e018      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800316e:	4b2d      	ldr	r3, [pc, #180]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003172:	4a2c      	ldr	r2, [pc, #176]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003178:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800317a:	e019      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3304      	adds	r3, #4
 8003180:	2100      	movs	r1, #0
 8003182:	4618      	mov	r0, r3
 8003184:	f001 f89a 	bl	80042bc <RCCEx_PLL2_Config>
 8003188:	4603      	mov	r3, r0
 800318a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800318c:	e010      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	3324      	adds	r3, #36	; 0x24
 8003192:	2100      	movs	r1, #0
 8003194:	4618      	mov	r0, r3
 8003196:	f001 f943 	bl	8004420 <RCCEx_PLL3_Config>
 800319a:	4603      	mov	r3, r0
 800319c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800319e:	e007      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	75fb      	strb	r3, [r7, #23]
      break;
 80031a4:	e004      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80031a6:	bf00      	nop
 80031a8:	e002      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80031aa:	bf00      	nop
 80031ac:	e000      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80031ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031b0:	7dfb      	ldrb	r3, [r7, #23]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10a      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80031b6:	4b1b      	ldr	r3, [pc, #108]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80031b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ba:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80031c4:	4917      	ldr	r1, [pc, #92]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	658b      	str	r3, [r1, #88]	; 0x58
 80031ca:	e001      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031cc:	7dfb      	ldrb	r3, [r7, #23]
 80031ce:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d035      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031e0:	2b30      	cmp	r3, #48	; 0x30
 80031e2:	d01c      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80031e4:	2b30      	cmp	r3, #48	; 0x30
 80031e6:	d817      	bhi.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80031e8:	2b20      	cmp	r3, #32
 80031ea:	d00c      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	d813      	bhi.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d019      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80031f4:	2b10      	cmp	r3, #16
 80031f6:	d10f      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031f8:	4b0a      	ldr	r3, [pc, #40]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80031fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fc:	4a09      	ldr	r2, [pc, #36]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80031fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003202:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003204:	e011      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3304      	adds	r3, #4
 800320a:	2102      	movs	r1, #2
 800320c:	4618      	mov	r0, r3
 800320e:	f001 f855 	bl	80042bc <RCCEx_PLL2_Config>
 8003212:	4603      	mov	r3, r0
 8003214:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003216:	e008      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	75fb      	strb	r3, [r7, #23]
      break;
 800321c:	e005      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800321e:	bf00      	nop
 8003220:	e003      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003222:	bf00      	nop
 8003224:	58024400 	.word	0x58024400
      break;
 8003228:	bf00      	nop
    }

    if(ret == HAL_OK)
 800322a:	7dfb      	ldrb	r3, [r7, #23]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d109      	bne.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003230:	4ba3      	ldr	r3, [pc, #652]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003234:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800323c:	49a0      	ldr	r1, [pc, #640]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800323e:	4313      	orrs	r3, r2
 8003240:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003242:	e001      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003244:	7dfb      	ldrb	r3, [r7, #23]
 8003246:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d047      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003258:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800325c:	d030      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800325e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003262:	d82a      	bhi.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003264:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003268:	d02c      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800326a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800326e:	d824      	bhi.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003274:	d018      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800327a:	d81e      	bhi.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003284:	d007      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003286:	e018      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003288:	4b8d      	ldr	r3, [pc, #564]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328c:	4a8c      	ldr	r2, [pc, #560]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800328e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003292:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003294:	e017      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	3304      	adds	r3, #4
 800329a:	2100      	movs	r1, #0
 800329c:	4618      	mov	r0, r3
 800329e:	f001 f80d 	bl	80042bc <RCCEx_PLL2_Config>
 80032a2:	4603      	mov	r3, r0
 80032a4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80032a6:	e00e      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3324      	adds	r3, #36	; 0x24
 80032ac:	2100      	movs	r1, #0
 80032ae:	4618      	mov	r0, r3
 80032b0:	f001 f8b6 	bl	8004420 <RCCEx_PLL3_Config>
 80032b4:	4603      	mov	r3, r0
 80032b6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80032b8:	e005      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	75fb      	strb	r3, [r7, #23]
      break;
 80032be:	e002      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80032c0:	bf00      	nop
 80032c2:	e000      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80032c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032c6:	7dfb      	ldrb	r3, [r7, #23]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d109      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80032cc:	4b7c      	ldr	r3, [pc, #496]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80032ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d8:	4979      	ldr	r1, [pc, #484]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	650b      	str	r3, [r1, #80]	; 0x50
 80032de:	e001      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e0:	7dfb      	ldrb	r3, [r7, #23]
 80032e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d049      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032f8:	d02e      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80032fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032fe:	d828      	bhi.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003300:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003304:	d02a      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003306:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800330a:	d822      	bhi.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800330c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003310:	d026      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003312:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003316:	d81c      	bhi.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003318:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800331c:	d010      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800331e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003322:	d816      	bhi.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003324:	2b00      	cmp	r3, #0
 8003326:	d01d      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800332c:	d111      	bne.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3304      	adds	r3, #4
 8003332:	2101      	movs	r1, #1
 8003334:	4618      	mov	r0, r3
 8003336:	f000 ffc1 	bl	80042bc <RCCEx_PLL2_Config>
 800333a:	4603      	mov	r3, r0
 800333c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800333e:	e012      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3324      	adds	r3, #36	; 0x24
 8003344:	2101      	movs	r1, #1
 8003346:	4618      	mov	r0, r3
 8003348:	f001 f86a 	bl	8004420 <RCCEx_PLL3_Config>
 800334c:	4603      	mov	r3, r0
 800334e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003350:	e009      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	75fb      	strb	r3, [r7, #23]
      break;
 8003356:	e006      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003358:	bf00      	nop
 800335a:	e004      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800335c:	bf00      	nop
 800335e:	e002      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003360:	bf00      	nop
 8003362:	e000      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003364:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003366:	7dfb      	ldrb	r3, [r7, #23]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d109      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800336c:	4b54      	ldr	r3, [pc, #336]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800336e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003370:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003378:	4951      	ldr	r1, [pc, #324]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800337a:	4313      	orrs	r3, r2
 800337c:	650b      	str	r3, [r1, #80]	; 0x50
 800337e:	e001      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003380:	7dfb      	ldrb	r3, [r7, #23]
 8003382:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d04b      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003396:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800339a:	d02e      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800339c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033a0:	d828      	bhi.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80033a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a6:	d02a      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80033a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ac:	d822      	bhi.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80033ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80033b2:	d026      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80033b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80033b8:	d81c      	bhi.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80033ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033be:	d010      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x496>
 80033c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033c4:	d816      	bhi.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d01d      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80033ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033ce:	d111      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3304      	adds	r3, #4
 80033d4:	2101      	movs	r1, #1
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 ff70 	bl	80042bc <RCCEx_PLL2_Config>
 80033dc:	4603      	mov	r3, r0
 80033de:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80033e0:	e012      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	3324      	adds	r3, #36	; 0x24
 80033e6:	2101      	movs	r1, #1
 80033e8:	4618      	mov	r0, r3
 80033ea:	f001 f819 	bl	8004420 <RCCEx_PLL3_Config>
 80033ee:	4603      	mov	r3, r0
 80033f0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80033f2:	e009      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	75fb      	strb	r3, [r7, #23]
      break;
 80033f8:	e006      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80033fa:	bf00      	nop
 80033fc:	e004      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80033fe:	bf00      	nop
 8003400:	e002      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003402:	bf00      	nop
 8003404:	e000      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003406:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003408:	7dfb      	ldrb	r3, [r7, #23]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10a      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800340e:	4b2c      	ldr	r3, [pc, #176]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003412:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800341c:	4928      	ldr	r1, [pc, #160]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800341e:	4313      	orrs	r3, r2
 8003420:	658b      	str	r3, [r1, #88]	; 0x58
 8003422:	e001      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003424:	7dfb      	ldrb	r3, [r7, #23]
 8003426:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d02f      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003438:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800343c:	d00e      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x510>
 800343e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003442:	d814      	bhi.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003444:	2b00      	cmp	r3, #0
 8003446:	d015      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003448:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800344c:	d10f      	bne.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800344e:	4b1c      	ldr	r3, [pc, #112]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003452:	4a1b      	ldr	r2, [pc, #108]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003458:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800345a:	e00c      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3304      	adds	r3, #4
 8003460:	2101      	movs	r1, #1
 8003462:	4618      	mov	r0, r3
 8003464:	f000 ff2a 	bl	80042bc <RCCEx_PLL2_Config>
 8003468:	4603      	mov	r3, r0
 800346a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800346c:	e003      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	75fb      	strb	r3, [r7, #23]
      break;
 8003472:	e000      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8003474:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003476:	7dfb      	ldrb	r3, [r7, #23]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d109      	bne.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800347c:	4b10      	ldr	r3, [pc, #64]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800347e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003480:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003488:	490d      	ldr	r1, [pc, #52]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800348a:	4313      	orrs	r3, r2
 800348c:	650b      	str	r3, [r1, #80]	; 0x50
 800348e:	e001      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003490:	7dfb      	ldrb	r3, [r7, #23]
 8003492:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d034      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a4:	2b03      	cmp	r3, #3
 80034a6:	d81d      	bhi.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80034a8:	a201      	add	r2, pc, #4	; (adr r2, 80034b0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80034aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ae:	bf00      	nop
 80034b0:	080034eb 	.word	0x080034eb
 80034b4:	080034c5 	.word	0x080034c5
 80034b8:	080034d3 	.word	0x080034d3
 80034bc:	080034eb 	.word	0x080034eb
 80034c0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034c4:	4bb1      	ldr	r3, [pc, #708]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80034c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c8:	4ab0      	ldr	r2, [pc, #704]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80034ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80034d0:	e00c      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3304      	adds	r3, #4
 80034d6:	2102      	movs	r1, #2
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 feef 	bl	80042bc <RCCEx_PLL2_Config>
 80034de:	4603      	mov	r3, r0
 80034e0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80034e2:	e003      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	75fb      	strb	r3, [r7, #23]
      break;
 80034e8:	e000      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 80034ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034ec:	7dfb      	ldrb	r3, [r7, #23]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d109      	bne.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80034f2:	4ba6      	ldr	r3, [pc, #664]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80034f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f6:	f023 0203 	bic.w	r2, r3, #3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fe:	49a3      	ldr	r1, [pc, #652]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003500:	4313      	orrs	r3, r2
 8003502:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003504:	e001      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003506:	7dfb      	ldrb	r3, [r7, #23]
 8003508:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 8086 	beq.w	8003624 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003518:	4b9d      	ldr	r3, [pc, #628]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a9c      	ldr	r2, [pc, #624]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800351e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003522:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003524:	f7fd fd3e 	bl	8000fa4 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800352a:	e009      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800352c:	f7fd fd3a 	bl	8000fa4 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b64      	cmp	r3, #100	; 0x64
 8003538:	d902      	bls.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	75fb      	strb	r3, [r7, #23]
        break;
 800353e:	e005      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003540:	4b93      	ldr	r3, [pc, #588]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0ef      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800354c:	7dfb      	ldrb	r3, [r7, #23]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d166      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003552:	4b8e      	ldr	r3, [pc, #568]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003554:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800355c:	4053      	eors	r3, r2
 800355e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003562:	2b00      	cmp	r3, #0
 8003564:	d013      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003566:	4b89      	ldr	r3, [pc, #548]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800356e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003570:	4b86      	ldr	r3, [pc, #536]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003574:	4a85      	ldr	r2, [pc, #532]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800357c:	4b83      	ldr	r3, [pc, #524]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800357e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003580:	4a82      	ldr	r2, [pc, #520]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003586:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003588:	4a80      	ldr	r2, [pc, #512]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003598:	d115      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359a:	f7fd fd03 	bl	8000fa4 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035a0:	e00b      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a2:	f7fd fcff 	bl	8000fa4 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d902      	bls.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	75fb      	strb	r3, [r7, #23]
            break;
 80035b8:	e005      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035ba:	4b74      	ldr	r3, [pc, #464]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80035bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0ed      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80035c6:	7dfb      	ldrb	r3, [r7, #23]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d126      	bne.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80035d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035da:	d10d      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80035dc:	4b6b      	ldr	r3, [pc, #428]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80035ea:	0919      	lsrs	r1, r3, #4
 80035ec:	4b69      	ldr	r3, [pc, #420]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80035ee:	400b      	ands	r3, r1
 80035f0:	4966      	ldr	r1, [pc, #408]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	610b      	str	r3, [r1, #16]
 80035f6:	e005      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 80035f8:	4b64      	ldr	r3, [pc, #400]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	4a63      	ldr	r2, [pc, #396]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80035fe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003602:	6113      	str	r3, [r2, #16]
 8003604:	4b61      	ldr	r3, [pc, #388]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003606:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800360e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003612:	495e      	ldr	r1, [pc, #376]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003614:	4313      	orrs	r3, r2
 8003616:	670b      	str	r3, [r1, #112]	; 0x70
 8003618:	e004      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800361a:	7dfb      	ldrb	r3, [r7, #23]
 800361c:	75bb      	strb	r3, [r7, #22]
 800361e:	e001      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003620:	7dfb      	ldrb	r3, [r7, #23]
 8003622:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b00      	cmp	r3, #0
 800362e:	d07e      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003634:	2b28      	cmp	r3, #40	; 0x28
 8003636:	d867      	bhi.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8003638:	a201      	add	r2, pc, #4	; (adr r2, 8003640 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800363a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363e:	bf00      	nop
 8003640:	0800370f 	.word	0x0800370f
 8003644:	08003709 	.word	0x08003709
 8003648:	08003709 	.word	0x08003709
 800364c:	08003709 	.word	0x08003709
 8003650:	08003709 	.word	0x08003709
 8003654:	08003709 	.word	0x08003709
 8003658:	08003709 	.word	0x08003709
 800365c:	08003709 	.word	0x08003709
 8003660:	080036e5 	.word	0x080036e5
 8003664:	08003709 	.word	0x08003709
 8003668:	08003709 	.word	0x08003709
 800366c:	08003709 	.word	0x08003709
 8003670:	08003709 	.word	0x08003709
 8003674:	08003709 	.word	0x08003709
 8003678:	08003709 	.word	0x08003709
 800367c:	08003709 	.word	0x08003709
 8003680:	080036f7 	.word	0x080036f7
 8003684:	08003709 	.word	0x08003709
 8003688:	08003709 	.word	0x08003709
 800368c:	08003709 	.word	0x08003709
 8003690:	08003709 	.word	0x08003709
 8003694:	08003709 	.word	0x08003709
 8003698:	08003709 	.word	0x08003709
 800369c:	08003709 	.word	0x08003709
 80036a0:	0800370f 	.word	0x0800370f
 80036a4:	08003709 	.word	0x08003709
 80036a8:	08003709 	.word	0x08003709
 80036ac:	08003709 	.word	0x08003709
 80036b0:	08003709 	.word	0x08003709
 80036b4:	08003709 	.word	0x08003709
 80036b8:	08003709 	.word	0x08003709
 80036bc:	08003709 	.word	0x08003709
 80036c0:	0800370f 	.word	0x0800370f
 80036c4:	08003709 	.word	0x08003709
 80036c8:	08003709 	.word	0x08003709
 80036cc:	08003709 	.word	0x08003709
 80036d0:	08003709 	.word	0x08003709
 80036d4:	08003709 	.word	0x08003709
 80036d8:	08003709 	.word	0x08003709
 80036dc:	08003709 	.word	0x08003709
 80036e0:	0800370f 	.word	0x0800370f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3304      	adds	r3, #4
 80036e8:	2101      	movs	r1, #1
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 fde6 	bl	80042bc <RCCEx_PLL2_Config>
 80036f0:	4603      	mov	r3, r0
 80036f2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80036f4:	e00c      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3324      	adds	r3, #36	; 0x24
 80036fa:	2101      	movs	r1, #1
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 fe8f 	bl	8004420 <RCCEx_PLL3_Config>
 8003702:	4603      	mov	r3, r0
 8003704:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003706:	e003      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	75fb      	strb	r3, [r7, #23]
      break;
 800370c:	e000      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800370e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003710:	7dfb      	ldrb	r3, [r7, #23]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d109      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003716:	4b1d      	ldr	r3, [pc, #116]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003722:	491a      	ldr	r1, [pc, #104]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003724:	4313      	orrs	r3, r2
 8003726:	654b      	str	r3, [r1, #84]	; 0x54
 8003728:	e001      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800372a:	7dfb      	ldrb	r3, [r7, #23]
 800372c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d03e      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373e:	2b05      	cmp	r3, #5
 8003740:	d820      	bhi.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8003742:	a201      	add	r2, pc, #4	; (adr r2, 8003748 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8003744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003748:	08003799 	.word	0x08003799
 800374c:	08003761 	.word	0x08003761
 8003750:	08003773 	.word	0x08003773
 8003754:	08003799 	.word	0x08003799
 8003758:	08003799 	.word	0x08003799
 800375c:	08003799 	.word	0x08003799
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3304      	adds	r3, #4
 8003764:	2101      	movs	r1, #1
 8003766:	4618      	mov	r0, r3
 8003768:	f000 fda8 	bl	80042bc <RCCEx_PLL2_Config>
 800376c:	4603      	mov	r3, r0
 800376e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003770:	e013      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	3324      	adds	r3, #36	; 0x24
 8003776:	2101      	movs	r1, #1
 8003778:	4618      	mov	r0, r3
 800377a:	f000 fe51 	bl	8004420 <RCCEx_PLL3_Config>
 800377e:	4603      	mov	r3, r0
 8003780:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003782:	e00a      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	75fb      	strb	r3, [r7, #23]
      break;
 8003788:	e007      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800378a:	bf00      	nop
 800378c:	58024400 	.word	0x58024400
 8003790:	58024800 	.word	0x58024800
 8003794:	00ffffcf 	.word	0x00ffffcf
      break;
 8003798:	bf00      	nop
    }

    if(ret == HAL_OK)
 800379a:	7dfb      	ldrb	r3, [r7, #23]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d109      	bne.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80037a0:	4b9f      	ldr	r3, [pc, #636]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80037a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a4:	f023 0207 	bic.w	r2, r3, #7
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ac:	499c      	ldr	r1, [pc, #624]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	654b      	str	r3, [r1, #84]	; 0x54
 80037b2:	e001      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b4:	7dfb      	ldrb	r3, [r7, #23]
 80037b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d039      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037ca:	2b05      	cmp	r3, #5
 80037cc:	d820      	bhi.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 80037ce:	a201      	add	r2, pc, #4	; (adr r2, 80037d4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80037d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d4:	08003817 	.word	0x08003817
 80037d8:	080037ed 	.word	0x080037ed
 80037dc:	080037ff 	.word	0x080037ff
 80037e0:	08003817 	.word	0x08003817
 80037e4:	08003817 	.word	0x08003817
 80037e8:	08003817 	.word	0x08003817
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3304      	adds	r3, #4
 80037f0:	2101      	movs	r1, #1
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 fd62 	bl	80042bc <RCCEx_PLL2_Config>
 80037f8:	4603      	mov	r3, r0
 80037fa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80037fc:	e00c      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3324      	adds	r3, #36	; 0x24
 8003802:	2101      	movs	r1, #1
 8003804:	4618      	mov	r0, r3
 8003806:	f000 fe0b 	bl	8004420 <RCCEx_PLL3_Config>
 800380a:	4603      	mov	r3, r0
 800380c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800380e:	e003      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	75fb      	strb	r3, [r7, #23]
      break;
 8003814:	e000      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8003816:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003818:	7dfb      	ldrb	r3, [r7, #23]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10a      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800381e:	4b80      	ldr	r3, [pc, #512]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003822:	f023 0207 	bic.w	r2, r3, #7
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800382c:	497c      	ldr	r1, [pc, #496]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800382e:	4313      	orrs	r3, r2
 8003830:	658b      	str	r3, [r1, #88]	; 0x58
 8003832:	e001      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003834:	7dfb      	ldrb	r3, [r7, #23]
 8003836:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0320 	and.w	r3, r3, #32
 8003840:	2b00      	cmp	r3, #0
 8003842:	d04b      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800384e:	d02e      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x962>
 8003850:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003854:	d828      	bhi.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800385a:	d02a      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800385c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003860:	d822      	bhi.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003862:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003866:	d026      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003868:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800386c:	d81c      	bhi.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800386e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003872:	d010      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8003874:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003878:	d816      	bhi.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800387a:	2b00      	cmp	r3, #0
 800387c:	d01d      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800387e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003882:	d111      	bne.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3304      	adds	r3, #4
 8003888:	2100      	movs	r1, #0
 800388a:	4618      	mov	r0, r3
 800388c:	f000 fd16 	bl	80042bc <RCCEx_PLL2_Config>
 8003890:	4603      	mov	r3, r0
 8003892:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003894:	e012      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	3324      	adds	r3, #36	; 0x24
 800389a:	2102      	movs	r1, #2
 800389c:	4618      	mov	r0, r3
 800389e:	f000 fdbf 	bl	8004420 <RCCEx_PLL3_Config>
 80038a2:	4603      	mov	r3, r0
 80038a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80038a6:	e009      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	75fb      	strb	r3, [r7, #23]
      break;
 80038ac:	e006      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80038ae:	bf00      	nop
 80038b0:	e004      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80038b2:	bf00      	nop
 80038b4:	e002      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80038b6:	bf00      	nop
 80038b8:	e000      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80038ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038bc:	7dfb      	ldrb	r3, [r7, #23]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10a      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038c2:	4b57      	ldr	r3, [pc, #348]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80038c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d0:	4953      	ldr	r1, [pc, #332]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	654b      	str	r3, [r1, #84]	; 0x54
 80038d6:	e001      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d8:	7dfb      	ldrb	r3, [r7, #23]
 80038da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d04b      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80038f2:	d02e      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80038f4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80038f8:	d828      	bhi.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80038fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038fe:	d02a      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003904:	d822      	bhi.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003906:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800390a:	d026      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800390c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003910:	d81c      	bhi.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003912:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003916:	d010      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8003918:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800391c:	d816      	bhi.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800391e:	2b00      	cmp	r3, #0
 8003920:	d01d      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003926:	d111      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3304      	adds	r3, #4
 800392c:	2100      	movs	r1, #0
 800392e:	4618      	mov	r0, r3
 8003930:	f000 fcc4 	bl	80042bc <RCCEx_PLL2_Config>
 8003934:	4603      	mov	r3, r0
 8003936:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003938:	e012      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3324      	adds	r3, #36	; 0x24
 800393e:	2102      	movs	r1, #2
 8003940:	4618      	mov	r0, r3
 8003942:	f000 fd6d 	bl	8004420 <RCCEx_PLL3_Config>
 8003946:	4603      	mov	r3, r0
 8003948:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800394a:	e009      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	75fb      	strb	r3, [r7, #23]
      break;
 8003950:	e006      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003952:	bf00      	nop
 8003954:	e004      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003956:	bf00      	nop
 8003958:	e002      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800395a:	bf00      	nop
 800395c:	e000      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800395e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003960:	7dfb      	ldrb	r3, [r7, #23]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10a      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003966:	4b2e      	ldr	r3, [pc, #184]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003974:	492a      	ldr	r1, [pc, #168]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003976:	4313      	orrs	r3, r2
 8003978:	658b      	str	r3, [r1, #88]	; 0x58
 800397a:	e001      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800397c:	7dfb      	ldrb	r3, [r7, #23]
 800397e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003988:	2b00      	cmp	r3, #0
 800398a:	d04d      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003992:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003996:	d02e      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8003998:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800399c:	d828      	bhi.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800399e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039a2:	d02a      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80039a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039a8:	d822      	bhi.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80039aa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80039ae:	d026      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80039b0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80039b4:	d81c      	bhi.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80039b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039ba:	d010      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80039bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039c0:	d816      	bhi.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d01d      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80039c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ca:	d111      	bne.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3304      	adds	r3, #4
 80039d0:	2100      	movs	r1, #0
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fc72 	bl	80042bc <RCCEx_PLL2_Config>
 80039d8:	4603      	mov	r3, r0
 80039da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80039dc:	e012      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	3324      	adds	r3, #36	; 0x24
 80039e2:	2102      	movs	r1, #2
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 fd1b 	bl	8004420 <RCCEx_PLL3_Config>
 80039ea:	4603      	mov	r3, r0
 80039ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80039ee:	e009      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	75fb      	strb	r3, [r7, #23]
      break;
 80039f4:	e006      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80039f6:	bf00      	nop
 80039f8:	e004      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80039fa:	bf00      	nop
 80039fc:	e002      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80039fe:	bf00      	nop
 8003a00:	e000      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003a02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a04:	7dfb      	ldrb	r3, [r7, #23]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10c      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003a0a:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a18:	4901      	ldr	r1, [pc, #4]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	658b      	str	r3, [r1, #88]	; 0x58
 8003a1e:	e003      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003a20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a24:	7dfb      	ldrb	r3, [r7, #23]
 8003a26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0308 	and.w	r3, r3, #8
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d018      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a3c:	d10a      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	3324      	adds	r3, #36	; 0x24
 8003a42:	2102      	movs	r1, #2
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 fceb 	bl	8004420 <RCCEx_PLL3_Config>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003a54:	4b8a      	ldr	r3, [pc, #552]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a60:	4987      	ldr	r1, [pc, #540]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0310 	and.w	r3, r3, #16
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d01a      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a7c:	d10a      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	3324      	adds	r3, #36	; 0x24
 8003a82:	2102      	movs	r1, #2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 fccb 	bl	8004420 <RCCEx_PLL3_Config>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a94:	4b7a      	ldr	r3, [pc, #488]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa2:	4977      	ldr	r1, [pc, #476]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d034      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003aba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003abe:	d01d      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003ac0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ac4:	d817      	bhi.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ace:	d009      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003ad0:	e011      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f000 fbef 	bl	80042bc <RCCEx_PLL2_Config>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003ae2:	e00c      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3324      	adds	r3, #36	; 0x24
 8003ae8:	2102      	movs	r1, #2
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 fc98 	bl	8004420 <RCCEx_PLL3_Config>
 8003af0:	4603      	mov	r3, r0
 8003af2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003af4:	e003      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	75fb      	strb	r3, [r7, #23]
      break;
 8003afa:	e000      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8003afc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003afe:	7dfb      	ldrb	r3, [r7, #23]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10a      	bne.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b04:	4b5e      	ldr	r3, [pc, #376]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b12:	495b      	ldr	r1, [pc, #364]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	658b      	str	r3, [r1, #88]	; 0x58
 8003b18:	e001      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b1a:	7dfb      	ldrb	r3, [r7, #23]
 8003b1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d033      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b34:	d01c      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003b36:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b3a:	d816      	bhi.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003b3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b40:	d003      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003b42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b46:	d007      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8003b48:	e00f      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b4a:	4b4d      	ldr	r3, [pc, #308]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4e:	4a4c      	ldr	r2, [pc, #304]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003b56:	e00c      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3324      	adds	r3, #36	; 0x24
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 fc5e 	bl	8004420 <RCCEx_PLL3_Config>
 8003b64:	4603      	mov	r3, r0
 8003b66:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003b68:	e003      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	75fb      	strb	r3, [r7, #23]
      break;
 8003b6e:	e000      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8003b70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b72:	7dfb      	ldrb	r3, [r7, #23]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10a      	bne.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b78:	4b41      	ldr	r3, [pc, #260]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b86:	493e      	ldr	r1, [pc, #248]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	654b      	str	r3, [r1, #84]	; 0x54
 8003b8c:	e001      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b8e:	7dfb      	ldrb	r3, [r7, #23]
 8003b90:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d029      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8003ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003baa:	d007      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003bac:	e00f      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bae:	4b34      	ldr	r3, [pc, #208]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb2:	4a33      	ldr	r2, [pc, #204]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003bba:	e00b      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3304      	adds	r3, #4
 8003bc0:	2102      	movs	r1, #2
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 fb7a 	bl	80042bc <RCCEx_PLL2_Config>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003bcc:	e002      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	75fb      	strb	r3, [r7, #23]
      break;
 8003bd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bd4:	7dfb      	ldrb	r3, [r7, #23]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d109      	bne.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003bda:	4b29      	ldr	r3, [pc, #164]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bde:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be6:	4926      	ldr	r1, [pc, #152]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003bec:	e001      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bee:	7dfb      	ldrb	r3, [r7, #23]
 8003bf0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00a      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3324      	adds	r3, #36	; 0x24
 8003c02:	2102      	movs	r1, #2
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 fc0b 	bl	8004420 <RCCEx_PLL3_Config>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d033      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c28:	d017      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8003c2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c2e:	d811      	bhi.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c34:	d013      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8003c36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c3a:	d80b      	bhi.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d010      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8003c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c44:	d106      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c46:	4b0e      	ldr	r3, [pc, #56]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4a:	4a0d      	ldr	r2, [pc, #52]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003c52:	e007      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	75fb      	strb	r3, [r7, #23]
      break;
 8003c58:	e004      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8003c5a:	bf00      	nop
 8003c5c:	e002      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8003c5e:	bf00      	nop
 8003c60:	e000      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8003c62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c64:	7dfb      	ldrb	r3, [r7, #23]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10c      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c6a:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c76:	4902      	ldr	r1, [pc, #8]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	654b      	str	r3, [r1, #84]	; 0x54
 8003c7c:	e004      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8003c7e:	bf00      	nop
 8003c80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c84:	7dfb      	ldrb	r3, [r7, #23]
 8003c86:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d008      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c94:	4b29      	ldr	r3, [pc, #164]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ca0:	4926      	ldr	r1, [pc, #152]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d008      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003cb2:	4b22      	ldr	r3, [pc, #136]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cbe:	491f      	ldr	r1, [pc, #124]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00d      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cd0:	4b1a      	ldr	r3, [pc, #104]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	4a19      	ldr	r2, [pc, #100]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003cd6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003cda:	6113      	str	r3, [r2, #16]
 8003cdc:	4b17      	ldr	r3, [pc, #92]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003cde:	691a      	ldr	r2, [r3, #16]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ce6:	4915      	ldr	r1, [pc, #84]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	da08      	bge.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003cf4:	4b11      	ldr	r3, [pc, #68]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d00:	490e      	ldr	r1, [pc, #56]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d009      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d12:	4b0a      	ldr	r3, [pc, #40]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d20:	4906      	ldr	r1, [pc, #24]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003d26:	7dbb      	ldrb	r3, [r7, #22]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	e000      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3718      	adds	r7, #24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	58024400 	.word	0x58024400

08003d40 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003d44:	f7ff f8a6 	bl	8002e94 <HAL_RCC_GetHCLKFreq>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	091b      	lsrs	r3, r3, #4
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	4904      	ldr	r1, [pc, #16]	; (8003d68 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003d56:	5ccb      	ldrb	r3, [r1, r3]
 8003d58:	f003 031f 	and.w	r3, r3, #31
 8003d5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	58024400 	.word	0x58024400
 8003d68:	0800765c 	.word	0x0800765c

08003d6c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b089      	sub	sp, #36	; 0x24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d74:	4ba1      	ldr	r3, [pc, #644]	; (8003ffc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d78:	f003 0303 	and.w	r3, r3, #3
 8003d7c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003d7e:	4b9f      	ldr	r3, [pc, #636]	; (8003ffc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d82:	0b1b      	lsrs	r3, r3, #12
 8003d84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d88:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003d8a:	4b9c      	ldr	r3, [pc, #624]	; (8003ffc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8e:	091b      	lsrs	r3, r3, #4
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003d96:	4b99      	ldr	r3, [pc, #612]	; (8003ffc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9a:	08db      	lsrs	r3, r3, #3
 8003d9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	fb02 f303 	mul.w	r3, r2, r3
 8003da6:	ee07 3a90 	vmov	s15, r3
 8003daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 8111 	beq.w	8003fdc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	f000 8083 	beq.w	8003ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	f200 80a1 	bhi.w	8003f0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d056      	beq.n	8003e84 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003dd6:	e099      	b.n	8003f0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003dd8:	4b88      	ldr	r3, [pc, #544]	; (8003ffc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0320 	and.w	r3, r3, #32
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d02d      	beq.n	8003e40 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003de4:	4b85      	ldr	r3, [pc, #532]	; (8003ffc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	08db      	lsrs	r3, r3, #3
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	4a84      	ldr	r2, [pc, #528]	; (8004000 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003df0:	fa22 f303 	lsr.w	r3, r2, r3
 8003df4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	ee07 3a90 	vmov	s15, r3
 8003dfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	ee07 3a90 	vmov	s15, r3
 8003e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e0e:	4b7b      	ldr	r3, [pc, #492]	; (8003ffc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e16:	ee07 3a90 	vmov	s15, r3
 8003e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e22:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004004 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e3a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003e3e:	e087      	b.n	8003f50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	ee07 3a90 	vmov	s15, r3
 8003e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e4a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004008 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e52:	4b6a      	ldr	r3, [pc, #424]	; (8003ffc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e5a:	ee07 3a90 	vmov	s15, r3
 8003e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e62:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e66:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004004 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e82:	e065      	b.n	8003f50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	ee07 3a90 	vmov	s15, r3
 8003e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e8e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800400c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e96:	4b59      	ldr	r3, [pc, #356]	; (8003ffc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e9e:	ee07 3a90 	vmov	s15, r3
 8003ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ea6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003eaa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004004 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ec2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ec6:	e043      	b.n	8003f50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	ee07 3a90 	vmov	s15, r3
 8003ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ed2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004010 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eda:	4b48      	ldr	r3, [pc, #288]	; (8003ffc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ee2:	ee07 3a90 	vmov	s15, r3
 8003ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eea:	ed97 6a03 	vldr	s12, [r7, #12]
 8003eee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004004 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003efa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f0a:	e021      	b.n	8003f50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	ee07 3a90 	vmov	s15, r3
 8003f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f16:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800400c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f1e:	4b37      	ldr	r3, [pc, #220]	; (8003ffc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f26:	ee07 3a90 	vmov	s15, r3
 8003f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f32:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004004 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f4e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003f50:	4b2a      	ldr	r3, [pc, #168]	; (8003ffc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f54:	0a5b      	lsrs	r3, r3, #9
 8003f56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f5a:	ee07 3a90 	vmov	s15, r3
 8003f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f76:	ee17 2a90 	vmov	r2, s15
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003f7e:	4b1f      	ldr	r3, [pc, #124]	; (8003ffc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f82:	0c1b      	lsrs	r3, r3, #16
 8003f84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f88:	ee07 3a90 	vmov	s15, r3
 8003f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f98:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fa4:	ee17 2a90 	vmov	r2, s15
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003fac:	4b13      	ldr	r3, [pc, #76]	; (8003ffc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb0:	0e1b      	lsrs	r3, r3, #24
 8003fb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fb6:	ee07 3a90 	vmov	s15, r3
 8003fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003fc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fd2:	ee17 2a90 	vmov	r2, s15
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003fda:	e008      	b.n	8003fee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	609a      	str	r2, [r3, #8]
}
 8003fee:	bf00      	nop
 8003ff0:	3724      	adds	r7, #36	; 0x24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	58024400 	.word	0x58024400
 8004000:	03d09000 	.word	0x03d09000
 8004004:	46000000 	.word	0x46000000
 8004008:	4c742400 	.word	0x4c742400
 800400c:	4a742400 	.word	0x4a742400
 8004010:	4bbebc20 	.word	0x4bbebc20

08004014 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004014:	b480      	push	{r7}
 8004016:	b089      	sub	sp, #36	; 0x24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800401c:	4ba1      	ldr	r3, [pc, #644]	; (80042a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800401e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004020:	f003 0303 	and.w	r3, r3, #3
 8004024:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004026:	4b9f      	ldr	r3, [pc, #636]	; (80042a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402a:	0d1b      	lsrs	r3, r3, #20
 800402c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004030:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004032:	4b9c      	ldr	r3, [pc, #624]	; (80042a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004036:	0a1b      	lsrs	r3, r3, #8
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800403e:	4b99      	ldr	r3, [pc, #612]	; (80042a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004042:	08db      	lsrs	r3, r3, #3
 8004044:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	fb02 f303 	mul.w	r3, r2, r3
 800404e:	ee07 3a90 	vmov	s15, r3
 8004052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004056:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 8111 	beq.w	8004284 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	2b02      	cmp	r3, #2
 8004066:	f000 8083 	beq.w	8004170 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	2b02      	cmp	r3, #2
 800406e:	f200 80a1 	bhi.w	80041b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d003      	beq.n	8004080 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d056      	beq.n	800412c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800407e:	e099      	b.n	80041b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004080:	4b88      	ldr	r3, [pc, #544]	; (80042a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0320 	and.w	r3, r3, #32
 8004088:	2b00      	cmp	r3, #0
 800408a:	d02d      	beq.n	80040e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800408c:	4b85      	ldr	r3, [pc, #532]	; (80042a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	08db      	lsrs	r3, r3, #3
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	4a84      	ldr	r2, [pc, #528]	; (80042a8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004098:	fa22 f303 	lsr.w	r3, r2, r3
 800409c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	ee07 3a90 	vmov	s15, r3
 80040a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	ee07 3a90 	vmov	s15, r3
 80040ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040b6:	4b7b      	ldr	r3, [pc, #492]	; (80042a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040be:	ee07 3a90 	vmov	s15, r3
 80040c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80040ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 80042ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80040ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040e2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80040e6:	e087      	b.n	80041f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	ee07 3a90 	vmov	s15, r3
 80040ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80042b0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80040f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040fa:	4b6a      	ldr	r3, [pc, #424]	; (80042a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004102:	ee07 3a90 	vmov	s15, r3
 8004106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800410a:	ed97 6a03 	vldr	s12, [r7, #12]
 800410e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80042ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800411a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800411e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004126:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800412a:	e065      	b.n	80041f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	ee07 3a90 	vmov	s15, r3
 8004132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004136:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80042b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800413a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800413e:	4b59      	ldr	r3, [pc, #356]	; (80042a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004146:	ee07 3a90 	vmov	s15, r3
 800414a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800414e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004152:	eddf 5a56 	vldr	s11, [pc, #344]	; 80042ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800415a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800415e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800416a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800416e:	e043      	b.n	80041f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	ee07 3a90 	vmov	s15, r3
 8004176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800417a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80042b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800417e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004182:	4b48      	ldr	r3, [pc, #288]	; (80042a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800418a:	ee07 3a90 	vmov	s15, r3
 800418e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004192:	ed97 6a03 	vldr	s12, [r7, #12]
 8004196:	eddf 5a45 	vldr	s11, [pc, #276]	; 80042ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800419a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800419e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80041b2:	e021      	b.n	80041f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	ee07 3a90 	vmov	s15, r3
 80041ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80042b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80041c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041c6:	4b37      	ldr	r3, [pc, #220]	; (80042a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ce:	ee07 3a90 	vmov	s15, r3
 80041d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80041da:	eddf 5a34 	vldr	s11, [pc, #208]	; 80042ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80041de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80041f6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80041f8:	4b2a      	ldr	r3, [pc, #168]	; (80042a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	0a5b      	lsrs	r3, r3, #9
 80041fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004202:	ee07 3a90 	vmov	s15, r3
 8004206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800420a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800420e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004212:	edd7 6a07 	vldr	s13, [r7, #28]
 8004216:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800421a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800421e:	ee17 2a90 	vmov	r2, s15
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004226:	4b1f      	ldr	r3, [pc, #124]	; (80042a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	0c1b      	lsrs	r3, r3, #16
 800422c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004230:	ee07 3a90 	vmov	s15, r3
 8004234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004238:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800423c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004240:	edd7 6a07 	vldr	s13, [r7, #28]
 8004244:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004248:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800424c:	ee17 2a90 	vmov	r2, s15
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004254:	4b13      	ldr	r3, [pc, #76]	; (80042a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004258:	0e1b      	lsrs	r3, r3, #24
 800425a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800425e:	ee07 3a90 	vmov	s15, r3
 8004262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004266:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800426a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800426e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004272:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800427a:	ee17 2a90 	vmov	r2, s15
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004282:	e008      	b.n	8004296 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	609a      	str	r2, [r3, #8]
}
 8004296:	bf00      	nop
 8004298:	3724      	adds	r7, #36	; 0x24
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	58024400 	.word	0x58024400
 80042a8:	03d09000 	.word	0x03d09000
 80042ac:	46000000 	.word	0x46000000
 80042b0:	4c742400 	.word	0x4c742400
 80042b4:	4a742400 	.word	0x4a742400
 80042b8:	4bbebc20 	.word	0x4bbebc20

080042bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042c6:	2300      	movs	r3, #0
 80042c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80042ca:	4b53      	ldr	r3, [pc, #332]	; (8004418 <RCCEx_PLL2_Config+0x15c>)
 80042cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ce:	f003 0303 	and.w	r3, r3, #3
 80042d2:	2b03      	cmp	r3, #3
 80042d4:	d101      	bne.n	80042da <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e099      	b.n	800440e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80042da:	4b4f      	ldr	r3, [pc, #316]	; (8004418 <RCCEx_PLL2_Config+0x15c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a4e      	ldr	r2, [pc, #312]	; (8004418 <RCCEx_PLL2_Config+0x15c>)
 80042e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042e6:	f7fc fe5d 	bl	8000fa4 <HAL_GetTick>
 80042ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80042ec:	e008      	b.n	8004300 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80042ee:	f7fc fe59 	bl	8000fa4 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d901      	bls.n	8004300 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e086      	b.n	800440e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004300:	4b45      	ldr	r3, [pc, #276]	; (8004418 <RCCEx_PLL2_Config+0x15c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1f0      	bne.n	80042ee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800430c:	4b42      	ldr	r3, [pc, #264]	; (8004418 <RCCEx_PLL2_Config+0x15c>)
 800430e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004310:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	031b      	lsls	r3, r3, #12
 800431a:	493f      	ldr	r1, [pc, #252]	; (8004418 <RCCEx_PLL2_Config+0x15c>)
 800431c:	4313      	orrs	r3, r2
 800431e:	628b      	str	r3, [r1, #40]	; 0x28
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	3b01      	subs	r3, #1
 8004326:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	3b01      	subs	r3, #1
 8004330:	025b      	lsls	r3, r3, #9
 8004332:	b29b      	uxth	r3, r3
 8004334:	431a      	orrs	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	3b01      	subs	r3, #1
 800433c:	041b      	lsls	r3, r3, #16
 800433e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	3b01      	subs	r3, #1
 800434a:	061b      	lsls	r3, r3, #24
 800434c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004350:	4931      	ldr	r1, [pc, #196]	; (8004418 <RCCEx_PLL2_Config+0x15c>)
 8004352:	4313      	orrs	r3, r2
 8004354:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004356:	4b30      	ldr	r3, [pc, #192]	; (8004418 <RCCEx_PLL2_Config+0x15c>)
 8004358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	492d      	ldr	r1, [pc, #180]	; (8004418 <RCCEx_PLL2_Config+0x15c>)
 8004364:	4313      	orrs	r3, r2
 8004366:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004368:	4b2b      	ldr	r3, [pc, #172]	; (8004418 <RCCEx_PLL2_Config+0x15c>)
 800436a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436c:	f023 0220 	bic.w	r2, r3, #32
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	4928      	ldr	r1, [pc, #160]	; (8004418 <RCCEx_PLL2_Config+0x15c>)
 8004376:	4313      	orrs	r3, r2
 8004378:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800437a:	4b27      	ldr	r3, [pc, #156]	; (8004418 <RCCEx_PLL2_Config+0x15c>)
 800437c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437e:	4a26      	ldr	r2, [pc, #152]	; (8004418 <RCCEx_PLL2_Config+0x15c>)
 8004380:	f023 0310 	bic.w	r3, r3, #16
 8004384:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004386:	4b24      	ldr	r3, [pc, #144]	; (8004418 <RCCEx_PLL2_Config+0x15c>)
 8004388:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800438a:	4b24      	ldr	r3, [pc, #144]	; (800441c <RCCEx_PLL2_Config+0x160>)
 800438c:	4013      	ands	r3, r2
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	69d2      	ldr	r2, [r2, #28]
 8004392:	00d2      	lsls	r2, r2, #3
 8004394:	4920      	ldr	r1, [pc, #128]	; (8004418 <RCCEx_PLL2_Config+0x15c>)
 8004396:	4313      	orrs	r3, r2
 8004398:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800439a:	4b1f      	ldr	r3, [pc, #124]	; (8004418 <RCCEx_PLL2_Config+0x15c>)
 800439c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439e:	4a1e      	ldr	r2, [pc, #120]	; (8004418 <RCCEx_PLL2_Config+0x15c>)
 80043a0:	f043 0310 	orr.w	r3, r3, #16
 80043a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d106      	bne.n	80043ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80043ac:	4b1a      	ldr	r3, [pc, #104]	; (8004418 <RCCEx_PLL2_Config+0x15c>)
 80043ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b0:	4a19      	ldr	r2, [pc, #100]	; (8004418 <RCCEx_PLL2_Config+0x15c>)
 80043b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80043b8:	e00f      	b.n	80043da <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d106      	bne.n	80043ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80043c0:	4b15      	ldr	r3, [pc, #84]	; (8004418 <RCCEx_PLL2_Config+0x15c>)
 80043c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c4:	4a14      	ldr	r2, [pc, #80]	; (8004418 <RCCEx_PLL2_Config+0x15c>)
 80043c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80043cc:	e005      	b.n	80043da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80043ce:	4b12      	ldr	r3, [pc, #72]	; (8004418 <RCCEx_PLL2_Config+0x15c>)
 80043d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d2:	4a11      	ldr	r2, [pc, #68]	; (8004418 <RCCEx_PLL2_Config+0x15c>)
 80043d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80043d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80043da:	4b0f      	ldr	r3, [pc, #60]	; (8004418 <RCCEx_PLL2_Config+0x15c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a0e      	ldr	r2, [pc, #56]	; (8004418 <RCCEx_PLL2_Config+0x15c>)
 80043e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043e6:	f7fc fddd 	bl	8000fa4 <HAL_GetTick>
 80043ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80043ec:	e008      	b.n	8004400 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80043ee:	f7fc fdd9 	bl	8000fa4 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d901      	bls.n	8004400 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e006      	b.n	800440e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004400:	4b05      	ldr	r3, [pc, #20]	; (8004418 <RCCEx_PLL2_Config+0x15c>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0f0      	beq.n	80043ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800440c:	7bfb      	ldrb	r3, [r7, #15]
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	58024400 	.word	0x58024400
 800441c:	ffff0007 	.word	0xffff0007

08004420 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800442a:	2300      	movs	r3, #0
 800442c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800442e:	4b53      	ldr	r3, [pc, #332]	; (800457c <RCCEx_PLL3_Config+0x15c>)
 8004430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	2b03      	cmp	r3, #3
 8004438:	d101      	bne.n	800443e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e099      	b.n	8004572 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800443e:	4b4f      	ldr	r3, [pc, #316]	; (800457c <RCCEx_PLL3_Config+0x15c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a4e      	ldr	r2, [pc, #312]	; (800457c <RCCEx_PLL3_Config+0x15c>)
 8004444:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004448:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800444a:	f7fc fdab 	bl	8000fa4 <HAL_GetTick>
 800444e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004450:	e008      	b.n	8004464 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004452:	f7fc fda7 	bl	8000fa4 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d901      	bls.n	8004464 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e086      	b.n	8004572 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004464:	4b45      	ldr	r3, [pc, #276]	; (800457c <RCCEx_PLL3_Config+0x15c>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1f0      	bne.n	8004452 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004470:	4b42      	ldr	r3, [pc, #264]	; (800457c <RCCEx_PLL3_Config+0x15c>)
 8004472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004474:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	051b      	lsls	r3, r3, #20
 800447e:	493f      	ldr	r1, [pc, #252]	; (800457c <RCCEx_PLL3_Config+0x15c>)
 8004480:	4313      	orrs	r3, r2
 8004482:	628b      	str	r3, [r1, #40]	; 0x28
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	3b01      	subs	r3, #1
 800448a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	3b01      	subs	r3, #1
 8004494:	025b      	lsls	r3, r3, #9
 8004496:	b29b      	uxth	r3, r3
 8004498:	431a      	orrs	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	3b01      	subs	r3, #1
 80044a0:	041b      	lsls	r3, r3, #16
 80044a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80044a6:	431a      	orrs	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	3b01      	subs	r3, #1
 80044ae:	061b      	lsls	r3, r3, #24
 80044b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80044b4:	4931      	ldr	r1, [pc, #196]	; (800457c <RCCEx_PLL3_Config+0x15c>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80044ba:	4b30      	ldr	r3, [pc, #192]	; (800457c <RCCEx_PLL3_Config+0x15c>)
 80044bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	492d      	ldr	r1, [pc, #180]	; (800457c <RCCEx_PLL3_Config+0x15c>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80044cc:	4b2b      	ldr	r3, [pc, #172]	; (800457c <RCCEx_PLL3_Config+0x15c>)
 80044ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	4928      	ldr	r1, [pc, #160]	; (800457c <RCCEx_PLL3_Config+0x15c>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80044de:	4b27      	ldr	r3, [pc, #156]	; (800457c <RCCEx_PLL3_Config+0x15c>)
 80044e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e2:	4a26      	ldr	r2, [pc, #152]	; (800457c <RCCEx_PLL3_Config+0x15c>)
 80044e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80044ea:	4b24      	ldr	r3, [pc, #144]	; (800457c <RCCEx_PLL3_Config+0x15c>)
 80044ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ee:	4b24      	ldr	r3, [pc, #144]	; (8004580 <RCCEx_PLL3_Config+0x160>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	69d2      	ldr	r2, [r2, #28]
 80044f6:	00d2      	lsls	r2, r2, #3
 80044f8:	4920      	ldr	r1, [pc, #128]	; (800457c <RCCEx_PLL3_Config+0x15c>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80044fe:	4b1f      	ldr	r3, [pc, #124]	; (800457c <RCCEx_PLL3_Config+0x15c>)
 8004500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004502:	4a1e      	ldr	r2, [pc, #120]	; (800457c <RCCEx_PLL3_Config+0x15c>)
 8004504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004508:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d106      	bne.n	800451e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004510:	4b1a      	ldr	r3, [pc, #104]	; (800457c <RCCEx_PLL3_Config+0x15c>)
 8004512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004514:	4a19      	ldr	r2, [pc, #100]	; (800457c <RCCEx_PLL3_Config+0x15c>)
 8004516:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800451a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800451c:	e00f      	b.n	800453e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d106      	bne.n	8004532 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004524:	4b15      	ldr	r3, [pc, #84]	; (800457c <RCCEx_PLL3_Config+0x15c>)
 8004526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004528:	4a14      	ldr	r2, [pc, #80]	; (800457c <RCCEx_PLL3_Config+0x15c>)
 800452a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800452e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004530:	e005      	b.n	800453e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004532:	4b12      	ldr	r3, [pc, #72]	; (800457c <RCCEx_PLL3_Config+0x15c>)
 8004534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004536:	4a11      	ldr	r2, [pc, #68]	; (800457c <RCCEx_PLL3_Config+0x15c>)
 8004538:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800453c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800453e:	4b0f      	ldr	r3, [pc, #60]	; (800457c <RCCEx_PLL3_Config+0x15c>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a0e      	ldr	r2, [pc, #56]	; (800457c <RCCEx_PLL3_Config+0x15c>)
 8004544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004548:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800454a:	f7fc fd2b 	bl	8000fa4 <HAL_GetTick>
 800454e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004550:	e008      	b.n	8004564 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004552:	f7fc fd27 	bl	8000fa4 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d901      	bls.n	8004564 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e006      	b.n	8004572 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004564:	4b05      	ldr	r3, [pc, #20]	; (800457c <RCCEx_PLL3_Config+0x15c>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0f0      	beq.n	8004552 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004570:	7bfb      	ldrb	r3, [r7, #15]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	58024400 	.word	0x58024400
 8004580:	ffff0007 	.word	0xffff0007

08004584 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e042      	b.n	800461c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800459c:	2b00      	cmp	r3, #0
 800459e:	d106      	bne.n	80045ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f7fc fb0d 	bl	8000bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2224      	movs	r2, #36	; 0x24
 80045b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 0201 	bic.w	r2, r2, #1
 80045c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f8c2 	bl	8004750 <UART_SetConfig>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d101      	bne.n	80045d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e022      	b.n	800461c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d002      	beq.n	80045e4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 ff22 	bl	8005428 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004602:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0201 	orr.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 ffa9 	bl	800556c <UART_CheckIdleState>
 800461a:	4603      	mov	r3, r0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08a      	sub	sp, #40	; 0x28
 8004628:	af02      	add	r7, sp, #8
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	603b      	str	r3, [r7, #0]
 8004630:	4613      	mov	r3, r2
 8004632:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800463a:	2b20      	cmp	r3, #32
 800463c:	f040 8083 	bne.w	8004746 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <HAL_UART_Transmit+0x28>
 8004646:	88fb      	ldrh	r3, [r7, #6]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e07b      	b.n	8004748 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004656:	2b01      	cmp	r3, #1
 8004658:	d101      	bne.n	800465e <HAL_UART_Transmit+0x3a>
 800465a:	2302      	movs	r3, #2
 800465c:	e074      	b.n	8004748 <HAL_UART_Transmit+0x124>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2221      	movs	r2, #33	; 0x21
 8004672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004676:	f7fc fc95 	bl	8000fa4 <HAL_GetTick>
 800467a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	88fa      	ldrh	r2, [r7, #6]
 8004680:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	88fa      	ldrh	r2, [r7, #6]
 8004688:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004694:	d108      	bne.n	80046a8 <HAL_UART_Transmit+0x84>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d104      	bne.n	80046a8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	61bb      	str	r3, [r7, #24]
 80046a6:	e003      	b.n	80046b0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046ac:	2300      	movs	r3, #0
 80046ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80046b8:	e02c      	b.n	8004714 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2200      	movs	r2, #0
 80046c2:	2180      	movs	r1, #128	; 0x80
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 ff9c 	bl	8005602 <UART_WaitOnFlagUntilTimeout>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e039      	b.n	8004748 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10b      	bne.n	80046f2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	881b      	ldrh	r3, [r3, #0]
 80046de:	461a      	mov	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	3302      	adds	r3, #2
 80046ee:	61bb      	str	r3, [r7, #24]
 80046f0:	e007      	b.n	8004702 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	781a      	ldrb	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	3301      	adds	r3, #1
 8004700:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004708:	b29b      	uxth	r3, r3
 800470a:	3b01      	subs	r3, #1
 800470c:	b29a      	uxth	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800471a:	b29b      	uxth	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1cc      	bne.n	80046ba <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	2200      	movs	r2, #0
 8004728:	2140      	movs	r1, #64	; 0x40
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 ff69 	bl	8005602 <UART_WaitOnFlagUntilTimeout>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e006      	b.n	8004748 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2220      	movs	r2, #32
 800473e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	e000      	b.n	8004748 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004746:	2302      	movs	r3, #2
  }
}
 8004748:	4618      	mov	r0, r3
 800474a:	3720      	adds	r7, #32
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004754:	b092      	sub	sp, #72	; 0x48
 8004756:	af00      	add	r7, sp, #0
 8004758:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800475a:	2300      	movs	r3, #0
 800475c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	431a      	orrs	r2, r3
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	431a      	orrs	r2, r3
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	4313      	orrs	r3, r2
 8004776:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	4bbe      	ldr	r3, [pc, #760]	; (8004a78 <UART_SetConfig+0x328>)
 8004780:	4013      	ands	r3, r2
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	6812      	ldr	r2, [r2, #0]
 8004786:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004788:	430b      	orrs	r3, r1
 800478a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4ab3      	ldr	r2, [pc, #716]	; (8004a7c <UART_SetConfig+0x32c>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d004      	beq.n	80047bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047b8:	4313      	orrs	r3, r2
 80047ba:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689a      	ldr	r2, [r3, #8]
 80047c2:	4baf      	ldr	r3, [pc, #700]	; (8004a80 <UART_SetConfig+0x330>)
 80047c4:	4013      	ands	r3, r2
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	6812      	ldr	r2, [r2, #0]
 80047ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80047cc:	430b      	orrs	r3, r1
 80047ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d6:	f023 010f 	bic.w	r1, r3, #15
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4aa6      	ldr	r2, [pc, #664]	; (8004a84 <UART_SetConfig+0x334>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d177      	bne.n	80048e0 <UART_SetConfig+0x190>
 80047f0:	4ba5      	ldr	r3, [pc, #660]	; (8004a88 <UART_SetConfig+0x338>)
 80047f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047f8:	2b28      	cmp	r3, #40	; 0x28
 80047fa:	d86d      	bhi.n	80048d8 <UART_SetConfig+0x188>
 80047fc:	a201      	add	r2, pc, #4	; (adr r2, 8004804 <UART_SetConfig+0xb4>)
 80047fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004802:	bf00      	nop
 8004804:	080048a9 	.word	0x080048a9
 8004808:	080048d9 	.word	0x080048d9
 800480c:	080048d9 	.word	0x080048d9
 8004810:	080048d9 	.word	0x080048d9
 8004814:	080048d9 	.word	0x080048d9
 8004818:	080048d9 	.word	0x080048d9
 800481c:	080048d9 	.word	0x080048d9
 8004820:	080048d9 	.word	0x080048d9
 8004824:	080048b1 	.word	0x080048b1
 8004828:	080048d9 	.word	0x080048d9
 800482c:	080048d9 	.word	0x080048d9
 8004830:	080048d9 	.word	0x080048d9
 8004834:	080048d9 	.word	0x080048d9
 8004838:	080048d9 	.word	0x080048d9
 800483c:	080048d9 	.word	0x080048d9
 8004840:	080048d9 	.word	0x080048d9
 8004844:	080048b9 	.word	0x080048b9
 8004848:	080048d9 	.word	0x080048d9
 800484c:	080048d9 	.word	0x080048d9
 8004850:	080048d9 	.word	0x080048d9
 8004854:	080048d9 	.word	0x080048d9
 8004858:	080048d9 	.word	0x080048d9
 800485c:	080048d9 	.word	0x080048d9
 8004860:	080048d9 	.word	0x080048d9
 8004864:	080048c1 	.word	0x080048c1
 8004868:	080048d9 	.word	0x080048d9
 800486c:	080048d9 	.word	0x080048d9
 8004870:	080048d9 	.word	0x080048d9
 8004874:	080048d9 	.word	0x080048d9
 8004878:	080048d9 	.word	0x080048d9
 800487c:	080048d9 	.word	0x080048d9
 8004880:	080048d9 	.word	0x080048d9
 8004884:	080048c9 	.word	0x080048c9
 8004888:	080048d9 	.word	0x080048d9
 800488c:	080048d9 	.word	0x080048d9
 8004890:	080048d9 	.word	0x080048d9
 8004894:	080048d9 	.word	0x080048d9
 8004898:	080048d9 	.word	0x080048d9
 800489c:	080048d9 	.word	0x080048d9
 80048a0:	080048d9 	.word	0x080048d9
 80048a4:	080048d1 	.word	0x080048d1
 80048a8:	2301      	movs	r3, #1
 80048aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048ae:	e326      	b.n	8004efe <UART_SetConfig+0x7ae>
 80048b0:	2304      	movs	r3, #4
 80048b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048b6:	e322      	b.n	8004efe <UART_SetConfig+0x7ae>
 80048b8:	2308      	movs	r3, #8
 80048ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048be:	e31e      	b.n	8004efe <UART_SetConfig+0x7ae>
 80048c0:	2310      	movs	r3, #16
 80048c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048c6:	e31a      	b.n	8004efe <UART_SetConfig+0x7ae>
 80048c8:	2320      	movs	r3, #32
 80048ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048ce:	e316      	b.n	8004efe <UART_SetConfig+0x7ae>
 80048d0:	2340      	movs	r3, #64	; 0x40
 80048d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048d6:	e312      	b.n	8004efe <UART_SetConfig+0x7ae>
 80048d8:	2380      	movs	r3, #128	; 0x80
 80048da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048de:	e30e      	b.n	8004efe <UART_SetConfig+0x7ae>
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a69      	ldr	r2, [pc, #420]	; (8004a8c <UART_SetConfig+0x33c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d130      	bne.n	800494c <UART_SetConfig+0x1fc>
 80048ea:	4b67      	ldr	r3, [pc, #412]	; (8004a88 <UART_SetConfig+0x338>)
 80048ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	2b05      	cmp	r3, #5
 80048f4:	d826      	bhi.n	8004944 <UART_SetConfig+0x1f4>
 80048f6:	a201      	add	r2, pc, #4	; (adr r2, 80048fc <UART_SetConfig+0x1ac>)
 80048f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fc:	08004915 	.word	0x08004915
 8004900:	0800491d 	.word	0x0800491d
 8004904:	08004925 	.word	0x08004925
 8004908:	0800492d 	.word	0x0800492d
 800490c:	08004935 	.word	0x08004935
 8004910:	0800493d 	.word	0x0800493d
 8004914:	2300      	movs	r3, #0
 8004916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800491a:	e2f0      	b.n	8004efe <UART_SetConfig+0x7ae>
 800491c:	2304      	movs	r3, #4
 800491e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004922:	e2ec      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004924:	2308      	movs	r3, #8
 8004926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800492a:	e2e8      	b.n	8004efe <UART_SetConfig+0x7ae>
 800492c:	2310      	movs	r3, #16
 800492e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004932:	e2e4      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004934:	2320      	movs	r3, #32
 8004936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800493a:	e2e0      	b.n	8004efe <UART_SetConfig+0x7ae>
 800493c:	2340      	movs	r3, #64	; 0x40
 800493e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004942:	e2dc      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004944:	2380      	movs	r3, #128	; 0x80
 8004946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800494a:	e2d8      	b.n	8004efe <UART_SetConfig+0x7ae>
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a4f      	ldr	r2, [pc, #316]	; (8004a90 <UART_SetConfig+0x340>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d130      	bne.n	80049b8 <UART_SetConfig+0x268>
 8004956:	4b4c      	ldr	r3, [pc, #304]	; (8004a88 <UART_SetConfig+0x338>)
 8004958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495a:	f003 0307 	and.w	r3, r3, #7
 800495e:	2b05      	cmp	r3, #5
 8004960:	d826      	bhi.n	80049b0 <UART_SetConfig+0x260>
 8004962:	a201      	add	r2, pc, #4	; (adr r2, 8004968 <UART_SetConfig+0x218>)
 8004964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004968:	08004981 	.word	0x08004981
 800496c:	08004989 	.word	0x08004989
 8004970:	08004991 	.word	0x08004991
 8004974:	08004999 	.word	0x08004999
 8004978:	080049a1 	.word	0x080049a1
 800497c:	080049a9 	.word	0x080049a9
 8004980:	2300      	movs	r3, #0
 8004982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004986:	e2ba      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004988:	2304      	movs	r3, #4
 800498a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800498e:	e2b6      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004990:	2308      	movs	r3, #8
 8004992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004996:	e2b2      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004998:	2310      	movs	r3, #16
 800499a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800499e:	e2ae      	b.n	8004efe <UART_SetConfig+0x7ae>
 80049a0:	2320      	movs	r3, #32
 80049a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049a6:	e2aa      	b.n	8004efe <UART_SetConfig+0x7ae>
 80049a8:	2340      	movs	r3, #64	; 0x40
 80049aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049ae:	e2a6      	b.n	8004efe <UART_SetConfig+0x7ae>
 80049b0:	2380      	movs	r3, #128	; 0x80
 80049b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049b6:	e2a2      	b.n	8004efe <UART_SetConfig+0x7ae>
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a35      	ldr	r2, [pc, #212]	; (8004a94 <UART_SetConfig+0x344>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d130      	bne.n	8004a24 <UART_SetConfig+0x2d4>
 80049c2:	4b31      	ldr	r3, [pc, #196]	; (8004a88 <UART_SetConfig+0x338>)
 80049c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	2b05      	cmp	r3, #5
 80049cc:	d826      	bhi.n	8004a1c <UART_SetConfig+0x2cc>
 80049ce:	a201      	add	r2, pc, #4	; (adr r2, 80049d4 <UART_SetConfig+0x284>)
 80049d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d4:	080049ed 	.word	0x080049ed
 80049d8:	080049f5 	.word	0x080049f5
 80049dc:	080049fd 	.word	0x080049fd
 80049e0:	08004a05 	.word	0x08004a05
 80049e4:	08004a0d 	.word	0x08004a0d
 80049e8:	08004a15 	.word	0x08004a15
 80049ec:	2300      	movs	r3, #0
 80049ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049f2:	e284      	b.n	8004efe <UART_SetConfig+0x7ae>
 80049f4:	2304      	movs	r3, #4
 80049f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049fa:	e280      	b.n	8004efe <UART_SetConfig+0x7ae>
 80049fc:	2308      	movs	r3, #8
 80049fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a02:	e27c      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004a04:	2310      	movs	r3, #16
 8004a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a0a:	e278      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004a0c:	2320      	movs	r3, #32
 8004a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a12:	e274      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004a14:	2340      	movs	r3, #64	; 0x40
 8004a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a1a:	e270      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004a1c:	2380      	movs	r3, #128	; 0x80
 8004a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a22:	e26c      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a1b      	ldr	r2, [pc, #108]	; (8004a98 <UART_SetConfig+0x348>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d142      	bne.n	8004ab4 <UART_SetConfig+0x364>
 8004a2e:	4b16      	ldr	r3, [pc, #88]	; (8004a88 <UART_SetConfig+0x338>)
 8004a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a32:	f003 0307 	and.w	r3, r3, #7
 8004a36:	2b05      	cmp	r3, #5
 8004a38:	d838      	bhi.n	8004aac <UART_SetConfig+0x35c>
 8004a3a:	a201      	add	r2, pc, #4	; (adr r2, 8004a40 <UART_SetConfig+0x2f0>)
 8004a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a40:	08004a59 	.word	0x08004a59
 8004a44:	08004a61 	.word	0x08004a61
 8004a48:	08004a69 	.word	0x08004a69
 8004a4c:	08004a71 	.word	0x08004a71
 8004a50:	08004a9d 	.word	0x08004a9d
 8004a54:	08004aa5 	.word	0x08004aa5
 8004a58:	2300      	movs	r3, #0
 8004a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a5e:	e24e      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004a60:	2304      	movs	r3, #4
 8004a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a66:	e24a      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004a68:	2308      	movs	r3, #8
 8004a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a6e:	e246      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004a70:	2310      	movs	r3, #16
 8004a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a76:	e242      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004a78:	cfff69f3 	.word	0xcfff69f3
 8004a7c:	58000c00 	.word	0x58000c00
 8004a80:	11fff4ff 	.word	0x11fff4ff
 8004a84:	40011000 	.word	0x40011000
 8004a88:	58024400 	.word	0x58024400
 8004a8c:	40004400 	.word	0x40004400
 8004a90:	40004800 	.word	0x40004800
 8004a94:	40004c00 	.word	0x40004c00
 8004a98:	40005000 	.word	0x40005000
 8004a9c:	2320      	movs	r3, #32
 8004a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aa2:	e22c      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004aa4:	2340      	movs	r3, #64	; 0x40
 8004aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aaa:	e228      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004aac:	2380      	movs	r3, #128	; 0x80
 8004aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ab2:	e224      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4ab1      	ldr	r2, [pc, #708]	; (8004d80 <UART_SetConfig+0x630>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d176      	bne.n	8004bac <UART_SetConfig+0x45c>
 8004abe:	4bb1      	ldr	r3, [pc, #708]	; (8004d84 <UART_SetConfig+0x634>)
 8004ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ac6:	2b28      	cmp	r3, #40	; 0x28
 8004ac8:	d86c      	bhi.n	8004ba4 <UART_SetConfig+0x454>
 8004aca:	a201      	add	r2, pc, #4	; (adr r2, 8004ad0 <UART_SetConfig+0x380>)
 8004acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad0:	08004b75 	.word	0x08004b75
 8004ad4:	08004ba5 	.word	0x08004ba5
 8004ad8:	08004ba5 	.word	0x08004ba5
 8004adc:	08004ba5 	.word	0x08004ba5
 8004ae0:	08004ba5 	.word	0x08004ba5
 8004ae4:	08004ba5 	.word	0x08004ba5
 8004ae8:	08004ba5 	.word	0x08004ba5
 8004aec:	08004ba5 	.word	0x08004ba5
 8004af0:	08004b7d 	.word	0x08004b7d
 8004af4:	08004ba5 	.word	0x08004ba5
 8004af8:	08004ba5 	.word	0x08004ba5
 8004afc:	08004ba5 	.word	0x08004ba5
 8004b00:	08004ba5 	.word	0x08004ba5
 8004b04:	08004ba5 	.word	0x08004ba5
 8004b08:	08004ba5 	.word	0x08004ba5
 8004b0c:	08004ba5 	.word	0x08004ba5
 8004b10:	08004b85 	.word	0x08004b85
 8004b14:	08004ba5 	.word	0x08004ba5
 8004b18:	08004ba5 	.word	0x08004ba5
 8004b1c:	08004ba5 	.word	0x08004ba5
 8004b20:	08004ba5 	.word	0x08004ba5
 8004b24:	08004ba5 	.word	0x08004ba5
 8004b28:	08004ba5 	.word	0x08004ba5
 8004b2c:	08004ba5 	.word	0x08004ba5
 8004b30:	08004b8d 	.word	0x08004b8d
 8004b34:	08004ba5 	.word	0x08004ba5
 8004b38:	08004ba5 	.word	0x08004ba5
 8004b3c:	08004ba5 	.word	0x08004ba5
 8004b40:	08004ba5 	.word	0x08004ba5
 8004b44:	08004ba5 	.word	0x08004ba5
 8004b48:	08004ba5 	.word	0x08004ba5
 8004b4c:	08004ba5 	.word	0x08004ba5
 8004b50:	08004b95 	.word	0x08004b95
 8004b54:	08004ba5 	.word	0x08004ba5
 8004b58:	08004ba5 	.word	0x08004ba5
 8004b5c:	08004ba5 	.word	0x08004ba5
 8004b60:	08004ba5 	.word	0x08004ba5
 8004b64:	08004ba5 	.word	0x08004ba5
 8004b68:	08004ba5 	.word	0x08004ba5
 8004b6c:	08004ba5 	.word	0x08004ba5
 8004b70:	08004b9d 	.word	0x08004b9d
 8004b74:	2301      	movs	r3, #1
 8004b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b7a:	e1c0      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004b7c:	2304      	movs	r3, #4
 8004b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b82:	e1bc      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004b84:	2308      	movs	r3, #8
 8004b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b8a:	e1b8      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004b8c:	2310      	movs	r3, #16
 8004b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b92:	e1b4      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004b94:	2320      	movs	r3, #32
 8004b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b9a:	e1b0      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004b9c:	2340      	movs	r3, #64	; 0x40
 8004b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ba2:	e1ac      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004ba4:	2380      	movs	r3, #128	; 0x80
 8004ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004baa:	e1a8      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a75      	ldr	r2, [pc, #468]	; (8004d88 <UART_SetConfig+0x638>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d130      	bne.n	8004c18 <UART_SetConfig+0x4c8>
 8004bb6:	4b73      	ldr	r3, [pc, #460]	; (8004d84 <UART_SetConfig+0x634>)
 8004bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	2b05      	cmp	r3, #5
 8004bc0:	d826      	bhi.n	8004c10 <UART_SetConfig+0x4c0>
 8004bc2:	a201      	add	r2, pc, #4	; (adr r2, 8004bc8 <UART_SetConfig+0x478>)
 8004bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc8:	08004be1 	.word	0x08004be1
 8004bcc:	08004be9 	.word	0x08004be9
 8004bd0:	08004bf1 	.word	0x08004bf1
 8004bd4:	08004bf9 	.word	0x08004bf9
 8004bd8:	08004c01 	.word	0x08004c01
 8004bdc:	08004c09 	.word	0x08004c09
 8004be0:	2300      	movs	r3, #0
 8004be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004be6:	e18a      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004be8:	2304      	movs	r3, #4
 8004bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bee:	e186      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004bf0:	2308      	movs	r3, #8
 8004bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bf6:	e182      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004bf8:	2310      	movs	r3, #16
 8004bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bfe:	e17e      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004c00:	2320      	movs	r3, #32
 8004c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c06:	e17a      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004c08:	2340      	movs	r3, #64	; 0x40
 8004c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c0e:	e176      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004c10:	2380      	movs	r3, #128	; 0x80
 8004c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c16:	e172      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a5b      	ldr	r2, [pc, #364]	; (8004d8c <UART_SetConfig+0x63c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d130      	bne.n	8004c84 <UART_SetConfig+0x534>
 8004c22:	4b58      	ldr	r3, [pc, #352]	; (8004d84 <UART_SetConfig+0x634>)
 8004c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c26:	f003 0307 	and.w	r3, r3, #7
 8004c2a:	2b05      	cmp	r3, #5
 8004c2c:	d826      	bhi.n	8004c7c <UART_SetConfig+0x52c>
 8004c2e:	a201      	add	r2, pc, #4	; (adr r2, 8004c34 <UART_SetConfig+0x4e4>)
 8004c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c34:	08004c4d 	.word	0x08004c4d
 8004c38:	08004c55 	.word	0x08004c55
 8004c3c:	08004c5d 	.word	0x08004c5d
 8004c40:	08004c65 	.word	0x08004c65
 8004c44:	08004c6d 	.word	0x08004c6d
 8004c48:	08004c75 	.word	0x08004c75
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c52:	e154      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004c54:	2304      	movs	r3, #4
 8004c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c5a:	e150      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004c5c:	2308      	movs	r3, #8
 8004c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c62:	e14c      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004c64:	2310      	movs	r3, #16
 8004c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c6a:	e148      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004c6c:	2320      	movs	r3, #32
 8004c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c72:	e144      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004c74:	2340      	movs	r3, #64	; 0x40
 8004c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c7a:	e140      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004c7c:	2380      	movs	r3, #128	; 0x80
 8004c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c82:	e13c      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a41      	ldr	r2, [pc, #260]	; (8004d90 <UART_SetConfig+0x640>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	f040 8082 	bne.w	8004d94 <UART_SetConfig+0x644>
 8004c90:	4b3c      	ldr	r3, [pc, #240]	; (8004d84 <UART_SetConfig+0x634>)
 8004c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c98:	2b28      	cmp	r3, #40	; 0x28
 8004c9a:	d86d      	bhi.n	8004d78 <UART_SetConfig+0x628>
 8004c9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ca4 <UART_SetConfig+0x554>)
 8004c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca2:	bf00      	nop
 8004ca4:	08004d49 	.word	0x08004d49
 8004ca8:	08004d79 	.word	0x08004d79
 8004cac:	08004d79 	.word	0x08004d79
 8004cb0:	08004d79 	.word	0x08004d79
 8004cb4:	08004d79 	.word	0x08004d79
 8004cb8:	08004d79 	.word	0x08004d79
 8004cbc:	08004d79 	.word	0x08004d79
 8004cc0:	08004d79 	.word	0x08004d79
 8004cc4:	08004d51 	.word	0x08004d51
 8004cc8:	08004d79 	.word	0x08004d79
 8004ccc:	08004d79 	.word	0x08004d79
 8004cd0:	08004d79 	.word	0x08004d79
 8004cd4:	08004d79 	.word	0x08004d79
 8004cd8:	08004d79 	.word	0x08004d79
 8004cdc:	08004d79 	.word	0x08004d79
 8004ce0:	08004d79 	.word	0x08004d79
 8004ce4:	08004d59 	.word	0x08004d59
 8004ce8:	08004d79 	.word	0x08004d79
 8004cec:	08004d79 	.word	0x08004d79
 8004cf0:	08004d79 	.word	0x08004d79
 8004cf4:	08004d79 	.word	0x08004d79
 8004cf8:	08004d79 	.word	0x08004d79
 8004cfc:	08004d79 	.word	0x08004d79
 8004d00:	08004d79 	.word	0x08004d79
 8004d04:	08004d61 	.word	0x08004d61
 8004d08:	08004d79 	.word	0x08004d79
 8004d0c:	08004d79 	.word	0x08004d79
 8004d10:	08004d79 	.word	0x08004d79
 8004d14:	08004d79 	.word	0x08004d79
 8004d18:	08004d79 	.word	0x08004d79
 8004d1c:	08004d79 	.word	0x08004d79
 8004d20:	08004d79 	.word	0x08004d79
 8004d24:	08004d69 	.word	0x08004d69
 8004d28:	08004d79 	.word	0x08004d79
 8004d2c:	08004d79 	.word	0x08004d79
 8004d30:	08004d79 	.word	0x08004d79
 8004d34:	08004d79 	.word	0x08004d79
 8004d38:	08004d79 	.word	0x08004d79
 8004d3c:	08004d79 	.word	0x08004d79
 8004d40:	08004d79 	.word	0x08004d79
 8004d44:	08004d71 	.word	0x08004d71
 8004d48:	2301      	movs	r3, #1
 8004d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d4e:	e0d6      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004d50:	2304      	movs	r3, #4
 8004d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d56:	e0d2      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004d58:	2308      	movs	r3, #8
 8004d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d5e:	e0ce      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004d60:	2310      	movs	r3, #16
 8004d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d66:	e0ca      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004d68:	2320      	movs	r3, #32
 8004d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d6e:	e0c6      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004d70:	2340      	movs	r3, #64	; 0x40
 8004d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d76:	e0c2      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004d78:	2380      	movs	r3, #128	; 0x80
 8004d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d7e:	e0be      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004d80:	40011400 	.word	0x40011400
 8004d84:	58024400 	.word	0x58024400
 8004d88:	40007800 	.word	0x40007800
 8004d8c:	40007c00 	.word	0x40007c00
 8004d90:	40011800 	.word	0x40011800
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4aad      	ldr	r2, [pc, #692]	; (8005050 <UART_SetConfig+0x900>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d176      	bne.n	8004e8c <UART_SetConfig+0x73c>
 8004d9e:	4bad      	ldr	r3, [pc, #692]	; (8005054 <UART_SetConfig+0x904>)
 8004da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004da6:	2b28      	cmp	r3, #40	; 0x28
 8004da8:	d86c      	bhi.n	8004e84 <UART_SetConfig+0x734>
 8004daa:	a201      	add	r2, pc, #4	; (adr r2, 8004db0 <UART_SetConfig+0x660>)
 8004dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db0:	08004e55 	.word	0x08004e55
 8004db4:	08004e85 	.word	0x08004e85
 8004db8:	08004e85 	.word	0x08004e85
 8004dbc:	08004e85 	.word	0x08004e85
 8004dc0:	08004e85 	.word	0x08004e85
 8004dc4:	08004e85 	.word	0x08004e85
 8004dc8:	08004e85 	.word	0x08004e85
 8004dcc:	08004e85 	.word	0x08004e85
 8004dd0:	08004e5d 	.word	0x08004e5d
 8004dd4:	08004e85 	.word	0x08004e85
 8004dd8:	08004e85 	.word	0x08004e85
 8004ddc:	08004e85 	.word	0x08004e85
 8004de0:	08004e85 	.word	0x08004e85
 8004de4:	08004e85 	.word	0x08004e85
 8004de8:	08004e85 	.word	0x08004e85
 8004dec:	08004e85 	.word	0x08004e85
 8004df0:	08004e65 	.word	0x08004e65
 8004df4:	08004e85 	.word	0x08004e85
 8004df8:	08004e85 	.word	0x08004e85
 8004dfc:	08004e85 	.word	0x08004e85
 8004e00:	08004e85 	.word	0x08004e85
 8004e04:	08004e85 	.word	0x08004e85
 8004e08:	08004e85 	.word	0x08004e85
 8004e0c:	08004e85 	.word	0x08004e85
 8004e10:	08004e6d 	.word	0x08004e6d
 8004e14:	08004e85 	.word	0x08004e85
 8004e18:	08004e85 	.word	0x08004e85
 8004e1c:	08004e85 	.word	0x08004e85
 8004e20:	08004e85 	.word	0x08004e85
 8004e24:	08004e85 	.word	0x08004e85
 8004e28:	08004e85 	.word	0x08004e85
 8004e2c:	08004e85 	.word	0x08004e85
 8004e30:	08004e75 	.word	0x08004e75
 8004e34:	08004e85 	.word	0x08004e85
 8004e38:	08004e85 	.word	0x08004e85
 8004e3c:	08004e85 	.word	0x08004e85
 8004e40:	08004e85 	.word	0x08004e85
 8004e44:	08004e85 	.word	0x08004e85
 8004e48:	08004e85 	.word	0x08004e85
 8004e4c:	08004e85 	.word	0x08004e85
 8004e50:	08004e7d 	.word	0x08004e7d
 8004e54:	2301      	movs	r3, #1
 8004e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e5a:	e050      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004e5c:	2304      	movs	r3, #4
 8004e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e62:	e04c      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004e64:	2308      	movs	r3, #8
 8004e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e6a:	e048      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004e6c:	2310      	movs	r3, #16
 8004e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e72:	e044      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004e74:	2320      	movs	r3, #32
 8004e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e7a:	e040      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004e7c:	2340      	movs	r3, #64	; 0x40
 8004e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e82:	e03c      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004e84:	2380      	movs	r3, #128	; 0x80
 8004e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e8a:	e038      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a71      	ldr	r2, [pc, #452]	; (8005058 <UART_SetConfig+0x908>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d130      	bne.n	8004ef8 <UART_SetConfig+0x7a8>
 8004e96:	4b6f      	ldr	r3, [pc, #444]	; (8005054 <UART_SetConfig+0x904>)
 8004e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9a:	f003 0307 	and.w	r3, r3, #7
 8004e9e:	2b05      	cmp	r3, #5
 8004ea0:	d826      	bhi.n	8004ef0 <UART_SetConfig+0x7a0>
 8004ea2:	a201      	add	r2, pc, #4	; (adr r2, 8004ea8 <UART_SetConfig+0x758>)
 8004ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea8:	08004ec1 	.word	0x08004ec1
 8004eac:	08004ec9 	.word	0x08004ec9
 8004eb0:	08004ed1 	.word	0x08004ed1
 8004eb4:	08004ed9 	.word	0x08004ed9
 8004eb8:	08004ee1 	.word	0x08004ee1
 8004ebc:	08004ee9 	.word	0x08004ee9
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ec6:	e01a      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004ec8:	2304      	movs	r3, #4
 8004eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ece:	e016      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004ed0:	2308      	movs	r3, #8
 8004ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ed6:	e012      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004ed8:	2310      	movs	r3, #16
 8004eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ede:	e00e      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004ee0:	2320      	movs	r3, #32
 8004ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ee6:	e00a      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004ee8:	2340      	movs	r3, #64	; 0x40
 8004eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eee:	e006      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004ef0:	2380      	movs	r3, #128	; 0x80
 8004ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ef6:	e002      	b.n	8004efe <UART_SetConfig+0x7ae>
 8004ef8:	2380      	movs	r3, #128	; 0x80
 8004efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a55      	ldr	r2, [pc, #340]	; (8005058 <UART_SetConfig+0x908>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	f040 80f8 	bne.w	80050fa <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f0a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004f0e:	2b20      	cmp	r3, #32
 8004f10:	dc46      	bgt.n	8004fa0 <UART_SetConfig+0x850>
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	db75      	blt.n	8005002 <UART_SetConfig+0x8b2>
 8004f16:	3b02      	subs	r3, #2
 8004f18:	2b1e      	cmp	r3, #30
 8004f1a:	d872      	bhi.n	8005002 <UART_SetConfig+0x8b2>
 8004f1c:	a201      	add	r2, pc, #4	; (adr r2, 8004f24 <UART_SetConfig+0x7d4>)
 8004f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f22:	bf00      	nop
 8004f24:	08004fa7 	.word	0x08004fa7
 8004f28:	08005003 	.word	0x08005003
 8004f2c:	08004faf 	.word	0x08004faf
 8004f30:	08005003 	.word	0x08005003
 8004f34:	08005003 	.word	0x08005003
 8004f38:	08005003 	.word	0x08005003
 8004f3c:	08004fbf 	.word	0x08004fbf
 8004f40:	08005003 	.word	0x08005003
 8004f44:	08005003 	.word	0x08005003
 8004f48:	08005003 	.word	0x08005003
 8004f4c:	08005003 	.word	0x08005003
 8004f50:	08005003 	.word	0x08005003
 8004f54:	08005003 	.word	0x08005003
 8004f58:	08005003 	.word	0x08005003
 8004f5c:	08004fcf 	.word	0x08004fcf
 8004f60:	08005003 	.word	0x08005003
 8004f64:	08005003 	.word	0x08005003
 8004f68:	08005003 	.word	0x08005003
 8004f6c:	08005003 	.word	0x08005003
 8004f70:	08005003 	.word	0x08005003
 8004f74:	08005003 	.word	0x08005003
 8004f78:	08005003 	.word	0x08005003
 8004f7c:	08005003 	.word	0x08005003
 8004f80:	08005003 	.word	0x08005003
 8004f84:	08005003 	.word	0x08005003
 8004f88:	08005003 	.word	0x08005003
 8004f8c:	08005003 	.word	0x08005003
 8004f90:	08005003 	.word	0x08005003
 8004f94:	08005003 	.word	0x08005003
 8004f98:	08005003 	.word	0x08005003
 8004f9c:	08004ff5 	.word	0x08004ff5
 8004fa0:	2b40      	cmp	r3, #64	; 0x40
 8004fa2:	d02a      	beq.n	8004ffa <UART_SetConfig+0x8aa>
 8004fa4:	e02d      	b.n	8005002 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004fa6:	f7fe fecb 	bl	8003d40 <HAL_RCCEx_GetD3PCLK1Freq>
 8004faa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004fac:	e02f      	b.n	800500e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7fe feda 	bl	8003d6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fbc:	e027      	b.n	800500e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004fbe:	f107 0318 	add.w	r3, r7, #24
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7ff f826 	bl	8004014 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fcc:	e01f      	b.n	800500e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fce:	4b21      	ldr	r3, [pc, #132]	; (8005054 <UART_SetConfig+0x904>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0320 	and.w	r3, r3, #32
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d009      	beq.n	8004fee <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004fda:	4b1e      	ldr	r3, [pc, #120]	; (8005054 <UART_SetConfig+0x904>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	08db      	lsrs	r3, r3, #3
 8004fe0:	f003 0303 	and.w	r3, r3, #3
 8004fe4:	4a1d      	ldr	r2, [pc, #116]	; (800505c <UART_SetConfig+0x90c>)
 8004fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8004fea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004fec:	e00f      	b.n	800500e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004fee:	4b1b      	ldr	r3, [pc, #108]	; (800505c <UART_SetConfig+0x90c>)
 8004ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ff2:	e00c      	b.n	800500e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004ff4:	4b1a      	ldr	r3, [pc, #104]	; (8005060 <UART_SetConfig+0x910>)
 8004ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ff8:	e009      	b.n	800500e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005000:	e005      	b.n	800500e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005002:	2300      	movs	r3, #0
 8005004:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800500c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800500e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 81ee 	beq.w	80053f2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	4a12      	ldr	r2, [pc, #72]	; (8005064 <UART_SetConfig+0x914>)
 800501c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005020:	461a      	mov	r2, r3
 8005022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005024:	fbb3 f3f2 	udiv	r3, r3, r2
 8005028:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	4613      	mov	r3, r2
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	4413      	add	r3, r2
 8005034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005036:	429a      	cmp	r2, r3
 8005038:	d305      	bcc.n	8005046 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005042:	429a      	cmp	r2, r3
 8005044:	d910      	bls.n	8005068 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800504c:	e1d1      	b.n	80053f2 <UART_SetConfig+0xca2>
 800504e:	bf00      	nop
 8005050:	40011c00 	.word	0x40011c00
 8005054:	58024400 	.word	0x58024400
 8005058:	58000c00 	.word	0x58000c00
 800505c:	03d09000 	.word	0x03d09000
 8005060:	003d0900 	.word	0x003d0900
 8005064:	0800766c 	.word	0x0800766c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800506a:	2200      	movs	r2, #0
 800506c:	60bb      	str	r3, [r7, #8]
 800506e:	60fa      	str	r2, [r7, #12]
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005074:	4ac0      	ldr	r2, [pc, #768]	; (8005378 <UART_SetConfig+0xc28>)
 8005076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800507a:	b29b      	uxth	r3, r3
 800507c:	2200      	movs	r2, #0
 800507e:	603b      	str	r3, [r7, #0]
 8005080:	607a      	str	r2, [r7, #4]
 8005082:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005086:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800508a:	f7fb f999 	bl	80003c0 <__aeabi_uldivmod>
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	4610      	mov	r0, r2
 8005094:	4619      	mov	r1, r3
 8005096:	f04f 0200 	mov.w	r2, #0
 800509a:	f04f 0300 	mov.w	r3, #0
 800509e:	020b      	lsls	r3, r1, #8
 80050a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80050a4:	0202      	lsls	r2, r0, #8
 80050a6:	6979      	ldr	r1, [r7, #20]
 80050a8:	6849      	ldr	r1, [r1, #4]
 80050aa:	0849      	lsrs	r1, r1, #1
 80050ac:	2000      	movs	r0, #0
 80050ae:	460c      	mov	r4, r1
 80050b0:	4605      	mov	r5, r0
 80050b2:	eb12 0804 	adds.w	r8, r2, r4
 80050b6:	eb43 0905 	adc.w	r9, r3, r5
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	469a      	mov	sl, r3
 80050c2:	4693      	mov	fp, r2
 80050c4:	4652      	mov	r2, sl
 80050c6:	465b      	mov	r3, fp
 80050c8:	4640      	mov	r0, r8
 80050ca:	4649      	mov	r1, r9
 80050cc:	f7fb f978 	bl	80003c0 <__aeabi_uldivmod>
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	4613      	mov	r3, r2
 80050d6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050de:	d308      	bcc.n	80050f2 <UART_SetConfig+0x9a2>
 80050e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050e6:	d204      	bcs.n	80050f2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050ee:	60da      	str	r2, [r3, #12]
 80050f0:	e17f      	b.n	80053f2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80050f8:	e17b      	b.n	80053f2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005102:	f040 80bd 	bne.w	8005280 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005106:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800510a:	2b20      	cmp	r3, #32
 800510c:	dc48      	bgt.n	80051a0 <UART_SetConfig+0xa50>
 800510e:	2b00      	cmp	r3, #0
 8005110:	db7b      	blt.n	800520a <UART_SetConfig+0xaba>
 8005112:	2b20      	cmp	r3, #32
 8005114:	d879      	bhi.n	800520a <UART_SetConfig+0xaba>
 8005116:	a201      	add	r2, pc, #4	; (adr r2, 800511c <UART_SetConfig+0x9cc>)
 8005118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511c:	080051a7 	.word	0x080051a7
 8005120:	080051af 	.word	0x080051af
 8005124:	0800520b 	.word	0x0800520b
 8005128:	0800520b 	.word	0x0800520b
 800512c:	080051b7 	.word	0x080051b7
 8005130:	0800520b 	.word	0x0800520b
 8005134:	0800520b 	.word	0x0800520b
 8005138:	0800520b 	.word	0x0800520b
 800513c:	080051c7 	.word	0x080051c7
 8005140:	0800520b 	.word	0x0800520b
 8005144:	0800520b 	.word	0x0800520b
 8005148:	0800520b 	.word	0x0800520b
 800514c:	0800520b 	.word	0x0800520b
 8005150:	0800520b 	.word	0x0800520b
 8005154:	0800520b 	.word	0x0800520b
 8005158:	0800520b 	.word	0x0800520b
 800515c:	080051d7 	.word	0x080051d7
 8005160:	0800520b 	.word	0x0800520b
 8005164:	0800520b 	.word	0x0800520b
 8005168:	0800520b 	.word	0x0800520b
 800516c:	0800520b 	.word	0x0800520b
 8005170:	0800520b 	.word	0x0800520b
 8005174:	0800520b 	.word	0x0800520b
 8005178:	0800520b 	.word	0x0800520b
 800517c:	0800520b 	.word	0x0800520b
 8005180:	0800520b 	.word	0x0800520b
 8005184:	0800520b 	.word	0x0800520b
 8005188:	0800520b 	.word	0x0800520b
 800518c:	0800520b 	.word	0x0800520b
 8005190:	0800520b 	.word	0x0800520b
 8005194:	0800520b 	.word	0x0800520b
 8005198:	0800520b 	.word	0x0800520b
 800519c:	080051fd 	.word	0x080051fd
 80051a0:	2b40      	cmp	r3, #64	; 0x40
 80051a2:	d02e      	beq.n	8005202 <UART_SetConfig+0xab2>
 80051a4:	e031      	b.n	800520a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051a6:	f7fd fea5 	bl	8002ef4 <HAL_RCC_GetPCLK1Freq>
 80051aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80051ac:	e033      	b.n	8005216 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051ae:	f7fd feb7 	bl	8002f20 <HAL_RCC_GetPCLK2Freq>
 80051b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80051b4:	e02f      	b.n	8005216 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fe fdd6 	bl	8003d6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80051c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051c4:	e027      	b.n	8005216 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051c6:	f107 0318 	add.w	r3, r7, #24
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7fe ff22 	bl	8004014 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051d4:	e01f      	b.n	8005216 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051d6:	4b69      	ldr	r3, [pc, #420]	; (800537c <UART_SetConfig+0xc2c>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0320 	and.w	r3, r3, #32
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d009      	beq.n	80051f6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80051e2:	4b66      	ldr	r3, [pc, #408]	; (800537c <UART_SetConfig+0xc2c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	08db      	lsrs	r3, r3, #3
 80051e8:	f003 0303 	and.w	r3, r3, #3
 80051ec:	4a64      	ldr	r2, [pc, #400]	; (8005380 <UART_SetConfig+0xc30>)
 80051ee:	fa22 f303 	lsr.w	r3, r2, r3
 80051f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80051f4:	e00f      	b.n	8005216 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80051f6:	4b62      	ldr	r3, [pc, #392]	; (8005380 <UART_SetConfig+0xc30>)
 80051f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051fa:	e00c      	b.n	8005216 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80051fc:	4b61      	ldr	r3, [pc, #388]	; (8005384 <UART_SetConfig+0xc34>)
 80051fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005200:	e009      	b.n	8005216 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005206:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005208:	e005      	b.n	8005216 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800520a:	2300      	movs	r3, #0
 800520c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005214:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 80ea 	beq.w	80053f2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005222:	4a55      	ldr	r2, [pc, #340]	; (8005378 <UART_SetConfig+0xc28>)
 8005224:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005228:	461a      	mov	r2, r3
 800522a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800522c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005230:	005a      	lsls	r2, r3, #1
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	085b      	lsrs	r3, r3, #1
 8005238:	441a      	add	r2, r3
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005242:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005246:	2b0f      	cmp	r3, #15
 8005248:	d916      	bls.n	8005278 <UART_SetConfig+0xb28>
 800524a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005250:	d212      	bcs.n	8005278 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005254:	b29b      	uxth	r3, r3
 8005256:	f023 030f 	bic.w	r3, r3, #15
 800525a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800525c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525e:	085b      	lsrs	r3, r3, #1
 8005260:	b29b      	uxth	r3, r3
 8005262:	f003 0307 	and.w	r3, r3, #7
 8005266:	b29a      	uxth	r2, r3
 8005268:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800526a:	4313      	orrs	r3, r2
 800526c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005274:	60da      	str	r2, [r3, #12]
 8005276:	e0bc      	b.n	80053f2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800527e:	e0b8      	b.n	80053f2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005280:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005284:	2b20      	cmp	r3, #32
 8005286:	dc4b      	bgt.n	8005320 <UART_SetConfig+0xbd0>
 8005288:	2b00      	cmp	r3, #0
 800528a:	f2c0 8087 	blt.w	800539c <UART_SetConfig+0xc4c>
 800528e:	2b20      	cmp	r3, #32
 8005290:	f200 8084 	bhi.w	800539c <UART_SetConfig+0xc4c>
 8005294:	a201      	add	r2, pc, #4	; (adr r2, 800529c <UART_SetConfig+0xb4c>)
 8005296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529a:	bf00      	nop
 800529c:	08005327 	.word	0x08005327
 80052a0:	0800532f 	.word	0x0800532f
 80052a4:	0800539d 	.word	0x0800539d
 80052a8:	0800539d 	.word	0x0800539d
 80052ac:	08005337 	.word	0x08005337
 80052b0:	0800539d 	.word	0x0800539d
 80052b4:	0800539d 	.word	0x0800539d
 80052b8:	0800539d 	.word	0x0800539d
 80052bc:	08005347 	.word	0x08005347
 80052c0:	0800539d 	.word	0x0800539d
 80052c4:	0800539d 	.word	0x0800539d
 80052c8:	0800539d 	.word	0x0800539d
 80052cc:	0800539d 	.word	0x0800539d
 80052d0:	0800539d 	.word	0x0800539d
 80052d4:	0800539d 	.word	0x0800539d
 80052d8:	0800539d 	.word	0x0800539d
 80052dc:	08005357 	.word	0x08005357
 80052e0:	0800539d 	.word	0x0800539d
 80052e4:	0800539d 	.word	0x0800539d
 80052e8:	0800539d 	.word	0x0800539d
 80052ec:	0800539d 	.word	0x0800539d
 80052f0:	0800539d 	.word	0x0800539d
 80052f4:	0800539d 	.word	0x0800539d
 80052f8:	0800539d 	.word	0x0800539d
 80052fc:	0800539d 	.word	0x0800539d
 8005300:	0800539d 	.word	0x0800539d
 8005304:	0800539d 	.word	0x0800539d
 8005308:	0800539d 	.word	0x0800539d
 800530c:	0800539d 	.word	0x0800539d
 8005310:	0800539d 	.word	0x0800539d
 8005314:	0800539d 	.word	0x0800539d
 8005318:	0800539d 	.word	0x0800539d
 800531c:	0800538f 	.word	0x0800538f
 8005320:	2b40      	cmp	r3, #64	; 0x40
 8005322:	d037      	beq.n	8005394 <UART_SetConfig+0xc44>
 8005324:	e03a      	b.n	800539c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005326:	f7fd fde5 	bl	8002ef4 <HAL_RCC_GetPCLK1Freq>
 800532a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800532c:	e03c      	b.n	80053a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800532e:	f7fd fdf7 	bl	8002f20 <HAL_RCC_GetPCLK2Freq>
 8005332:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005334:	e038      	b.n	80053a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800533a:	4618      	mov	r0, r3
 800533c:	f7fe fd16 	bl	8003d6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005342:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005344:	e030      	b.n	80053a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005346:	f107 0318 	add.w	r3, r7, #24
 800534a:	4618      	mov	r0, r3
 800534c:	f7fe fe62 	bl	8004014 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005354:	e028      	b.n	80053a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005356:	4b09      	ldr	r3, [pc, #36]	; (800537c <UART_SetConfig+0xc2c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0320 	and.w	r3, r3, #32
 800535e:	2b00      	cmp	r3, #0
 8005360:	d012      	beq.n	8005388 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005362:	4b06      	ldr	r3, [pc, #24]	; (800537c <UART_SetConfig+0xc2c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	08db      	lsrs	r3, r3, #3
 8005368:	f003 0303 	and.w	r3, r3, #3
 800536c:	4a04      	ldr	r2, [pc, #16]	; (8005380 <UART_SetConfig+0xc30>)
 800536e:	fa22 f303 	lsr.w	r3, r2, r3
 8005372:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005374:	e018      	b.n	80053a8 <UART_SetConfig+0xc58>
 8005376:	bf00      	nop
 8005378:	0800766c 	.word	0x0800766c
 800537c:	58024400 	.word	0x58024400
 8005380:	03d09000 	.word	0x03d09000
 8005384:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005388:	4b24      	ldr	r3, [pc, #144]	; (800541c <UART_SetConfig+0xccc>)
 800538a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800538c:	e00c      	b.n	80053a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800538e:	4b24      	ldr	r3, [pc, #144]	; (8005420 <UART_SetConfig+0xcd0>)
 8005390:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005392:	e009      	b.n	80053a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005394:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005398:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800539a:	e005      	b.n	80053a8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800539c:	2300      	movs	r3, #0
 800539e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80053a6:	bf00      	nop
    }

    if (pclk != 0U)
 80053a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d021      	beq.n	80053f2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b2:	4a1c      	ldr	r2, [pc, #112]	; (8005424 <UART_SetConfig+0xcd4>)
 80053b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053b8:	461a      	mov	r2, r3
 80053ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053bc:	fbb3 f2f2 	udiv	r2, r3, r2
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	085b      	lsrs	r3, r3, #1
 80053c6:	441a      	add	r2, r3
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d4:	2b0f      	cmp	r3, #15
 80053d6:	d909      	bls.n	80053ec <UART_SetConfig+0xc9c>
 80053d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053de:	d205      	bcs.n	80053ec <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	60da      	str	r2, [r3, #12]
 80053ea:	e002      	b.n	80053f2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2200      	movs	r2, #0
 8005406:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	2200      	movs	r2, #0
 800540c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800540e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005412:	4618      	mov	r0, r3
 8005414:	3748      	adds	r7, #72	; 0x48
 8005416:	46bd      	mov	sp, r7
 8005418:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800541c:	03d09000 	.word	0x03d09000
 8005420:	003d0900 	.word	0x003d0900
 8005424:	0800766c 	.word	0x0800766c

08005428 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00a      	beq.n	8005452 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005456:	f003 0302 	and.w	r3, r3, #2
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00a      	beq.n	8005474 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00a      	beq.n	8005496 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549a:	f003 0308 	and.w	r3, r3, #8
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00a      	beq.n	80054b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054bc:	f003 0310 	and.w	r3, r3, #16
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00a      	beq.n	80054da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054de:	f003 0320 	and.w	r3, r3, #32
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005504:	2b00      	cmp	r3, #0
 8005506:	d01a      	beq.n	800553e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005522:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005526:	d10a      	bne.n	800553e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	430a      	orrs	r2, r1
 800555e:	605a      	str	r2, [r3, #4]
  }
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af02      	add	r7, sp, #8
 8005572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800557c:	f7fb fd12 	bl	8000fa4 <HAL_GetTick>
 8005580:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0308 	and.w	r3, r3, #8
 800558c:	2b08      	cmp	r3, #8
 800558e:	d10e      	bne.n	80055ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005590:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f82f 	bl	8005602 <UART_WaitOnFlagUntilTimeout>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e025      	b.n	80055fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0304 	and.w	r3, r3, #4
 80055b8:	2b04      	cmp	r3, #4
 80055ba:	d10e      	bne.n	80055da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f819 	bl	8005602 <UART_WaitOnFlagUntilTimeout>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e00f      	b.n	80055fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2220      	movs	r2, #32
 80055de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2220      	movs	r2, #32
 80055e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b09c      	sub	sp, #112	; 0x70
 8005606:	af00      	add	r7, sp, #0
 8005608:	60f8      	str	r0, [r7, #12]
 800560a:	60b9      	str	r1, [r7, #8]
 800560c:	603b      	str	r3, [r7, #0]
 800560e:	4613      	mov	r3, r2
 8005610:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005612:	e0a9      	b.n	8005768 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005614:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561a:	f000 80a5 	beq.w	8005768 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800561e:	f7fb fcc1 	bl	8000fa4 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800562a:	429a      	cmp	r2, r3
 800562c:	d302      	bcc.n	8005634 <UART_WaitOnFlagUntilTimeout+0x32>
 800562e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005630:	2b00      	cmp	r3, #0
 8005632:	d140      	bne.n	80056b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800563c:	e853 3f00 	ldrex	r3, [r3]
 8005640:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005644:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005648:	667b      	str	r3, [r7, #100]	; 0x64
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	461a      	mov	r2, r3
 8005650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005652:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005654:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005656:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005658:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800565a:	e841 2300 	strex	r3, r2, [r1]
 800565e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1e6      	bne.n	8005634 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	3308      	adds	r3, #8
 800566c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005670:	e853 3f00 	ldrex	r3, [r3]
 8005674:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005678:	f023 0301 	bic.w	r3, r3, #1
 800567c:	663b      	str	r3, [r7, #96]	; 0x60
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	3308      	adds	r3, #8
 8005684:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005686:	64ba      	str	r2, [r7, #72]	; 0x48
 8005688:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800568c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800568e:	e841 2300 	strex	r3, r2, [r1]
 8005692:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1e5      	bne.n	8005666 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2220      	movs	r2, #32
 800569e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2220      	movs	r2, #32
 80056a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e069      	b.n	800578a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0304 	and.w	r3, r3, #4
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d051      	beq.n	8005768 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	69db      	ldr	r3, [r3, #28]
 80056ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056d2:	d149      	bne.n	8005768 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056dc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e6:	e853 3f00 	ldrex	r3, [r3]
 80056ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	461a      	mov	r2, r3
 80056fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056fc:	637b      	str	r3, [r7, #52]	; 0x34
 80056fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005700:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005702:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005704:	e841 2300 	strex	r3, r2, [r1]
 8005708:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800570a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1e6      	bne.n	80056de <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3308      	adds	r3, #8
 8005716:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	e853 3f00 	ldrex	r3, [r3]
 800571e:	613b      	str	r3, [r7, #16]
   return(result);
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	f023 0301 	bic.w	r3, r3, #1
 8005726:	66bb      	str	r3, [r7, #104]	; 0x68
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	3308      	adds	r3, #8
 800572e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005730:	623a      	str	r2, [r7, #32]
 8005732:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005734:	69f9      	ldr	r1, [r7, #28]
 8005736:	6a3a      	ldr	r2, [r7, #32]
 8005738:	e841 2300 	strex	r3, r2, [r1]
 800573c:	61bb      	str	r3, [r7, #24]
   return(result);
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1e5      	bne.n	8005710 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2220      	movs	r2, #32
 8005748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2220      	movs	r2, #32
 8005750:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2220      	movs	r2, #32
 8005758:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e010      	b.n	800578a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	69da      	ldr	r2, [r3, #28]
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	4013      	ands	r3, r2
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	429a      	cmp	r2, r3
 8005776:	bf0c      	ite	eq
 8005778:	2301      	moveq	r3, #1
 800577a:	2300      	movne	r3, #0
 800577c:	b2db      	uxtb	r3, r3
 800577e:	461a      	mov	r2, r3
 8005780:	79fb      	ldrb	r3, [r7, #7]
 8005782:	429a      	cmp	r2, r3
 8005784:	f43f af46 	beq.w	8005614 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3770      	adds	r7, #112	; 0x70
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005792:	b480      	push	{r7}
 8005794:	b085      	sub	sp, #20
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d101      	bne.n	80057a8 <HAL_UARTEx_DisableFifoMode+0x16>
 80057a4:	2302      	movs	r3, #2
 80057a6:	e027      	b.n	80057f8 <HAL_UARTEx_DisableFifoMode+0x66>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2224      	movs	r2, #36	; 0x24
 80057b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 0201 	bic.w	r2, r2, #1
 80057ce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80057d6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2220      	movs	r2, #32
 80057ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005814:	2b01      	cmp	r3, #1
 8005816:	d101      	bne.n	800581c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005818:	2302      	movs	r3, #2
 800581a:	e02d      	b.n	8005878 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2224      	movs	r2, #36	; 0x24
 8005828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f022 0201 	bic.w	r2, r2, #1
 8005842:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 f84f 	bl	80058fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2220      	movs	r2, #32
 800586a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005890:	2b01      	cmp	r3, #1
 8005892:	d101      	bne.n	8005898 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005894:	2302      	movs	r3, #2
 8005896:	e02d      	b.n	80058f4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2224      	movs	r2, #36	; 0x24
 80058a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f022 0201 	bic.w	r2, r2, #1
 80058be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	683a      	ldr	r2, [r7, #0]
 80058d0:	430a      	orrs	r2, r1
 80058d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f811 	bl	80058fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2220      	movs	r2, #32
 80058e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005908:	2b00      	cmp	r3, #0
 800590a:	d108      	bne.n	800591e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800591c:	e031      	b.n	8005982 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800591e:	2310      	movs	r3, #16
 8005920:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005922:	2310      	movs	r3, #16
 8005924:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	0e5b      	lsrs	r3, r3, #25
 800592e:	b2db      	uxtb	r3, r3
 8005930:	f003 0307 	and.w	r3, r3, #7
 8005934:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	0f5b      	lsrs	r3, r3, #29
 800593e:	b2db      	uxtb	r3, r3
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005946:	7bbb      	ldrb	r3, [r7, #14]
 8005948:	7b3a      	ldrb	r2, [r7, #12]
 800594a:	4911      	ldr	r1, [pc, #68]	; (8005990 <UARTEx_SetNbDataToProcess+0x94>)
 800594c:	5c8a      	ldrb	r2, [r1, r2]
 800594e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005952:	7b3a      	ldrb	r2, [r7, #12]
 8005954:	490f      	ldr	r1, [pc, #60]	; (8005994 <UARTEx_SetNbDataToProcess+0x98>)
 8005956:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005958:	fb93 f3f2 	sdiv	r3, r3, r2
 800595c:	b29a      	uxth	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005964:	7bfb      	ldrb	r3, [r7, #15]
 8005966:	7b7a      	ldrb	r2, [r7, #13]
 8005968:	4909      	ldr	r1, [pc, #36]	; (8005990 <UARTEx_SetNbDataToProcess+0x94>)
 800596a:	5c8a      	ldrb	r2, [r1, r2]
 800596c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005970:	7b7a      	ldrb	r2, [r7, #13]
 8005972:	4908      	ldr	r1, [pc, #32]	; (8005994 <UARTEx_SetNbDataToProcess+0x98>)
 8005974:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005976:	fb93 f3f2 	sdiv	r3, r3, r2
 800597a:	b29a      	uxth	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005982:	bf00      	nop
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	08007684 	.word	0x08007684
 8005994:	0800768c 	.word	0x0800768c

08005998 <VL53L0X_init>:
  VL53L0X_writeReg(dev, I2C_SLAVE_DEVICE_ADDRESS, new_addr & 0x7F);
  dev->address = new_addr;
}

bool VL53L0X_init(VL53L0X* dev)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  // VL53L0X_DataInit() begin

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (dev->io_2v8)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	785b      	ldrb	r3, [r3, #1]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00c      	beq.n	80059c2 <VL53L0X_init+0x2a>
  {
    VL53L0X_writeReg(dev, VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV, VL53L0X_readReg(dev, VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01 ); // set bit 0
 80059a8:	2189      	movs	r1, #137	; 0x89
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fb28 	bl	8006000 <VL53L0X_readReg>
 80059b0:	4603      	mov	r3, r0
 80059b2:	f043 0301 	orr.w	r3, r3, #1
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	461a      	mov	r2, r3
 80059ba:	2189      	movs	r1, #137	; 0x89
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 faa7 	bl	8005f10 <VL53L0X_writeReg>
  }

  // "Set I2C standard mode"
  VL53L0X_writeReg(dev, 0x88, 0x00);
 80059c2:	2200      	movs	r2, #0
 80059c4:	2188      	movs	r1, #136	; 0x88
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 faa2 	bl	8005f10 <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0x80, 0x01);
 80059cc:	2201      	movs	r2, #1
 80059ce:	2180      	movs	r1, #128	; 0x80
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 fa9d 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x01);
 80059d6:	2201      	movs	r2, #1
 80059d8:	21ff      	movs	r1, #255	; 0xff
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fa98 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x00, 0x00);
 80059e0:	2200      	movs	r2, #0
 80059e2:	2100      	movs	r1, #0
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 fa93 	bl	8005f10 <VL53L0X_writeReg>
  dev->stop_variable = VL53L0X_readReg(dev, 0x91);
 80059ea:	2191      	movs	r1, #145	; 0x91
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 fb07 	bl	8006000 <VL53L0X_readReg>
 80059f2:	4603      	mov	r3, r0
 80059f4:	461a      	mov	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	741a      	strb	r2, [r3, #16]
  VL53L0X_writeReg(dev, 0x00, 0x01);
 80059fa:	2201      	movs	r2, #1
 80059fc:	2100      	movs	r1, #0
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fa86 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x00);
 8005a04:	2200      	movs	r2, #0
 8005a06:	21ff      	movs	r1, #255	; 0xff
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 fa81 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x80, 0x00);
 8005a0e:	2200      	movs	r2, #0
 8005a10:	2180      	movs	r1, #128	; 0x80
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 fa7c 	bl	8005f10 <VL53L0X_writeReg>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  VL53L0X_writeReg(dev, MSRC_CONFIG_CONTROL, VL53L0X_readReg(dev,  MSRC_CONFIG_CONTROL) | 0x12);
 8005a18:	2160      	movs	r1, #96	; 0x60
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 faf0 	bl	8006000 <VL53L0X_readReg>
 8005a20:	4603      	mov	r3, r0
 8005a22:	f043 0312 	orr.w	r3, r3, #18
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	461a      	mov	r2, r3
 8005a2a:	2160      	movs	r1, #96	; 0x60
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fa6f 	bl	8005f10 <VL53L0X_writeReg>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  VL53L0X_setSignalRateLimit(dev, 0.25);
 8005a32:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 fb96 	bl	8006168 <VL53L0X_setSignalRateLimit>

  VL53L0X_writeReg(dev, SYSTEM_SEQUENCE_CONFIG, 0xFF);
 8005a3c:	22ff      	movs	r2, #255	; 0xff
 8005a3e:	2101      	movs	r1, #1
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 fa65 	bl	8005f10 <VL53L0X_writeReg>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count; //TODO
  bool spad_type_is_aperture;
  if (!VL53L0X_getSpadInfo(dev, &spad_count, &spad_type_is_aperture)) { return false; }
 8005a46:	f107 0213 	add.w	r2, r7, #19
 8005a4a:	f107 0314 	add.w	r3, r7, #20
 8005a4e:	4619      	mov	r1, r3
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 fee7 	bl	8006824 <VL53L0X_getSpadInfo>
 8005a56:	4603      	mov	r3, r0
 8005a58:	f083 0301 	eor.w	r3, r3, #1
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d001      	beq.n	8005a66 <VL53L0X_init+0xce>
 8005a62:	2300      	movs	r3, #0
 8005a64:	e24f      	b.n	8005f06 <VL53L0X_init+0x56e>
  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];

  VL53L0X_readMulti(dev, GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8005a66:	f107 020c 	add.w	r2, r7, #12
 8005a6a:	2306      	movs	r3, #6
 8005a6c:	21b0      	movs	r1, #176	; 0xb0
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fb4c 	bl	800610c <VL53L0X_readMulti>

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  VL53L0X_writeReg(dev, 0xFF, 0x01);
 8005a74:	2201      	movs	r2, #1
 8005a76:	21ff      	movs	r1, #255	; 0xff
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 fa49 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8005a7e:	2200      	movs	r2, #0
 8005a80:	214f      	movs	r1, #79	; 0x4f
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fa44 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8005a88:	222c      	movs	r2, #44	; 0x2c
 8005a8a:	214e      	movs	r1, #78	; 0x4e
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 fa3f 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x00);
 8005a92:	2200      	movs	r2, #0
 8005a94:	21ff      	movs	r1, #255	; 0xff
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fa3a 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8005a9c:	22b4      	movs	r2, #180	; 0xb4
 8005a9e:	21b6      	movs	r1, #182	; 0xb6
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 fa35 	bl	8005f10 <VL53L0X_writeReg>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 8005aa6:	7cfb      	ldrb	r3, [r7, #19]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <VL53L0X_init+0x118>
 8005aac:	230c      	movs	r3, #12
 8005aae:	e000      	b.n	8005ab2 <VL53L0X_init+0x11a>
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	757b      	strb	r3, [r7, #21]
  uint8_t spads_enabled = 0;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < 48; i++)
 8005ab8:	2300      	movs	r3, #0
 8005aba:	75bb      	strb	r3, [r7, #22]
 8005abc:	e039      	b.n	8005b32 <VL53L0X_init+0x19a>
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 8005abe:	7dba      	ldrb	r2, [r7, #22]
 8005ac0:	7d7b      	ldrb	r3, [r7, #21]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d303      	bcc.n	8005ace <VL53L0X_init+0x136>
 8005ac6:	7d3b      	ldrb	r3, [r7, #20]
 8005ac8:	7dfa      	ldrb	r2, [r7, #23]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d11a      	bne.n	8005b04 <VL53L0X_init+0x16c>
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 8005ace:	7dbb      	ldrb	r3, [r7, #22]
 8005ad0:	08db      	lsrs	r3, r3, #3
 8005ad2:	b2d8      	uxtb	r0, r3
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	3318      	adds	r3, #24
 8005ad8:	443b      	add	r3, r7
 8005ada:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8005ade:	b25a      	sxtb	r2, r3
 8005ae0:	7dbb      	ldrb	r3, [r7, #22]
 8005ae2:	f003 0307 	and.w	r3, r3, #7
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8005aec:	b25b      	sxtb	r3, r3
 8005aee:	43db      	mvns	r3, r3
 8005af0:	b25b      	sxtb	r3, r3
 8005af2:	4013      	ands	r3, r2
 8005af4:	b25a      	sxtb	r2, r3
 8005af6:	4603      	mov	r3, r0
 8005af8:	b2d2      	uxtb	r2, r2
 8005afa:	3318      	adds	r3, #24
 8005afc:	443b      	add	r3, r7
 8005afe:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8005b02:	e013      	b.n	8005b2c <VL53L0X_init+0x194>
    }
    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 8005b04:	7dbb      	ldrb	r3, [r7, #22]
 8005b06:	08db      	lsrs	r3, r3, #3
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	3318      	adds	r3, #24
 8005b0c:	443b      	add	r3, r7
 8005b0e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8005b12:	461a      	mov	r2, r3
 8005b14:	7dbb      	ldrb	r3, [r7, #22]
 8005b16:	f003 0307 	and.w	r3, r3, #7
 8005b1a:	fa42 f303 	asr.w	r3, r2, r3
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <VL53L0X_init+0x194>
    {
      spads_enabled++;
 8005b26:	7dfb      	ldrb	r3, [r7, #23]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	75fb      	strb	r3, [r7, #23]
  for (uint8_t i = 0; i < 48; i++)
 8005b2c:	7dbb      	ldrb	r3, [r7, #22]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	75bb      	strb	r3, [r7, #22]
 8005b32:	7dbb      	ldrb	r3, [r7, #22]
 8005b34:	2b2f      	cmp	r3, #47	; 0x2f
 8005b36:	d9c2      	bls.n	8005abe <VL53L0X_init+0x126>
    }
  }

  VL53L0X_writeMulti(dev, GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8005b38:	f107 020c 	add.w	r2, r7, #12
 8005b3c:	2306      	movs	r3, #6
 8005b3e:	21b0      	movs	r1, #176	; 0xb0
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 fab7 	bl	80060b4 <VL53L0X_writeMulti>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  VL53L0X_writeReg(dev, 0xFF, 0x01);
 8005b46:	2201      	movs	r2, #1
 8005b48:	21ff      	movs	r1, #255	; 0xff
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f9e0 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x00, 0x00);
 8005b50:	2200      	movs	r2, #0
 8005b52:	2100      	movs	r1, #0
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 f9db 	bl	8005f10 <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x00);
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	21ff      	movs	r1, #255	; 0xff
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f9d6 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x09, 0x00);
 8005b64:	2200      	movs	r2, #0
 8005b66:	2109      	movs	r1, #9
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f9d1 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x10, 0x00);
 8005b6e:	2200      	movs	r2, #0
 8005b70:	2110      	movs	r1, #16
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f9cc 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x11, 0x00);
 8005b78:	2200      	movs	r2, #0
 8005b7a:	2111      	movs	r1, #17
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f9c7 	bl	8005f10 <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0x24, 0x01);
 8005b82:	2201      	movs	r2, #1
 8005b84:	2124      	movs	r1, #36	; 0x24
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f9c2 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x25, 0xFF);
 8005b8c:	22ff      	movs	r2, #255	; 0xff
 8005b8e:	2125      	movs	r1, #37	; 0x25
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 f9bd 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x75, 0x00);
 8005b96:	2200      	movs	r2, #0
 8005b98:	2175      	movs	r1, #117	; 0x75
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f9b8 	bl	8005f10 <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x01);
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	21ff      	movs	r1, #255	; 0xff
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 f9b3 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x4E, 0x2C);
 8005baa:	222c      	movs	r2, #44	; 0x2c
 8005bac:	214e      	movs	r1, #78	; 0x4e
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f9ae 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x48, 0x00);
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	2148      	movs	r1, #72	; 0x48
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f9a9 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x30, 0x20);
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	2130      	movs	r1, #48	; 0x30
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f9a4 	bl	8005f10 <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x00);
 8005bc8:	2200      	movs	r2, #0
 8005bca:	21ff      	movs	r1, #255	; 0xff
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 f99f 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x30, 0x09);
 8005bd2:	2209      	movs	r2, #9
 8005bd4:	2130      	movs	r1, #48	; 0x30
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f99a 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x54, 0x00);
 8005bdc:	2200      	movs	r2, #0
 8005bde:	2154      	movs	r1, #84	; 0x54
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 f995 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x31, 0x04);
 8005be6:	2204      	movs	r2, #4
 8005be8:	2131      	movs	r1, #49	; 0x31
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f990 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x32, 0x03);
 8005bf0:	2203      	movs	r2, #3
 8005bf2:	2132      	movs	r1, #50	; 0x32
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 f98b 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x40, 0x83);
 8005bfa:	2283      	movs	r2, #131	; 0x83
 8005bfc:	2140      	movs	r1, #64	; 0x40
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 f986 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x46, 0x25);
 8005c04:	2225      	movs	r2, #37	; 0x25
 8005c06:	2146      	movs	r1, #70	; 0x46
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 f981 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x60, 0x00);
 8005c0e:	2200      	movs	r2, #0
 8005c10:	2160      	movs	r1, #96	; 0x60
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f97c 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x27, 0x00);
 8005c18:	2200      	movs	r2, #0
 8005c1a:	2127      	movs	r1, #39	; 0x27
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 f977 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x50, 0x06);
 8005c22:	2206      	movs	r2, #6
 8005c24:	2150      	movs	r1, #80	; 0x50
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f972 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x51, 0x00);
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	2151      	movs	r1, #81	; 0x51
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 f96d 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x52, 0x96);
 8005c36:	2296      	movs	r2, #150	; 0x96
 8005c38:	2152      	movs	r1, #82	; 0x52
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f968 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x56, 0x08);
 8005c40:	2208      	movs	r2, #8
 8005c42:	2156      	movs	r1, #86	; 0x56
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 f963 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x57, 0x30);
 8005c4a:	2230      	movs	r2, #48	; 0x30
 8005c4c:	2157      	movs	r1, #87	; 0x57
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f95e 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x61, 0x00);
 8005c54:	2200      	movs	r2, #0
 8005c56:	2161      	movs	r1, #97	; 0x61
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 f959 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x62, 0x00);
 8005c5e:	2200      	movs	r2, #0
 8005c60:	2162      	movs	r1, #98	; 0x62
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f954 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x64, 0x00);
 8005c68:	2200      	movs	r2, #0
 8005c6a:	2164      	movs	r1, #100	; 0x64
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 f94f 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x65, 0x00);
 8005c72:	2200      	movs	r2, #0
 8005c74:	2165      	movs	r1, #101	; 0x65
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f94a 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x66, 0xA0);
 8005c7c:	22a0      	movs	r2, #160	; 0xa0
 8005c7e:	2166      	movs	r1, #102	; 0x66
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 f945 	bl	8005f10 <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x01);
 8005c86:	2201      	movs	r2, #1
 8005c88:	21ff      	movs	r1, #255	; 0xff
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f940 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x22, 0x32);
 8005c90:	2232      	movs	r2, #50	; 0x32
 8005c92:	2122      	movs	r1, #34	; 0x22
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 f93b 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x47, 0x14);
 8005c9a:	2214      	movs	r2, #20
 8005c9c:	2147      	movs	r1, #71	; 0x47
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f936 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x49, 0xFF);
 8005ca4:	22ff      	movs	r2, #255	; 0xff
 8005ca6:	2149      	movs	r1, #73	; 0x49
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f931 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x4A, 0x00);
 8005cae:	2200      	movs	r2, #0
 8005cb0:	214a      	movs	r1, #74	; 0x4a
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f92c 	bl	8005f10 <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x00);
 8005cb8:	2200      	movs	r2, #0
 8005cba:	21ff      	movs	r1, #255	; 0xff
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 f927 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x7A, 0x0A);
 8005cc2:	220a      	movs	r2, #10
 8005cc4:	217a      	movs	r1, #122	; 0x7a
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f922 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x7B, 0x00);
 8005ccc:	2200      	movs	r2, #0
 8005cce:	217b      	movs	r1, #123	; 0x7b
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 f91d 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x78, 0x21);
 8005cd6:	2221      	movs	r2, #33	; 0x21
 8005cd8:	2178      	movs	r1, #120	; 0x78
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f918 	bl	8005f10 <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x01);
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	21ff      	movs	r1, #255	; 0xff
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f913 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x23, 0x34);
 8005cea:	2234      	movs	r2, #52	; 0x34
 8005cec:	2123      	movs	r1, #35	; 0x23
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f90e 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x42, 0x00);
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	2142      	movs	r1, #66	; 0x42
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f909 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x44, 0xFF);
 8005cfe:	22ff      	movs	r2, #255	; 0xff
 8005d00:	2144      	movs	r1, #68	; 0x44
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f904 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x45, 0x26);
 8005d08:	2226      	movs	r2, #38	; 0x26
 8005d0a:	2145      	movs	r1, #69	; 0x45
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f8ff 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x46, 0x05);
 8005d12:	2205      	movs	r2, #5
 8005d14:	2146      	movs	r1, #70	; 0x46
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f8fa 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x40, 0x40);
 8005d1c:	2240      	movs	r2, #64	; 0x40
 8005d1e:	2140      	movs	r1, #64	; 0x40
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 f8f5 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x0E, 0x06);
 8005d26:	2206      	movs	r2, #6
 8005d28:	210e      	movs	r1, #14
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f8f0 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x20, 0x1A);
 8005d30:	221a      	movs	r2, #26
 8005d32:	2120      	movs	r1, #32
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 f8eb 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x43, 0x40);
 8005d3a:	2240      	movs	r2, #64	; 0x40
 8005d3c:	2143      	movs	r1, #67	; 0x43
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f8e6 	bl	8005f10 <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x00);
 8005d44:	2200      	movs	r2, #0
 8005d46:	21ff      	movs	r1, #255	; 0xff
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f8e1 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x34, 0x03);
 8005d4e:	2203      	movs	r2, #3
 8005d50:	2134      	movs	r1, #52	; 0x34
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f8dc 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x35, 0x44);
 8005d58:	2244      	movs	r2, #68	; 0x44
 8005d5a:	2135      	movs	r1, #53	; 0x35
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 f8d7 	bl	8005f10 <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x01);
 8005d62:	2201      	movs	r2, #1
 8005d64:	21ff      	movs	r1, #255	; 0xff
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 f8d2 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x31, 0x04);
 8005d6c:	2204      	movs	r2, #4
 8005d6e:	2131      	movs	r1, #49	; 0x31
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 f8cd 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x4B, 0x09);
 8005d76:	2209      	movs	r2, #9
 8005d78:	214b      	movs	r1, #75	; 0x4b
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f8c8 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x4C, 0x05);
 8005d80:	2205      	movs	r2, #5
 8005d82:	214c      	movs	r1, #76	; 0x4c
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 f8c3 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x4D, 0x04);
 8005d8a:	2204      	movs	r2, #4
 8005d8c:	214d      	movs	r1, #77	; 0x4d
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f8be 	bl	8005f10 <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x00);
 8005d94:	2200      	movs	r2, #0
 8005d96:	21ff      	movs	r1, #255	; 0xff
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 f8b9 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x44, 0x00);
 8005d9e:	2200      	movs	r2, #0
 8005da0:	2144      	movs	r1, #68	; 0x44
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f8b4 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x45, 0x20);
 8005da8:	2220      	movs	r2, #32
 8005daa:	2145      	movs	r1, #69	; 0x45
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 f8af 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x47, 0x08);
 8005db2:	2208      	movs	r2, #8
 8005db4:	2147      	movs	r1, #71	; 0x47
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f8aa 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x48, 0x28);
 8005dbc:	2228      	movs	r2, #40	; 0x28
 8005dbe:	2148      	movs	r1, #72	; 0x48
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 f8a5 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x67, 0x00);
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	2167      	movs	r1, #103	; 0x67
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f8a0 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x70, 0x04);
 8005dd0:	2204      	movs	r2, #4
 8005dd2:	2170      	movs	r1, #112	; 0x70
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 f89b 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x71, 0x01);
 8005dda:	2201      	movs	r2, #1
 8005ddc:	2171      	movs	r1, #113	; 0x71
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f896 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x72, 0xFE);
 8005de4:	22fe      	movs	r2, #254	; 0xfe
 8005de6:	2172      	movs	r1, #114	; 0x72
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 f891 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x76, 0x00);
 8005dee:	2200      	movs	r2, #0
 8005df0:	2176      	movs	r1, #118	; 0x76
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f88c 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x77, 0x00);
 8005df8:	2200      	movs	r2, #0
 8005dfa:	2177      	movs	r1, #119	; 0x77
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 f887 	bl	8005f10 <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x01);
 8005e02:	2201      	movs	r2, #1
 8005e04:	21ff      	movs	r1, #255	; 0xff
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f882 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x0D, 0x01);
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	210d      	movs	r1, #13
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 f87d 	bl	8005f10 <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x00);
 8005e16:	2200      	movs	r2, #0
 8005e18:	21ff      	movs	r1, #255	; 0xff
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 f878 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x80, 0x01);
 8005e20:	2201      	movs	r2, #1
 8005e22:	2180      	movs	r1, #128	; 0x80
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f873 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x01, 0xF8);
 8005e2a:	22f8      	movs	r2, #248	; 0xf8
 8005e2c:	2101      	movs	r1, #1
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f86e 	bl	8005f10 <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x01);
 8005e34:	2201      	movs	r2, #1
 8005e36:	21ff      	movs	r1, #255	; 0xff
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f869 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x8E, 0x01);
 8005e3e:	2201      	movs	r2, #1
 8005e40:	218e      	movs	r1, #142	; 0x8e
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f864 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x00, 0x01);
 8005e48:	2201      	movs	r2, #1
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 f85f 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x00);
 8005e52:	2200      	movs	r2, #0
 8005e54:	21ff      	movs	r1, #255	; 0xff
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f85a 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x80, 0x00);
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	2180      	movs	r1, #128	; 0x80
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 f855 	bl	8005f10 <VL53L0X_writeReg>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  VL53L0X_writeReg(dev, SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 8005e66:	2204      	movs	r2, #4
 8005e68:	210a      	movs	r1, #10
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f850 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, GPIO_HV_MUX_ACTIVE_HIGH, VL53L0X_readReg(dev,  GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 8005e70:	2184      	movs	r1, #132	; 0x84
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f8c4 	bl	8006000 <VL53L0X_readReg>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	f023 0310 	bic.w	r3, r3, #16
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	461a      	mov	r2, r3
 8005e82:	2184      	movs	r1, #132	; 0x84
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 f843 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, SYSTEM_INTERRUPT_CLEAR, 0x01);
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	210b      	movs	r1, #11
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f83e 	bl	8005f10 <VL53L0X_writeReg>

  // -- VL53L0X_SetGpioConfig() end

  dev->measurement_timing_budget_us = VL53L0X_getMeasurementTimingBudget(dev);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 fa36 	bl	8006306 <VL53L0X_getMeasurementTimingBudget>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	615a      	str	r2, [r3, #20]
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  VL53L0X_writeReg(dev, SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8005ea0:	22e8      	movs	r2, #232	; 0xe8
 8005ea2:	2101      	movs	r1, #1
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f833 	bl	8005f10 <VL53L0X_writeReg>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
 VL53L0X_setMeasurementTimingBudget(dev, dev->measurement_timing_budget_us);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	4619      	mov	r1, r3
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f98f 	bl	80061d4 <VL53L0X_setMeasurementTimingBudget>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  VL53L0X_writeReg(dev, SYSTEM_SEQUENCE_CONFIG, 0x01);
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	2101      	movs	r1, #1
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f828 	bl	8005f10 <VL53L0X_writeReg>
  if (!VL53L0X_performSingleRefCalibration(dev, 0x40)) { return false; }
 8005ec0:	2140      	movs	r1, #64	; 0x40
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 fe94 	bl	8006bf0 <VL53L0X_performSingleRefCalibration>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	f083 0301 	eor.w	r3, r3, #1
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d001      	beq.n	8005ed8 <VL53L0X_init+0x540>
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	e016      	b.n	8005f06 <VL53L0X_init+0x56e>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  VL53L0X_writeReg(dev, SYSTEM_SEQUENCE_CONFIG, 0x02);
 8005ed8:	2202      	movs	r2, #2
 8005eda:	2101      	movs	r1, #1
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 f817 	bl	8005f10 <VL53L0X_writeReg>
  if (!VL53L0X_performSingleRefCalibration(dev, 0x00)) { return false; }
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 fe83 	bl	8006bf0 <VL53L0X_performSingleRefCalibration>
 8005eea:	4603      	mov	r3, r0
 8005eec:	f083 0301 	eor.w	r3, r3, #1
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <VL53L0X_init+0x562>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	e005      	b.n	8005f06 <VL53L0X_init+0x56e>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  VL53L0X_writeReg(dev, SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8005efa:	22e8      	movs	r2, #232	; 0xe8
 8005efc:	2101      	movs	r1, #1
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f806 	bl	8005f10 <VL53L0X_writeReg>

  // VL53L0X_PerformRefCalibration() end

  return true;
 8005f04:	2301      	movs	r3, #1
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3718      	adds	r7, #24
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
	...

08005f10 <VL53L0X_writeReg>:

// Write an 8-bit register
void VL53L0X_writeReg(VL53L0X* dev, uint8_t reg, uint8_t value)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af02      	add	r7, sp, #8
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	460b      	mov	r3, r1
 8005f1a:	70fb      	strb	r3, [r7, #3]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];
	buf[0] = reg;
 8005f20:	78fb      	ldrb	r3, [r7, #3]
 8005f22:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 8005f24:	78bb      	ldrb	r3, [r7, #2]
 8005f26:	737b      	strb	r3, [r7, #13]
	//dev->last_status = i2c_write(dev->address, buf, 2);
	dev->last_status= HAL_I2C_Master_Transmit(&hi2c1, dev->address, buf, 2, 0XFFFF);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	789b      	ldrb	r3, [r3, #2]
 8005f2c:	b299      	uxth	r1, r3
 8005f2e:	f107 020c 	add.w	r2, r7, #12
 8005f32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	2302      	movs	r3, #2
 8005f3a:	4805      	ldr	r0, [pc, #20]	; (8005f50 <VL53L0X_writeReg+0x40>)
 8005f3c:	f7fb fb98 	bl	8001670 <HAL_I2C_Master_Transmit>
 8005f40:	4603      	mov	r3, r0
 8005f42:	461a      	mov	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	701a      	strb	r2, [r3, #0]
}
 8005f48:	bf00      	nop
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	240000a8 	.word	0x240000a8

08005f54 <VL53L0X_writeReg16Bit>:

// Write a 16-bit register
void VL53L0X_writeReg16Bit( VL53L0X* dev, uint8_t reg, uint16_t value)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af02      	add	r7, sp, #8
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	70fb      	strb	r3, [r7, #3]
 8005f60:	4613      	mov	r3, r2
 8005f62:	803b      	strh	r3, [r7, #0]
	uint8_t buf[3];
	buf[0] = reg;
 8005f64:	78fb      	ldrb	r3, [r7, #3]
 8005f66:	733b      	strb	r3, [r7, #12]
	buf[1] = (uint8_t) (value >> 8);
 8005f68:	883b      	ldrh	r3, [r7, #0]
 8005f6a:	0a1b      	lsrs	r3, r3, #8
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	737b      	strb	r3, [r7, #13]
	buf[2] = (uint8_t) (value & 0xFF);
 8005f72:	883b      	ldrh	r3, [r7, #0]
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	73bb      	strb	r3, [r7, #14]
	//dev->last_status = i2c_write(dev->address, buf, 3);
	dev->last_status= HAL_I2C_Master_Transmit(&hi2c1, dev->address, buf, 3, 0XFFFF);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	789b      	ldrb	r3, [r3, #2]
 8005f7c:	b299      	uxth	r1, r3
 8005f7e:	f107 020c 	add.w	r2, r7, #12
 8005f82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	2303      	movs	r3, #3
 8005f8a:	4805      	ldr	r0, [pc, #20]	; (8005fa0 <VL53L0X_writeReg16Bit+0x4c>)
 8005f8c:	f7fb fb70 	bl	8001670 <HAL_I2C_Master_Transmit>
 8005f90:	4603      	mov	r3, r0
 8005f92:	461a      	mov	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	701a      	strb	r2, [r3, #0]
}
 8005f98:	bf00      	nop
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	240000a8 	.word	0x240000a8

08005fa4 <VL53L0X_writeReg32Bit>:

// Write a 32-bit register
void VL53L0X_writeReg32Bit( VL53L0X* dev, uint8_t reg, uint32_t value)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b088      	sub	sp, #32
 8005fa8:	af02      	add	r7, sp, #8
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	460b      	mov	r3, r1
 8005fae:	607a      	str	r2, [r7, #4]
 8005fb0:	72fb      	strb	r3, [r7, #11]
	uint8_t buf[5];
	buf[0] = reg;
 8005fb2:	7afb      	ldrb	r3, [r7, #11]
 8005fb4:	743b      	strb	r3, [r7, #16]
	buf[1] = (uint8_t) (value >> 24);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	0e1b      	lsrs	r3, r3, #24
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	747b      	strb	r3, [r7, #17]
	buf[2] = (uint8_t) (value >> 16);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	0c1b      	lsrs	r3, r3, #16
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	74bb      	strb	r3, [r7, #18]
	buf[3] = (uint8_t) (value >> 8);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	0a1b      	lsrs	r3, r3, #8
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	74fb      	strb	r3, [r7, #19]
	buf[4] = (uint8_t) (value & 0xFF);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	753b      	strb	r3, [r7, #20]
	//dev->last_status = i2c_write(dev->address, buf, 5);
	dev->last_status=HAL_I2C_Master_Transmit(&hi2c1, dev->address, buf, 5, 0XFFFF);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	789b      	ldrb	r3, [r3, #2]
 8005fd8:	b299      	uxth	r1, r3
 8005fda:	f107 0210 	add.w	r2, r7, #16
 8005fde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	2305      	movs	r3, #5
 8005fe6:	4805      	ldr	r0, [pc, #20]	; (8005ffc <VL53L0X_writeReg32Bit+0x58>)
 8005fe8:	f7fb fb42 	bl	8001670 <HAL_I2C_Master_Transmit>
 8005fec:	4603      	mov	r3, r0
 8005fee:	461a      	mov	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	701a      	strb	r2, [r3, #0]
}
 8005ff4:	bf00      	nop
 8005ff6:	3718      	adds	r7, #24
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	240000a8 	.word	0x240000a8

08006000 <VL53L0X_readReg>:

// Read an 8-bit register
uint8_t VL53L0X_readReg(VL53L0X* dev, uint8_t reg)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af02      	add	r7, sp, #8
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	460b      	mov	r3, r1
 800600a:	70fb      	strb	r3, [r7, #3]
  uint8_t value;
  //i2c_write(dev->address, &reg, 1);
  HAL_I2C_Master_Transmit(&hi2c1, dev->address, &reg, 1, 0XFFFF);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	789b      	ldrb	r3, [r3, #2]
 8006010:	b299      	uxth	r1, r3
 8006012:	1cfa      	adds	r2, r7, #3
 8006014:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	2301      	movs	r3, #1
 800601c:	480b      	ldr	r0, [pc, #44]	; (800604c <VL53L0X_readReg+0x4c>)
 800601e:	f7fb fb27 	bl	8001670 <HAL_I2C_Master_Transmit>
  //dev->last_status = i2c_read(dev->address, &value, 1);
  dev->last_status=HAL_I2C_Master_Receive(&hi2c1, dev->address, &value, 1, 0XFFFF);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	789b      	ldrb	r3, [r3, #2]
 8006026:	b299      	uxth	r1, r3
 8006028:	f107 020f 	add.w	r2, r7, #15
 800602c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	2301      	movs	r3, #1
 8006034:	4805      	ldr	r0, [pc, #20]	; (800604c <VL53L0X_readReg+0x4c>)
 8006036:	f7fb fc0f 	bl	8001858 <HAL_I2C_Master_Receive>
 800603a:	4603      	mov	r3, r0
 800603c:	461a      	mov	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	701a      	strb	r2, [r3, #0]
  return value;
 8006042:	7bfb      	ldrb	r3, [r7, #15]
}
 8006044:	4618      	mov	r0, r3
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	240000a8 	.word	0x240000a8

08006050 <VL53L0X_readReg16Bit>:

// Read a 16-bit register
uint16_t VL53L0X_readReg16Bit(VL53L0X* dev, uint8_t reg)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af02      	add	r7, sp, #8
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	460b      	mov	r3, r1
 800605a:	70fb      	strb	r3, [r7, #3]
  uint16_t value;
  uint8_t buf[2];
  //i2c_write(dev->address, &reg, 1);
  HAL_I2C_Master_Transmit(&hi2c1, dev->address, &reg, 1, 0XFFFF);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	789b      	ldrb	r3, [r3, #2]
 8006060:	b299      	uxth	r1, r3
 8006062:	1cfa      	adds	r2, r7, #3
 8006064:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006068:	9300      	str	r3, [sp, #0]
 800606a:	2301      	movs	r3, #1
 800606c:	4810      	ldr	r0, [pc, #64]	; (80060b0 <VL53L0X_readReg16Bit+0x60>)
 800606e:	f7fb faff 	bl	8001670 <HAL_I2C_Master_Transmit>
  //dev->last_status = i2c_read(dev->address, buf, 2);
  dev->last_status=HAL_I2C_Master_Receive(&hi2c1, dev->address, buf, 2, 0XFFFF);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	789b      	ldrb	r3, [r3, #2]
 8006076:	b299      	uxth	r1, r3
 8006078:	f107 020c 	add.w	r2, r7, #12
 800607c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	2302      	movs	r3, #2
 8006084:	480a      	ldr	r0, [pc, #40]	; (80060b0 <VL53L0X_readReg16Bit+0x60>)
 8006086:	f7fb fbe7 	bl	8001858 <HAL_I2C_Master_Receive>
 800608a:	4603      	mov	r3, r0
 800608c:	461a      	mov	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	701a      	strb	r2, [r3, #0]
  value = (uint16_t) ( buf[0] << 8 );
 8006092:	7b3b      	ldrb	r3, [r7, #12]
 8006094:	b29b      	uxth	r3, r3
 8006096:	021b      	lsls	r3, r3, #8
 8006098:	81fb      	strh	r3, [r7, #14]
  value |= (uint16_t) buf[1];
 800609a:	7b7b      	ldrb	r3, [r7, #13]
 800609c:	b29a      	uxth	r2, r3
 800609e:	89fb      	ldrh	r3, [r7, #14]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	81fb      	strh	r3, [r7, #14]
  return value;
 80060a4:	89fb      	ldrh	r3, [r7, #14]
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	240000a8 	.word	0x240000a8

080060b4 <VL53L0X_writeMulti>:
}

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register
void VL53L0X_writeMulti(VL53L0X* dev, uint8_t reg, uint8_t* src, uint8_t count)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af02      	add	r7, sp, #8
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	607a      	str	r2, [r7, #4]
 80060be:	461a      	mov	r2, r3
 80060c0:	460b      	mov	r3, r1
 80060c2:	72fb      	strb	r3, [r7, #11]
 80060c4:	4613      	mov	r3, r2
 80060c6:	72bb      	strb	r3, [r7, #10]
	//i2c_write(dev->address, &reg, 1);
	HAL_I2C_Master_Transmit(&hi2c1, dev->address, &reg, 1, 0xFFFF);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	789b      	ldrb	r3, [r3, #2]
 80060cc:	b299      	uxth	r1, r3
 80060ce:	f107 020b 	add.w	r2, r7, #11
 80060d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	2301      	movs	r3, #1
 80060da:	480b      	ldr	r0, [pc, #44]	; (8006108 <VL53L0X_writeMulti+0x54>)
 80060dc:	f7fb fac8 	bl	8001670 <HAL_I2C_Master_Transmit>
	dev->last_status =HAL_I2C_Master_Transmit(&hi2c1, dev->address, src, count, 0XFFFF);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	789b      	ldrb	r3, [r3, #2]
 80060e4:	b299      	uxth	r1, r3
 80060e6:	7abb      	ldrb	r3, [r7, #10]
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060ee:	9200      	str	r2, [sp, #0]
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	4805      	ldr	r0, [pc, #20]	; (8006108 <VL53L0X_writeMulti+0x54>)
 80060f4:	f7fb fabc 	bl	8001670 <HAL_I2C_Master_Transmit>
 80060f8:	4603      	mov	r3, r0
 80060fa:	461a      	mov	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	701a      	strb	r2, [r3, #0]
}
 8006100:	bf00      	nop
 8006102:	3710      	adds	r7, #16
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	240000a8 	.word	0x240000a8

0800610c <VL53L0X_readMulti>:

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void VL53L0X_readMulti(VL53L0X* dev, uint8_t reg, uint8_t * dst, uint8_t count)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af02      	add	r7, sp, #8
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	607a      	str	r2, [r7, #4]
 8006116:	461a      	mov	r2, r3
 8006118:	460b      	mov	r3, r1
 800611a:	72fb      	strb	r3, [r7, #11]
 800611c:	4613      	mov	r3, r2
 800611e:	72bb      	strb	r3, [r7, #10]
	//i2c_write(dev->address, &reg, 1);
	HAL_I2C_Master_Transmit(&hi2c1, dev->address, &reg, 1, 0xFFFF);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	789b      	ldrb	r3, [r3, #2]
 8006124:	b299      	uxth	r1, r3
 8006126:	f107 020b 	add.w	r2, r7, #11
 800612a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800612e:	9300      	str	r3, [sp, #0]
 8006130:	2301      	movs	r3, #1
 8006132:	480b      	ldr	r0, [pc, #44]	; (8006160 <VL53L0X_readMulti+0x54>)
 8006134:	f7fb fa9c 	bl	8001670 <HAL_I2C_Master_Transmit>
	dev->last_status =HAL_I2C_Master_Receive(&hi2c1, dev->address, dst, count, 0XFFFF);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	789b      	ldrb	r3, [r3, #2]
 800613c:	b299      	uxth	r1, r3
 800613e:	7abb      	ldrb	r3, [r7, #10]
 8006140:	b29b      	uxth	r3, r3
 8006142:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006146:	9200      	str	r2, [sp, #0]
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	4805      	ldr	r0, [pc, #20]	; (8006160 <VL53L0X_readMulti+0x54>)
 800614c:	f7fb fb84 	bl	8001858 <HAL_I2C_Master_Receive>
 8006150:	4603      	mov	r3, r0
 8006152:	461a      	mov	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	701a      	strb	r2, [r3, #0]
}
 8006158:	bf00      	nop
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	240000a8 	.word	0x240000a8
 8006164:	00000000 	.word	0x00000000

08006168 <VL53L0X_setSignalRateLimit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool VL53L0X_setSignalRateLimit( VL53L0X* dev, float limit_Mcps)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	ed87 0a00 	vstr	s0, [r7]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 8006174:	edd7 7a00 	vldr	s15, [r7]
 8006178:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800617c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006180:	d40a      	bmi.n	8006198 <VL53L0X_setSignalRateLimit+0x30>
 8006182:	edd7 7a00 	vldr	s15, [r7]
 8006186:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800618a:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 80061c8 <VL53L0X_setSignalRateLimit+0x60>
 800618e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006196:	dd01      	ble.n	800619c <VL53L0X_setSignalRateLimit+0x34>
 8006198:	2300      	movs	r3, #0
 800619a:	e010      	b.n	80061be <VL53L0X_setSignalRateLimit+0x56>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  VL53L0X_writeReg16Bit(dev, FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 800619c:	edd7 7a00 	vldr	s15, [r7]
 80061a0:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80061d0 <VL53L0X_setSignalRateLimit+0x68>
 80061a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061ac:	ee17 3a90 	vmov	r3, s15
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	461a      	mov	r2, r3
 80061b4:	2144      	movs	r1, #68	; 0x44
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7ff fecc 	bl	8005f54 <VL53L0X_writeReg16Bit>
  return true;
 80061bc:	2301      	movs	r3, #1
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3708      	adds	r7, #8
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	0a3d70a4 	.word	0x0a3d70a4
 80061cc:	407fffd7 	.word	0x407fffd7
 80061d0:	43000000 	.word	0x43000000

080061d4 <VL53L0X_setMeasurementTimingBudget>:
}



bool VL53L0X_setMeasurementTimingBudget( VL53L0X* dev, uint32_t budget_us)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b092      	sub	sp, #72	; 0x48
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
   VL53L0X_SequenceStepEnables enables;
   VL53L0X_SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 80061de:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 80061e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t const EndOverhead        = 960;
 80061e6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80061ea:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uint16_t const MsrcOverhead       = 660;
 80061ec:	f44f 7325 	mov.w	r3, #660	; 0x294
 80061f0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  uint16_t const TccOverhead        = 590;
 80061f2:	f240 234e 	movw	r3, #590	; 0x24e
 80061f6:	877b      	strh	r3, [r7, #58]	; 0x3a
  uint16_t const DssOverhead        = 690;
 80061f8:	f240 23b2 	movw	r3, #690	; 0x2b2
 80061fc:	873b      	strh	r3, [r7, #56]	; 0x38
  uint16_t const PreRangeOverhead   = 660;
 80061fe:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006202:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint16_t const FinalRangeOverhead = 550;
 8006204:	f240 2326 	movw	r3, #550	; 0x226
 8006208:	86bb      	strh	r3, [r7, #52]	; 0x34

  uint32_t const MinTimingBudget = 20000;
 800620a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800620e:	633b      	str	r3, [r7, #48]	; 0x30

  if (budget_us < MinTimingBudget) { return false; }
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006214:	429a      	cmp	r2, r3
 8006216:	d201      	bcs.n	800621c <VL53L0X_setMeasurementTimingBudget+0x48>
 8006218:	2300      	movs	r3, #0
 800621a:	e070      	b.n	80062fe <VL53L0X_setMeasurementTimingBudget+0x12a>

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 800621c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006220:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006222:	4413      	add	r3, r2
 8006224:	647b      	str	r3, [r7, #68]	; 0x44

  VL53L0X_getSequenceStepEnables(dev, &enables);
 8006226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800622a:	4619      	mov	r1, r3
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 fb99 	bl	8006964 <VL53L0X_getSequenceStepEnables>
  VL53L0X_getSequenceStepTimeouts(dev, &enables, &timeouts);
 8006232:	f107 020c 	add.w	r2, r7, #12
 8006236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800623a:	4619      	mov	r1, r3
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fbdc 	bl	80069fa <VL53L0X_getSequenceStepTimeouts>

  if (enables.tcc)
 8006242:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006246:	2b00      	cmp	r3, #0
 8006248:	d005      	beq.n	8006256 <VL53L0X_setMeasurementTimingBudget+0x82>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 800624a:	69ba      	ldr	r2, [r7, #24]
 800624c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800624e:	4413      	add	r3, r2
 8006250:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006252:	4413      	add	r3, r2
 8006254:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.dss)
 8006256:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800625a:	2b00      	cmp	r3, #0
 800625c:	d007      	beq.n	800626e <VL53L0X_setMeasurementTimingBudget+0x9a>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 800625e:	69ba      	ldr	r2, [r7, #24]
 8006260:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006262:	4413      	add	r3, r2
 8006264:	005b      	lsls	r3, r3, #1
 8006266:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006268:	4413      	add	r3, r2
 800626a:	647b      	str	r3, [r7, #68]	; 0x44
 800626c:	e009      	b.n	8006282 <VL53L0X_setMeasurementTimingBudget+0xae>
  }
  else if (enables.msrc)
 800626e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006272:	2b00      	cmp	r3, #0
 8006274:	d005      	beq.n	8006282 <VL53L0X_setMeasurementTimingBudget+0xae>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8006276:	69ba      	ldr	r2, [r7, #24]
 8006278:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800627a:	4413      	add	r3, r2
 800627c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800627e:	4413      	add	r3, r2
 8006280:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.pre_range)
 8006282:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006286:	2b00      	cmp	r3, #0
 8006288:	d005      	beq.n	8006296 <VL53L0X_setMeasurementTimingBudget+0xc2>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 800628a:	69fa      	ldr	r2, [r7, #28]
 800628c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800628e:	4413      	add	r3, r2
 8006290:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006292:	4413      	add	r3, r2
 8006294:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.final_range)
 8006296:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800629a:	2b00      	cmp	r3, #0
 800629c:	d02e      	beq.n	80062fc <VL53L0X_setMeasurementTimingBudget+0x128>
  {
    used_budget_us += FinalRangeOverhead;
 800629e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80062a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062a2:	4413      	add	r3, r2
 80062a4:	647b      	str	r3, [r7, #68]	; 0x44
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 80062a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d901      	bls.n	80062b2 <VL53L0X_setMeasurementTimingBudget+0xde>
    {
      // "Requested timeout too big."
      return false;
 80062ae:	2300      	movs	r3, #0
 80062b0:	e025      	b.n	80062fe <VL53L0X_setMeasurementTimingBudget+0x12a>
    }

    uint32_t final_range_timeout_us = budget_us - used_budget_us;
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    // "For the final range timeout, the pre-range timeout
    //  must be added. To do this both final and pre-range
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t final_range_timeout_mclks = VL53L0X_timeoutMicrosecondsToMclks(final_range_timeout_us, timeouts.final_range_vcsel_period_pclks);
 80062ba:	89fb      	ldrh	r3, [r7, #14]
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	4619      	mov	r1, r3
 80062c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80062c2:	f000 fc6f 	bl	8006ba4 <VL53L0X_timeoutMicrosecondsToMclks>
 80062c6:	4603      	mov	r3, r0
 80062c8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    if (enables.pre_range)
 80062cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d005      	beq.n	80062e0 <VL53L0X_setMeasurementTimingBudget+0x10c>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 80062d4:	8a7a      	ldrh	r2, [r7, #18]
 80062d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80062da:	4413      	add	r3, r2
 80062dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    }

    VL53L0X_writeReg16Bit(dev, FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI, VL53L0X_encodeTimeout(final_range_timeout_mclks));
 80062e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80062e4:	4618      	mov	r0, r3
 80062e6:	f000 fc08 	bl	8006afa <VL53L0X_encodeTimeout>
 80062ea:	4603      	mov	r3, r0
 80062ec:	461a      	mov	r2, r3
 80062ee:	2171      	movs	r1, #113	; 0x71
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f7ff fe2f 	bl	8005f54 <VL53L0X_writeReg16Bit>

    // set_sequence_step_timeout() end

    dev->measurement_timing_budget_us = budget_us; // store for internal reuse
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	615a      	str	r2, [r3, #20]
  }
  return true;
 80062fc:	2301      	movs	r3, #1
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3748      	adds	r7, #72	; 0x48
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <VL53L0X_getMeasurementTimingBudget>:
// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t VL53L0X_getMeasurementTimingBudget(VL53L0X* dev)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b08e      	sub	sp, #56	; 0x38
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
   VL53L0X_SequenceStepEnables enables;
   VL53L0X_SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 800630e:	f240 7376 	movw	r3, #1910	; 0x776
 8006312:	867b      	strh	r3, [r7, #50]	; 0x32
  uint16_t const EndOverhead        = 960;
 8006314:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006318:	863b      	strh	r3, [r7, #48]	; 0x30
  uint16_t const MsrcOverhead       = 660;
 800631a:	f44f 7325 	mov.w	r3, #660	; 0x294
 800631e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint16_t const TccOverhead        = 590;
 8006320:	f240 234e 	movw	r3, #590	; 0x24e
 8006324:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint16_t const DssOverhead        = 690;
 8006326:	f240 23b2 	movw	r3, #690	; 0x2b2
 800632a:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t const PreRangeOverhead   = 660;
 800632c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006330:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t const FinalRangeOverhead = 550;
 8006332:	f240 2326 	movw	r3, #550	; 0x226
 8006336:	84fb      	strh	r3, [r7, #38]	; 0x26

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 8006338:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800633a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800633c:	4413      	add	r3, r2
 800633e:	637b      	str	r3, [r7, #52]	; 0x34

  VL53L0X_getSequenceStepEnables(dev, &enables);
 8006340:	f107 0320 	add.w	r3, r7, #32
 8006344:	4619      	mov	r1, r3
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 fb0c 	bl	8006964 <VL53L0X_getSequenceStepEnables>
  VL53L0X_getSequenceStepTimeouts(dev, &enables, &timeouts);
 800634c:	f107 0208 	add.w	r2, r7, #8
 8006350:	f107 0320 	add.w	r3, r7, #32
 8006354:	4619      	mov	r1, r3
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 fb4f 	bl	80069fa <VL53L0X_getSequenceStepTimeouts>

  if (enables.tcc)
 800635c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d005      	beq.n	8006370 <VL53L0X_getMeasurementTimingBudget+0x6a>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006368:	4413      	add	r3, r2
 800636a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800636c:	4413      	add	r3, r2
 800636e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if (enables.dss)
 8006370:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006374:	2b00      	cmp	r3, #0
 8006376:	d007      	beq.n	8006388 <VL53L0X_getMeasurementTimingBudget+0x82>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800637c:	4413      	add	r3, r2
 800637e:	005b      	lsls	r3, r3, #1
 8006380:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006382:	4413      	add	r3, r2
 8006384:	637b      	str	r3, [r7, #52]	; 0x34
 8006386:	e009      	b.n	800639c <VL53L0X_getMeasurementTimingBudget+0x96>
  }
  else if (enables.msrc)
 8006388:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800638c:	2b00      	cmp	r3, #0
 800638e:	d005      	beq.n	800639c <VL53L0X_getMeasurementTimingBudget+0x96>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006394:	4413      	add	r3, r2
 8006396:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006398:	4413      	add	r3, r2
 800639a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if (enables.pre_range)
 800639c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d005      	beq.n	80063b0 <VL53L0X_getMeasurementTimingBudget+0xaa>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80063a8:	4413      	add	r3, r2
 80063aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063ac:	4413      	add	r3, r2
 80063ae:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if (enables.final_range)
 80063b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d005      	beq.n	80063c4 <VL53L0X_getMeasurementTimingBudget+0xbe>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 80063b8:	69fa      	ldr	r2, [r7, #28]
 80063ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063bc:	4413      	add	r3, r2
 80063be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063c0:	4413      	add	r3, r2
 80063c2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  dev->measurement_timing_budget_us = budget_us; // store for internal reuse
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063c8:	615a      	str	r2, [r3, #20]
  return budget_us;
 80063ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3738      	adds	r7, #56	; 0x38
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <VL53L0X_setVcselPulsePeriod>:
// Valid values are (even numbers only):
//  pre:  12 to 18 (initialized default: 14)
//  final: 8 to 14 (initialized default: 10)
// based on VL53L0X_set_vcsel_pulse_period()
bool VL53L0X_setVcselPulsePeriod(VL53L0X* dev, VL53L0X_vcselPeriodType type, uint8_t period_pclks)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b08c      	sub	sp, #48	; 0x30
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	460b      	mov	r3, r1
 80063de:	70fb      	strb	r3, [r7, #3]
 80063e0:	4613      	mov	r3, r2
 80063e2:	70bb      	strb	r3, [r7, #2]
  uint8_t vcsel_period_reg = encodeVcselPeriod(period_pclks);
 80063e4:	78bb      	ldrb	r3, [r7, #2]
 80063e6:	085b      	lsrs	r3, r3, #1
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	3b01      	subs	r3, #1
 80063ec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

   VL53L0X_SequenceStepEnables enables;
   VL53L0X_SequenceStepTimeouts timeouts;

  VL53L0X_getSequenceStepEnables(dev, &enables);
 80063f0:	f107 0320 	add.w	r3, r7, #32
 80063f4:	4619      	mov	r1, r3
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 fab4 	bl	8006964 <VL53L0X_getSequenceStepEnables>
  VL53L0X_getSequenceStepTimeouts(dev, &enables, &timeouts);
 80063fc:	f107 0208 	add.w	r2, r7, #8
 8006400:	f107 0320 	add.w	r3, r7, #32
 8006404:	4619      	mov	r1, r3
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 faf7 	bl	80069fa <VL53L0X_getSequenceStepTimeouts>
  //
  // For the MSRC timeout, the same applies - this timeout being
  // dependant on the pre-range vcsel period."


  if (type == VcselPeriodPreRange)
 800640c:	78fb      	ldrb	r3, [r7, #3]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d164      	bne.n	80064dc <VL53L0X_setVcselPulsePeriod+0x108>
  {
    // "Set phase check limits"
    switch (period_pclks)
 8006412:	78bb      	ldrb	r3, [r7, #2]
 8006414:	3b0c      	subs	r3, #12
 8006416:	2b06      	cmp	r3, #6
 8006418:	d828      	bhi.n	800646c <VL53L0X_setVcselPulsePeriod+0x98>
 800641a:	a201      	add	r2, pc, #4	; (adr r2, 8006420 <VL53L0X_setVcselPulsePeriod+0x4c>)
 800641c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006420:	0800643d 	.word	0x0800643d
 8006424:	0800646d 	.word	0x0800646d
 8006428:	08006449 	.word	0x08006449
 800642c:	0800646d 	.word	0x0800646d
 8006430:	08006455 	.word	0x08006455
 8006434:	0800646d 	.word	0x0800646d
 8006438:	08006461 	.word	0x08006461
    {
      case 12:
        VL53L0X_writeReg(dev, PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18);
 800643c:	2218      	movs	r2, #24
 800643e:	2157      	movs	r1, #87	; 0x57
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7ff fd65 	bl	8005f10 <VL53L0X_writeReg>
        break;
 8006446:	e013      	b.n	8006470 <VL53L0X_setVcselPulsePeriod+0x9c>

      case 14:
        VL53L0X_writeReg(dev, PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30);
 8006448:	2230      	movs	r2, #48	; 0x30
 800644a:	2157      	movs	r1, #87	; 0x57
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f7ff fd5f 	bl	8005f10 <VL53L0X_writeReg>
        break;
 8006452:	e00d      	b.n	8006470 <VL53L0X_setVcselPulsePeriod+0x9c>

      case 16:
        VL53L0X_writeReg(dev, PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40);
 8006454:	2240      	movs	r2, #64	; 0x40
 8006456:	2157      	movs	r1, #87	; 0x57
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f7ff fd59 	bl	8005f10 <VL53L0X_writeReg>
        break;
 800645e:	e007      	b.n	8006470 <VL53L0X_setVcselPulsePeriod+0x9c>

      case 18:
        VL53L0X_writeReg(dev, PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50);
 8006460:	2250      	movs	r2, #80	; 0x50
 8006462:	2157      	movs	r1, #87	; 0x57
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f7ff fd53 	bl	8005f10 <VL53L0X_writeReg>
        break;
 800646a:	e001      	b.n	8006470 <VL53L0X_setVcselPulsePeriod+0x9c>

      default:
        // invalid period
        return false;
 800646c:	2300      	movs	r3, #0
 800646e:	e123      	b.n	80066b8 <VL53L0X_setVcselPulsePeriod+0x2e4>
    }
    VL53L0X_writeReg(dev, PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08);
 8006470:	2208      	movs	r2, #8
 8006472:	2156      	movs	r1, #86	; 0x56
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f7ff fd4b 	bl	8005f10 <VL53L0X_writeReg>

    // apply new VCSEL period
    VL53L0X_writeReg(dev, PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 800647a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800647e:	461a      	mov	r2, r3
 8006480:	2150      	movs	r1, #80	; 0x50
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f7ff fd44 	bl	8005f10 <VL53L0X_writeReg>
    // update timeouts

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE)

    uint16_t new_pre_range_timeout_mclks = VL53L0X_timeoutMicrosecondsToMclks(timeouts.pre_range_us, period_pclks);
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	78ba      	ldrb	r2, [r7, #2]
 800648c:	4611      	mov	r1, r2
 800648e:	4618      	mov	r0, r3
 8006490:	f000 fb88 	bl	8006ba4 <VL53L0X_timeoutMicrosecondsToMclks>
 8006494:	4603      	mov	r3, r0
 8006496:	857b      	strh	r3, [r7, #42]	; 0x2a

    VL53L0X_writeReg16Bit(dev, PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI, VL53L0X_encodeTimeout(new_pre_range_timeout_mclks));
 8006498:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800649a:	4618      	mov	r0, r3
 800649c:	f000 fb2d 	bl	8006afa <VL53L0X_encodeTimeout>
 80064a0:	4603      	mov	r3, r0
 80064a2:	461a      	mov	r2, r3
 80064a4:	2151      	movs	r1, #81	; 0x51
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f7ff fd54 	bl	8005f54 <VL53L0X_writeReg16Bit>
    // set_sequence_step_timeout() end

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)

    uint16_t new_msrc_timeout_mclks = VL53L0X_timeoutMicrosecondsToMclks(timeouts.msrc_dss_tcc_us, period_pclks);
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	78ba      	ldrb	r2, [r7, #2]
 80064b0:	4611      	mov	r1, r2
 80064b2:	4618      	mov	r0, r3
 80064b4:	f000 fb76 	bl	8006ba4 <VL53L0X_timeoutMicrosecondsToMclks>
 80064b8:	4603      	mov	r3, r0
 80064ba:	853b      	strh	r3, [r7, #40]	; 0x28

    VL53L0X_writeReg(dev, MSRC_CONFIG_TIMEOUT_MACROP, (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1));
 80064bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80064be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064c2:	d804      	bhi.n	80064ce <VL53L0X_setVcselPulsePeriod+0xfa>
 80064c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	3b01      	subs	r3, #1
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	e000      	b.n	80064d0 <VL53L0X_setVcselPulsePeriod+0xfc>
 80064ce:	23ff      	movs	r3, #255	; 0xff
 80064d0:	461a      	mov	r2, r3
 80064d2:	2146      	movs	r1, #70	; 0x46
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f7ff fd1b 	bl	8005f10 <VL53L0X_writeReg>
 80064da:	e0cf      	b.n	800667c <VL53L0X_setVcselPulsePeriod+0x2a8>

    // set_sequence_step_timeout() end
  }
  else if (type == VcselPeriodFinalRange)
 80064dc:	78fb      	ldrb	r3, [r7, #3]
 80064de:	2b01      	cmp	r3, #1
 80064e0:	f040 80ca 	bne.w	8006678 <VL53L0X_setVcselPulsePeriod+0x2a4>
  {
    switch (period_pclks)
 80064e4:	78bb      	ldrb	r3, [r7, #2]
 80064e6:	3b08      	subs	r3, #8
 80064e8:	2b06      	cmp	r3, #6
 80064ea:	f200 80a1 	bhi.w	8006630 <VL53L0X_setVcselPulsePeriod+0x25c>
 80064ee:	a201      	add	r2, pc, #4	; (adr r2, 80064f4 <VL53L0X_setVcselPulsePeriod+0x120>)
 80064f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f4:	08006511 	.word	0x08006511
 80064f8:	08006631 	.word	0x08006631
 80064fc:	08006559 	.word	0x08006559
 8006500:	08006631 	.word	0x08006631
 8006504:	080065a1 	.word	0x080065a1
 8006508:	08006631 	.word	0x08006631
 800650c:	080065e9 	.word	0x080065e9
    {
      case 8:
        VL53L0X_writeReg(dev, FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x10);
 8006510:	2210      	movs	r2, #16
 8006512:	2148      	movs	r1, #72	; 0x48
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f7ff fcfb 	bl	8005f10 <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 800651a:	2208      	movs	r2, #8
 800651c:	2147      	movs	r1, #71	; 0x47
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7ff fcf6 	bl	8005f10 <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
 8006524:	2202      	movs	r2, #2
 8006526:	2132      	movs	r1, #50	; 0x32
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f7ff fcf1 	bl	8005f10 <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);
 800652e:	220c      	movs	r2, #12
 8006530:	2130      	movs	r1, #48	; 0x30
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f7ff fcec 	bl	8005f10 <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, 0xFF, 0x01);
 8006538:	2201      	movs	r2, #1
 800653a:	21ff      	movs	r1, #255	; 0xff
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f7ff fce7 	bl	8005f10 <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, ALGO_PHASECAL_LIM, 0x30);
 8006542:	2230      	movs	r2, #48	; 0x30
 8006544:	2130      	movs	r1, #48	; 0x30
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f7ff fce2 	bl	8005f10 <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, 0xFF, 0x00);
 800654c:	2200      	movs	r2, #0
 800654e:	21ff      	movs	r1, #255	; 0xff
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f7ff fcdd 	bl	8005f10 <VL53L0X_writeReg>
        break;
 8006556:	e06d      	b.n	8006634 <VL53L0X_setVcselPulsePeriod+0x260>

      case 10:
        VL53L0X_writeReg(dev, FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28);
 8006558:	2228      	movs	r2, #40	; 0x28
 800655a:	2148      	movs	r1, #72	; 0x48
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f7ff fcd7 	bl	8005f10 <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8006562:	2208      	movs	r2, #8
 8006564:	2147      	movs	r1, #71	; 0x47
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f7ff fcd2 	bl	8005f10 <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 800656c:	2203      	movs	r2, #3
 800656e:	2132      	movs	r1, #50	; 0x32
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f7ff fccd 	bl	8005f10 <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);
 8006576:	2209      	movs	r2, #9
 8006578:	2130      	movs	r1, #48	; 0x30
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f7ff fcc8 	bl	8005f10 <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, 0xFF, 0x01);
 8006580:	2201      	movs	r2, #1
 8006582:	21ff      	movs	r1, #255	; 0xff
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f7ff fcc3 	bl	8005f10 <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, ALGO_PHASECAL_LIM, 0x20);
 800658a:	2220      	movs	r2, #32
 800658c:	2130      	movs	r1, #48	; 0x30
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7ff fcbe 	bl	8005f10 <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, 0xFF, 0x00);
 8006594:	2200      	movs	r2, #0
 8006596:	21ff      	movs	r1, #255	; 0xff
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f7ff fcb9 	bl	8005f10 <VL53L0X_writeReg>
        break;
 800659e:	e049      	b.n	8006634 <VL53L0X_setVcselPulsePeriod+0x260>

      case 12:
        VL53L0X_writeReg(dev, FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38);
 80065a0:	2238      	movs	r2, #56	; 0x38
 80065a2:	2148      	movs	r1, #72	; 0x48
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f7ff fcb3 	bl	8005f10 <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 80065aa:	2208      	movs	r2, #8
 80065ac:	2147      	movs	r1, #71	; 0x47
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f7ff fcae 	bl	8005f10 <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 80065b4:	2203      	movs	r2, #3
 80065b6:	2132      	movs	r1, #50	; 0x32
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f7ff fca9 	bl	8005f10 <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);
 80065be:	2208      	movs	r2, #8
 80065c0:	2130      	movs	r1, #48	; 0x30
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7ff fca4 	bl	8005f10 <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, 0xFF, 0x01);
 80065c8:	2201      	movs	r2, #1
 80065ca:	21ff      	movs	r1, #255	; 0xff
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f7ff fc9f 	bl	8005f10 <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, ALGO_PHASECAL_LIM, 0x20);
 80065d2:	2220      	movs	r2, #32
 80065d4:	2130      	movs	r1, #48	; 0x30
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7ff fc9a 	bl	8005f10 <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, 0xFF, 0x00);
 80065dc:	2200      	movs	r2, #0
 80065de:	21ff      	movs	r1, #255	; 0xff
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7ff fc95 	bl	8005f10 <VL53L0X_writeReg>
        break;
 80065e6:	e025      	b.n	8006634 <VL53L0X_setVcselPulsePeriod+0x260>

      case 14:
        VL53L0X_writeReg(dev, FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48);
 80065e8:	2248      	movs	r2, #72	; 0x48
 80065ea:	2148      	movs	r1, #72	; 0x48
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7ff fc8f 	bl	8005f10 <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 80065f2:	2208      	movs	r2, #8
 80065f4:	2147      	movs	r1, #71	; 0x47
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f7ff fc8a 	bl	8005f10 <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 80065fc:	2203      	movs	r2, #3
 80065fe:	2132      	movs	r1, #50	; 0x32
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f7ff fc85 	bl	8005f10 <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);
 8006606:	2207      	movs	r2, #7
 8006608:	2130      	movs	r1, #48	; 0x30
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7ff fc80 	bl	8005f10 <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, 0xFF, 0x01);
 8006610:	2201      	movs	r2, #1
 8006612:	21ff      	movs	r1, #255	; 0xff
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f7ff fc7b 	bl	8005f10 <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, ALGO_PHASECAL_LIM, 0x20);
 800661a:	2220      	movs	r2, #32
 800661c:	2130      	movs	r1, #48	; 0x30
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f7ff fc76 	bl	8005f10 <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, 0xFF, 0x00);
 8006624:	2200      	movs	r2, #0
 8006626:	21ff      	movs	r1, #255	; 0xff
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f7ff fc71 	bl	8005f10 <VL53L0X_writeReg>
        break;
 800662e:	e001      	b.n	8006634 <VL53L0X_setVcselPulsePeriod+0x260>

      default:
        // invalid period
        return false;
 8006630:	2300      	movs	r3, #0
 8006632:	e041      	b.n	80066b8 <VL53L0X_setVcselPulsePeriod+0x2e4>
    }

    // apply new VCSEL period
    VL53L0X_writeReg(dev, FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8006634:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006638:	461a      	mov	r2, r3
 800663a:	2170      	movs	r1, #112	; 0x70
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7ff fc67 	bl	8005f10 <VL53L0X_writeReg>
    // "For the final range timeout, the pre-range timeout
    //  must be added. To do this both final and pre-range
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t new_final_range_timeout_mclks = VL53L0X_timeoutMicrosecondsToMclks(timeouts.final_range_us, period_pclks);
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	78ba      	ldrb	r2, [r7, #2]
 8006646:	4611      	mov	r1, r2
 8006648:	4618      	mov	r0, r3
 800664a:	f000 faab 	bl	8006ba4 <VL53L0X_timeoutMicrosecondsToMclks>
 800664e:	4603      	mov	r3, r0
 8006650:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (enables.pre_range)
 8006652:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <VL53L0X_setVcselPulsePeriod+0x28e>
    {
      new_final_range_timeout_mclks += timeouts.pre_range_mclks;
 800665a:	89fa      	ldrh	r2, [r7, #14]
 800665c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800665e:	4413      	add	r3, r2
 8006660:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    VL53L0X_writeReg16Bit(dev, FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI, VL53L0X_encodeTimeout(new_final_range_timeout_mclks));
 8006662:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006664:	4618      	mov	r0, r3
 8006666:	f000 fa48 	bl	8006afa <VL53L0X_encodeTimeout>
 800666a:	4603      	mov	r3, r0
 800666c:	461a      	mov	r2, r3
 800666e:	2171      	movs	r1, #113	; 0x71
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f7ff fc6f 	bl	8005f54 <VL53L0X_writeReg16Bit>
 8006676:	e001      	b.n	800667c <VL53L0X_setVcselPulsePeriod+0x2a8>
    // set_sequence_step_timeout end
  }
  else
  {
    // invalid type
    return false;
 8006678:	2300      	movs	r3, #0
 800667a:	e01d      	b.n	80066b8 <VL53L0X_setVcselPulsePeriod+0x2e4>
  }

  // "Finally, the timing budget must be re-applied"

  VL53L0X_setMeasurementTimingBudget(dev, dev->measurement_timing_budget_us);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	4619      	mov	r1, r3
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7ff fda6 	bl	80061d4 <VL53L0X_setMeasurementTimingBudget>

  // "Perform the phase calibration. This is needed after changing on vcsel period."
  // VL53L0X_perform_phase_calibration() begin

  uint8_t sequence_config = VL53L0X_readReg(dev,  SYSTEM_SEQUENCE_CONFIG);
 8006688:	2101      	movs	r1, #1
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7ff fcb8 	bl	8006000 <VL53L0X_readReg>
 8006690:	4603      	mov	r3, r0
 8006692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  VL53L0X_writeReg(dev, SYSTEM_SEQUENCE_CONFIG, 0x02);
 8006696:	2202      	movs	r2, #2
 8006698:	2101      	movs	r1, #1
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7ff fc38 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_performSingleRefCalibration(dev, 0x0);
 80066a0:	2100      	movs	r1, #0
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 faa4 	bl	8006bf0 <VL53L0X_performSingleRefCalibration>
  VL53L0X_writeReg(dev, SYSTEM_SEQUENCE_CONFIG, sequence_config);
 80066a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066ac:	461a      	mov	r2, r3
 80066ae:	2101      	movs	r1, #1
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f7ff fc2d 	bl	8005f10 <VL53L0X_writeReg>

  // VL53L0X_perform_phase_calibration() end

  return true;
 80066b6:	2301      	movs	r3, #1
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3730      	adds	r7, #48	; 0x30
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <VL53L0X_getVcselPulsePeriod>:


// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t VL53L0X_getVcselPulsePeriod( VL53L0X* dev,  VL53L0X_vcselPeriodType type)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	460b      	mov	r3, r1
 80066ca:	70fb      	strb	r3, [r7, #3]
  if (type == VcselPeriodPreRange)
 80066cc:	78fb      	ldrb	r3, [r7, #3]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d109      	bne.n	80066e6 <VL53L0X_getVcselPulsePeriod+0x26>
  {
    return decodeVcselPeriod(VL53L0X_readReg(dev,  PRE_RANGE_CONFIG_VCSEL_PERIOD));
 80066d2:	2150      	movs	r1, #80	; 0x50
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f7ff fc93 	bl	8006000 <VL53L0X_readReg>
 80066da:	4603      	mov	r3, r0
 80066dc:	3301      	adds	r3, #1
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	005b      	lsls	r3, r3, #1
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	e00d      	b.n	8006702 <VL53L0X_getVcselPulsePeriod+0x42>
  }
  else if (type == VcselPeriodFinalRange)
 80066e6:	78fb      	ldrb	r3, [r7, #3]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d109      	bne.n	8006700 <VL53L0X_getVcselPulsePeriod+0x40>
  {
    return decodeVcselPeriod(VL53L0X_readReg(dev,  FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80066ec:	2170      	movs	r1, #112	; 0x70
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f7ff fc86 	bl	8006000 <VL53L0X_readReg>
 80066f4:	4603      	mov	r3, r0
 80066f6:	3301      	adds	r3, #1
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	005b      	lsls	r3, r3, #1
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	e000      	b.n	8006702 <VL53L0X_getVcselPulsePeriod+0x42>
  }
  else { return 255; }
 8006700:	23ff      	movs	r3, #255	; 0xff
}
 8006702:	4618      	mov	r0, r3
 8006704:	3708      	adds	r7, #8
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <VL53L0X_startContinuous>:
// often as possible); otherwise, continuous timed mode is used, with the given
// inter-measurement period in milliseconds determining how often the sensor
// takes a measurement.
// based on VL53L0X_StartMeasurement()
void VL53L0X_startContinuous( VL53L0X* dev, uint32_t period_ms)
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b084      	sub	sp, #16
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
 8006712:	6039      	str	r1, [r7, #0]
  VL53L0X_writeReg(dev, 0x80, 0x01);
 8006714:	2201      	movs	r2, #1
 8006716:	2180      	movs	r1, #128	; 0x80
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f7ff fbf9 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x01);
 800671e:	2201      	movs	r2, #1
 8006720:	21ff      	movs	r1, #255	; 0xff
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7ff fbf4 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x00, 0x00);
 8006728:	2200      	movs	r2, #0
 800672a:	2100      	movs	r1, #0
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f7ff fbef 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x91, dev->stop_variable);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	7c1b      	ldrb	r3, [r3, #16]
 8006736:	461a      	mov	r2, r3
 8006738:	2191      	movs	r1, #145	; 0x91
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7ff fbe8 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x00, 0x01);
 8006740:	2201      	movs	r2, #1
 8006742:	2100      	movs	r1, #0
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f7ff fbe3 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x00);
 800674a:	2200      	movs	r2, #0
 800674c:	21ff      	movs	r1, #255	; 0xff
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7ff fbde 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x80, 0x00);
 8006754:	2200      	movs	r2, #0
 8006756:	2180      	movs	r1, #128	; 0x80
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f7ff fbd9 	bl	8005f10 <VL53L0X_writeReg>

  if (period_ms != 0)
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d018      	beq.n	8006796 <VL53L0X_startContinuous+0x8c>
  {
    // continuous timed mode

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() begin

    uint16_t osc_calibrate_val = VL53L0X_readReg16Bit(dev, OSC_CALIBRATE_VAL);
 8006764:	21f8      	movs	r1, #248	; 0xf8
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f7ff fc72 	bl	8006050 <VL53L0X_readReg16Bit>
 800676c:	4603      	mov	r3, r0
 800676e:	81fb      	strh	r3, [r7, #14]

    if (osc_calibrate_val != 0)
 8006770:	89fb      	ldrh	r3, [r7, #14]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d004      	beq.n	8006780 <VL53L0X_startContinuous+0x76>
    {
      period_ms *= osc_calibrate_val;
 8006776:	89fa      	ldrh	r2, [r7, #14]
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	fb02 f303 	mul.w	r3, r2, r3
 800677e:	603b      	str	r3, [r7, #0]
    }

    VL53L0X_writeReg32Bit(dev, SYSTEM_INTERMEASUREMENT_PERIOD, period_ms);
 8006780:	683a      	ldr	r2, [r7, #0]
 8006782:	2104      	movs	r1, #4
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7ff fc0d 	bl	8005fa4 <VL53L0X_writeReg32Bit>

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() end

    VL53L0X_writeReg(dev, SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
 800678a:	2204      	movs	r2, #4
 800678c:	2100      	movs	r1, #0
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7ff fbbe 	bl	8005f10 <VL53L0X_writeReg>
  else
  {
    // continuous back-to-back mode
    VL53L0X_writeReg(dev, SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
  }
}
 8006794:	e004      	b.n	80067a0 <VL53L0X_startContinuous+0x96>
    VL53L0X_writeReg(dev, SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 8006796:	2202      	movs	r2, #2
 8006798:	2100      	movs	r1, #0
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7ff fbb8 	bl	8005f10 <VL53L0X_writeReg>
}
 80067a0:	bf00      	nop
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <VL53L0X_readRangeContinuousMillimeters>:

// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
uint16_t VL53L0X_readRangeContinuousMillimeters( VL53L0X* dev)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  VL53L0X_startTimeout(dev);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 fa50 	bl	8006c56 <VL53L0X_startTimeout>
  while ((VL53L0X_readReg(dev,  RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80067b6:	e00b      	b.n	80067d0 <VL53L0X_readRangeContinuousMillimeters+0x28>
  {
    if (VL53L0X_checkTimeoutExpired(dev))
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 fa59 	bl	8006c70 <VL53L0X_checkTimeoutExpired>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d005      	beq.n	80067d0 <VL53L0X_readRangeContinuousMillimeters+0x28>
    {
      dev->did_timeout = true;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	721a      	strb	r2, [r3, #8]
      return 65535;
 80067ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80067ce:	e014      	b.n	80067fa <VL53L0X_readRangeContinuousMillimeters+0x52>
  while ((VL53L0X_readReg(dev,  RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80067d0:	2113      	movs	r1, #19
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7ff fc14 	bl	8006000 <VL53L0X_readReg>
 80067d8:	4603      	mov	r3, r0
 80067da:	f003 0307 	and.w	r3, r3, #7
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d0ea      	beq.n	80067b8 <VL53L0X_readRangeContinuousMillimeters+0x10>
    }
  }

  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  uint16_t range = VL53L0X_readReg16Bit(dev, RESULT_RANGE_STATUS + 10);
 80067e2:	211e      	movs	r1, #30
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f7ff fc33 	bl	8006050 <VL53L0X_readReg16Bit>
 80067ea:	4603      	mov	r3, r0
 80067ec:	81fb      	strh	r3, [r7, #14]

  VL53L0X_writeReg(dev, SYSTEM_INTERRUPT_CLEAR, 0x01);
 80067ee:	2201      	movs	r2, #1
 80067f0:	210b      	movs	r1, #11
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f7ff fb8c 	bl	8005f10 <VL53L0X_writeReg>

  return range;
 80067f8:	89fb      	ldrh	r3, [r7, #14]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <VL53L0X_timeoutOccurred>:


// Did a timeout occur in one of the read functions since the last call to
// timeoutOccurred()?
bool VL53L0X_timeoutOccurred(VL53L0X* dev)
{
 8006802:	b480      	push	{r7}
 8006804:	b085      	sub	sp, #20
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  bool tmp = dev->did_timeout;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	7a1b      	ldrb	r3, [r3, #8]
 800680e:	73fb      	strb	r3, [r7, #15]
  dev->did_timeout = false;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	721a      	strb	r2, [r3, #8]
  return tmp;
 8006816:	7bfb      	ldrb	r3, [r7, #15]
}
 8006818:	4618      	mov	r0, r3
 800681a:	3714      	adds	r7, #20
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <VL53L0X_getSpadInfo>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool VL53L0X_getSpadInfo(VL53L0X* dev, uint8_t * count, bool* type_is_aperture)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
  uint8_t tmp;

  VL53L0X_writeReg(dev, 0x80, 0x01);
 8006830:	2201      	movs	r2, #1
 8006832:	2180      	movs	r1, #128	; 0x80
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	f7ff fb6b 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x01);
 800683a:	2201      	movs	r2, #1
 800683c:	21ff      	movs	r1, #255	; 0xff
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f7ff fb66 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x00, 0x00);
 8006844:	2200      	movs	r2, #0
 8006846:	2100      	movs	r1, #0
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f7ff fb61 	bl	8005f10 <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x06);
 800684e:	2206      	movs	r2, #6
 8006850:	21ff      	movs	r1, #255	; 0xff
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f7ff fb5c 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x83, VL53L0X_readReg(dev,  0x83) | 0x04);
 8006858:	2183      	movs	r1, #131	; 0x83
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f7ff fbd0 	bl	8006000 <VL53L0X_readReg>
 8006860:	4603      	mov	r3, r0
 8006862:	f043 0304 	orr.w	r3, r3, #4
 8006866:	b2db      	uxtb	r3, r3
 8006868:	461a      	mov	r2, r3
 800686a:	2183      	movs	r1, #131	; 0x83
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f7ff fb4f 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x07);
 8006872:	2207      	movs	r2, #7
 8006874:	21ff      	movs	r1, #255	; 0xff
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f7ff fb4a 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x81, 0x01);
 800687c:	2201      	movs	r2, #1
 800687e:	2181      	movs	r1, #129	; 0x81
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f7ff fb45 	bl	8005f10 <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0x80, 0x01);
 8006886:	2201      	movs	r2, #1
 8006888:	2180      	movs	r1, #128	; 0x80
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f7ff fb40 	bl	8005f10 <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0x94, 0x6b);
 8006890:	226b      	movs	r2, #107	; 0x6b
 8006892:	2194      	movs	r1, #148	; 0x94
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f7ff fb3b 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x83, 0x00);
 800689a:	2200      	movs	r2, #0
 800689c:	2183      	movs	r1, #131	; 0x83
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f7ff fb36 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_startTimeout(dev);
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f000 f9d6 	bl	8006c56 <VL53L0X_startTimeout>
  while (VL53L0X_readReg(dev,  0x83) == 0x00)
 80068aa:	e007      	b.n	80068bc <VL53L0X_getSpadInfo+0x98>
  {
    if (VL53L0X_checkTimeoutExpired(dev)) { return false; }
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f000 f9df 	bl	8006c70 <VL53L0X_checkTimeoutExpired>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <VL53L0X_getSpadInfo+0x98>
 80068b8:	2300      	movs	r3, #0
 80068ba:	e04f      	b.n	800695c <VL53L0X_getSpadInfo+0x138>
  while (VL53L0X_readReg(dev,  0x83) == 0x00)
 80068bc:	2183      	movs	r1, #131	; 0x83
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f7ff fb9e 	bl	8006000 <VL53L0X_readReg>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d0f0      	beq.n	80068ac <VL53L0X_getSpadInfo+0x88>
  }
  VL53L0X_writeReg(dev, 0x83, 0x01);
 80068ca:	2201      	movs	r2, #1
 80068cc:	2183      	movs	r1, #131	; 0x83
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f7ff fb1e 	bl	8005f10 <VL53L0X_writeReg>
  tmp = VL53L0X_readReg(dev,  0x92);
 80068d4:	2192      	movs	r1, #146	; 0x92
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f7ff fb92 	bl	8006000 <VL53L0X_readReg>
 80068dc:	4603      	mov	r3, r0
 80068de:	75fb      	strb	r3, [r7, #23]

  *count = tmp & 0x7f;
 80068e0:	7dfb      	ldrb	r3, [r7, #23]
 80068e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	701a      	strb	r2, [r3, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;
 80068ec:	7dfb      	ldrb	r3, [r7, #23]
 80068ee:	09db      	lsrs	r3, r3, #7
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	bf14      	ite	ne
 80068fa:	2301      	movne	r3, #1
 80068fc:	2300      	moveq	r3, #0
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	701a      	strb	r2, [r3, #0]

  VL53L0X_writeReg(dev, 0x81, 0x00);
 8006904:	2200      	movs	r2, #0
 8006906:	2181      	movs	r1, #129	; 0x81
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f7ff fb01 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x06);
 800690e:	2206      	movs	r2, #6
 8006910:	21ff      	movs	r1, #255	; 0xff
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f7ff fafc 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x83, VL53L0X_readReg(dev,  0x83)  & ~0x04);
 8006918:	2183      	movs	r1, #131	; 0x83
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f7ff fb70 	bl	8006000 <VL53L0X_readReg>
 8006920:	4603      	mov	r3, r0
 8006922:	f023 0304 	bic.w	r3, r3, #4
 8006926:	b2db      	uxtb	r3, r3
 8006928:	461a      	mov	r2, r3
 800692a:	2183      	movs	r1, #131	; 0x83
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f7ff faef 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x01);
 8006932:	2201      	movs	r2, #1
 8006934:	21ff      	movs	r1, #255	; 0xff
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f7ff faea 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x00, 0x01);
 800693c:	2201      	movs	r2, #1
 800693e:	2100      	movs	r1, #0
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f7ff fae5 	bl	8005f10 <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x00);
 8006946:	2200      	movs	r2, #0
 8006948:	21ff      	movs	r1, #255	; 0xff
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f7ff fae0 	bl	8005f10 <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x80, 0x00);
 8006950:	2200      	movs	r2, #0
 8006952:	2180      	movs	r1, #128	; 0x80
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f7ff fadb 	bl	8005f10 <VL53L0X_writeReg>

  return true;
 800695a:	2301      	movs	r3, #1
}
 800695c:	4618      	mov	r0, r3
 800695e:	3718      	adds	r7, #24
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <VL53L0X_getSequenceStepEnables>:


// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void VL53L0X_getSequenceStepEnables( VL53L0X* dev,  VL53L0X_SequenceStepEnables* enables)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  uint8_t sequence_config = VL53L0X_readReg(dev,  SYSTEM_SEQUENCE_CONFIG);
 800696e:	2101      	movs	r1, #1
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f7ff fb45 	bl	8006000 <VL53L0X_readReg>
 8006976:	4603      	mov	r3, r0
 8006978:	73fb      	strb	r3, [r7, #15]

  enables->tcc          = (sequence_config >> 4) & 0x1;
 800697a:	7bfb      	ldrb	r3, [r7, #15]
 800697c:	091b      	lsrs	r3, r3, #4
 800697e:	b2db      	uxtb	r3, r3
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	2b00      	cmp	r3, #0
 8006986:	bf14      	ite	ne
 8006988:	2301      	movne	r3, #1
 800698a:	2300      	moveq	r3, #0
 800698c:	b2da      	uxtb	r2, r3
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	701a      	strb	r2, [r3, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 8006992:	7bfb      	ldrb	r3, [r7, #15]
 8006994:	08db      	lsrs	r3, r3, #3
 8006996:	b2db      	uxtb	r3, r3
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	2b00      	cmp	r3, #0
 800699e:	bf14      	ite	ne
 80069a0:	2301      	movne	r3, #1
 80069a2:	2300      	moveq	r3, #0
 80069a4:	b2da      	uxtb	r2, r3
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	709a      	strb	r2, [r3, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 80069aa:	7bfb      	ldrb	r3, [r7, #15]
 80069ac:	089b      	lsrs	r3, r3, #2
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	f003 0301 	and.w	r3, r3, #1
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	bf14      	ite	ne
 80069b8:	2301      	movne	r3, #1
 80069ba:	2300      	moveq	r3, #0
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	705a      	strb	r2, [r3, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 80069c2:	7bfb      	ldrb	r3, [r7, #15]
 80069c4:	099b      	lsrs	r3, r3, #6
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	bf14      	ite	ne
 80069d0:	2301      	movne	r3, #1
 80069d2:	2300      	moveq	r3, #0
 80069d4:	b2da      	uxtb	r2, r3
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	70da      	strb	r2, [r3, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 80069da:	7bfb      	ldrb	r3, [r7, #15]
 80069dc:	09db      	lsrs	r3, r3, #7
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	f003 0301 	and.w	r3, r3, #1
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	bf14      	ite	ne
 80069e8:	2301      	movne	r3, #1
 80069ea:	2300      	moveq	r3, #0
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	711a      	strb	r2, [r3, #4]
}
 80069f2:	bf00      	nop
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <VL53L0X_getSequenceStepTimeouts>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X_getSequenceStepTimeouts( VL53L0X* dev,  VL53L0X_SequenceStepEnables* enables,  VL53L0X_SequenceStepTimeouts* timeouts)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b084      	sub	sp, #16
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	60f8      	str	r0, [r7, #12]
 8006a02:	60b9      	str	r1, [r7, #8]
 8006a04:	607a      	str	r2, [r7, #4]
  timeouts->pre_range_vcsel_period_pclks = VL53L0X_getVcselPulsePeriod(dev, VcselPeriodPreRange);
 8006a06:	2100      	movs	r1, #0
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f7ff fe59 	bl	80066c0 <VL53L0X_getVcselPulsePeriod>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = VL53L0X_readReg(dev,  MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 8006a16:	2146      	movs	r1, #70	; 0x46
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f7ff faf1 	bl	8006000 <VL53L0X_readReg>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	3301      	adds	r3, #1
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us = VL53L0X_timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks, timeouts->pre_range_vcsel_period_pclks);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	889a      	ldrh	r2, [r3, #4]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	881b      	ldrh	r3, [r3, #0]
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	4619      	mov	r1, r3
 8006a36:	4610      	mov	r0, r2
 8006a38:	f000 f88c 	bl	8006b54 <VL53L0X_timeoutMclksToMicroseconds>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks = VL53L0X_decodeTimeout(VL53L0X_readReg16Bit(dev, PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8006a42:	2151      	movs	r1, #81	; 0x51
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f7ff fb03 	bl	8006050 <VL53L0X_readReg16Bit>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f000 f840 	bl	8006ad2 <VL53L0X_decodeTimeout>
 8006a52:	4603      	mov	r3, r0
 8006a54:	461a      	mov	r2, r3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us = VL53L0X_timeoutMclksToMicroseconds(timeouts->pre_range_mclks, timeouts->pre_range_vcsel_period_pclks);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	88da      	ldrh	r2, [r3, #6]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	4619      	mov	r1, r3
 8006a66:	4610      	mov	r0, r2
 8006a68:	f000 f874 	bl	8006b54 <VL53L0X_timeoutMclksToMicroseconds>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = VL53L0X_getVcselPulsePeriod(dev, VcselPeriodFinalRange);
 8006a72:	2101      	movs	r1, #1
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f7ff fe23 	bl	80066c0 <VL53L0X_getVcselPulsePeriod>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks = VL53L0X_decodeTimeout(VL53L0X_readReg16Bit(dev, FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8006a82:	2171      	movs	r1, #113	; 0x71
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f7ff fae3 	bl	8006050 <VL53L0X_readReg16Bit>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f000 f820 	bl	8006ad2 <VL53L0X_decodeTimeout>
 8006a92:	4603      	mov	r3, r0
 8006a94:	461a      	mov	r2, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	811a      	strh	r2, [r3, #8]

  if (enables->pre_range)
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	78db      	ldrb	r3, [r3, #3]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d007      	beq.n	8006ab2 <VL53L0X_getSequenceStepTimeouts+0xb8>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	891a      	ldrh	r2, [r3, #8]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	88db      	ldrh	r3, [r3, #6]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us = VL53L0X_timeoutMclksToMicroseconds(timeouts->final_range_mclks, timeouts->final_range_vcsel_period_pclks);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	891a      	ldrh	r2, [r3, #8]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	885b      	ldrh	r3, [r3, #2]
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	4619      	mov	r1, r3
 8006abe:	4610      	mov	r0, r2
 8006ac0:	f000 f848 	bl	8006b54 <VL53L0X_timeoutMclksToMicroseconds>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	615a      	str	r2, [r3, #20]
}
 8006aca:	bf00      	nop
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <VL53L0X_decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t VL53L0X_decodeTimeout(uint16_t reg_val)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b083      	sub	sp, #12
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	4603      	mov	r3, r0
 8006ada:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 8006adc:	88fb      	ldrh	r3, [r7, #6]
 8006ade:	b2db      	uxtb	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8006ae0:	88fa      	ldrh	r2, [r7, #6]
 8006ae2:	0a12      	lsrs	r2, r2, #8
 8006ae4:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 8006ae6:	4093      	lsls	r3, r2
 8006ae8:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8006aea:	3301      	adds	r3, #1
 8006aec:	b29b      	uxth	r3, r3
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <VL53L0X_encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
uint16_t VL53L0X_encodeTimeout(uint16_t timeout_mclks)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b085      	sub	sp, #20
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	4603      	mov	r3, r0
 8006b02:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 8006b04:	2300      	movs	r3, #0
 8006b06:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	817b      	strh	r3, [r7, #10]

  if (timeout_mclks > 0)
 8006b0c:	88fb      	ldrh	r3, [r7, #6]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d018      	beq.n	8006b44 <VL53L0X_encodeTimeout+0x4a>
  {
    ls_byte = timeout_mclks - 1;
 8006b12:	88fb      	ldrh	r3, [r7, #6]
 8006b14:	3b01      	subs	r3, #1
 8006b16:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 8006b18:	e005      	b.n	8006b26 <VL53L0X_encodeTimeout+0x2c>
    {
      ls_byte >>= 1;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	085b      	lsrs	r3, r3, #1
 8006b1e:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 8006b20:	897b      	ldrh	r3, [r7, #10]
 8006b22:	3301      	adds	r3, #1
 8006b24:	817b      	strh	r3, [r7, #10]
    while ((ls_byte & 0xFFFFFF00) > 0)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1f4      	bne.n	8006b1a <VL53L0X_encodeTimeout+0x20>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 8006b30:	897b      	ldrh	r3, [r7, #10]
 8006b32:	021b      	lsls	r3, r3, #8
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	e000      	b.n	8006b46 <VL53L0X_encodeTimeout+0x4c>
  }
  else { return 0; }
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
	...

08006b54 <VL53L0X_timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X_timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	460a      	mov	r2, r1
 8006b5e:	80fb      	strh	r3, [r7, #6]
 8006b60:	4613      	mov	r3, r2
 8006b62:	717b      	strb	r3, [r7, #5]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8006b64:	797b      	ldrb	r3, [r7, #5]
 8006b66:	4a0d      	ldr	r2, [pc, #52]	; (8006b9c <VL53L0X_timeoutMclksToMicroseconds+0x48>)
 8006b68:	fb02 f303 	mul.w	r3, r2, r3
 8006b6c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006b70:	4a0b      	ldr	r2, [pc, #44]	; (8006ba0 <VL53L0X_timeoutMclksToMicroseconds+0x4c>)
 8006b72:	fba2 2303 	umull	r2, r3, r2, r3
 8006b76:	099b      	lsrs	r3, r3, #6
 8006b78:	60fb      	str	r3, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8006b7a:	88fb      	ldrh	r3, [r7, #6]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	fb03 f202 	mul.w	r2, r3, r2
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	085b      	lsrs	r3, r3, #1
 8006b86:	4413      	add	r3, r2
 8006b88:	4a05      	ldr	r2, [pc, #20]	; (8006ba0 <VL53L0X_timeoutMclksToMicroseconds+0x4c>)
 8006b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b8e:	099b      	lsrs	r3, r3, #6
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3714      	adds	r7, #20
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	003a2f00 	.word	0x003a2f00
 8006ba0:	10624dd3 	.word	0x10624dd3

08006ba4 <VL53L0X_timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X_timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	460b      	mov	r3, r1
 8006bae:	70fb      	strb	r3, [r7, #3]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8006bb0:	78fb      	ldrb	r3, [r7, #3]
 8006bb2:	4a0d      	ldr	r2, [pc, #52]	; (8006be8 <VL53L0X_timeoutMicrosecondsToMclks+0x44>)
 8006bb4:	fb02 f303 	mul.w	r3, r2, r3
 8006bb8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006bbc:	4a0b      	ldr	r2, [pc, #44]	; (8006bec <VL53L0X_timeoutMicrosecondsToMclks+0x48>)
 8006bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc2:	099b      	lsrs	r3, r3, #6
 8006bc4:	60fb      	str	r3, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006bcc:	fb03 f202 	mul.w	r2, r3, r2
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	085b      	lsrs	r3, r3, #1
 8006bd4:	441a      	add	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3714      	adds	r7, #20
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	003a2f00 	.word	0x003a2f00
 8006bec:	10624dd3 	.word	0x10624dd3

08006bf0 <VL53L0X_performSingleRefCalibration>:


// based on VL53L0X_perform_single_ref_calibration()
bool VL53L0X_performSingleRefCalibration( VL53L0X* dev, uint8_t vhv_init_byte)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	70fb      	strb	r3, [r7, #3]
  VL53L0X_writeReg(dev, SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 8006bfc:	78fb      	ldrb	r3, [r7, #3]
 8006bfe:	f043 0301 	orr.w	r3, r3, #1
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	461a      	mov	r2, r3
 8006c06:	2100      	movs	r1, #0
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f7ff f981 	bl	8005f10 <VL53L0X_writeReg>

  VL53L0X_startTimeout(dev);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f821 	bl	8006c56 <VL53L0X_startTimeout>
  while ((VL53L0X_readReg(dev,  RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8006c14:	e007      	b.n	8006c26 <VL53L0X_performSingleRefCalibration+0x36>
  {
    if (VL53L0X_checkTimeoutExpired(dev)) { return false; }
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f82a 	bl	8006c70 <VL53L0X_checkTimeoutExpired>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d001      	beq.n	8006c26 <VL53L0X_performSingleRefCalibration+0x36>
 8006c22:	2300      	movs	r3, #0
 8006c24:	e013      	b.n	8006c4e <VL53L0X_performSingleRefCalibration+0x5e>
  while ((VL53L0X_readReg(dev,  RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8006c26:	2113      	movs	r1, #19
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f7ff f9e9 	bl	8006000 <VL53L0X_readReg>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	f003 0307 	and.w	r3, r3, #7
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d0ee      	beq.n	8006c16 <VL53L0X_performSingleRefCalibration+0x26>
  }

  VL53L0X_writeReg(dev, SYSTEM_INTERRUPT_CLEAR, 0x01);
 8006c38:	2201      	movs	r2, #1
 8006c3a:	210b      	movs	r1, #11
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f7ff f967 	bl	8005f10 <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, SYSRANGE_START, 0x00);
 8006c42:	2200      	movs	r2, #0
 8006c44:	2100      	movs	r1, #0
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7ff f962 	bl	8005f10 <VL53L0X_writeReg>

  return true;
 8006c4c:	2301      	movs	r3, #1
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3708      	adds	r7, #8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <VL53L0X_startTimeout>:


void VL53L0X_startTimeout( VL53L0X* dev){
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b082      	sub	sp, #8
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
	dev->timeout_start_ms = HAL_GetTick();
 8006c5e:	f7fa f9a1 	bl	8000fa4 <HAL_GetTick>
 8006c62:	4602      	mov	r2, r0
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	60da      	str	r2, [r3, #12]
}
 8006c68:	bf00      	nop
 8006c6a:	3708      	adds	r7, #8
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <VL53L0X_checkTimeoutExpired>:

bool VL53L0X_checkTimeoutExpired( VL53L0X* dev){
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
	return (dev->io_timeout > 0 && (HAL_GetTick() - dev->timeout_start_ms) > dev->io_timeout);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00b      	beq.n	8006c98 <VL53L0X_checkTimeoutExpired+0x28>
 8006c80:	f7fa f990 	bl	8000fa4 <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	1ad2      	subs	r2, r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d901      	bls.n	8006c98 <VL53L0X_checkTimeoutExpired+0x28>
 8006c94:	2301      	movs	r3, #1
 8006c96:	e000      	b.n	8006c9a <VL53L0X_checkTimeoutExpired+0x2a>
 8006c98:	2300      	movs	r3, #0
 8006c9a:	f003 0301 	and.w	r3, r3, #1
 8006c9e:	b2db      	uxtb	r3, r3
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3708      	adds	r7, #8
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <__errno>:
 8006ca8:	4b01      	ldr	r3, [pc, #4]	; (8006cb0 <__errno+0x8>)
 8006caa:	6818      	ldr	r0, [r3, #0]
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	24000028 	.word	0x24000028

08006cb4 <__libc_init_array>:
 8006cb4:	b570      	push	{r4, r5, r6, lr}
 8006cb6:	4d0d      	ldr	r5, [pc, #52]	; (8006cec <__libc_init_array+0x38>)
 8006cb8:	4c0d      	ldr	r4, [pc, #52]	; (8006cf0 <__libc_init_array+0x3c>)
 8006cba:	1b64      	subs	r4, r4, r5
 8006cbc:	10a4      	asrs	r4, r4, #2
 8006cbe:	2600      	movs	r6, #0
 8006cc0:	42a6      	cmp	r6, r4
 8006cc2:	d109      	bne.n	8006cd8 <__libc_init_array+0x24>
 8006cc4:	4d0b      	ldr	r5, [pc, #44]	; (8006cf4 <__libc_init_array+0x40>)
 8006cc6:	4c0c      	ldr	r4, [pc, #48]	; (8006cf8 <__libc_init_array+0x44>)
 8006cc8:	f000 fc8e 	bl	80075e8 <_init>
 8006ccc:	1b64      	subs	r4, r4, r5
 8006cce:	10a4      	asrs	r4, r4, #2
 8006cd0:	2600      	movs	r6, #0
 8006cd2:	42a6      	cmp	r6, r4
 8006cd4:	d105      	bne.n	8006ce2 <__libc_init_array+0x2e>
 8006cd6:	bd70      	pop	{r4, r5, r6, pc}
 8006cd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cdc:	4798      	blx	r3
 8006cde:	3601      	adds	r6, #1
 8006ce0:	e7ee      	b.n	8006cc0 <__libc_init_array+0xc>
 8006ce2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ce6:	4798      	blx	r3
 8006ce8:	3601      	adds	r6, #1
 8006cea:	e7f2      	b.n	8006cd2 <__libc_init_array+0x1e>
 8006cec:	080076d0 	.word	0x080076d0
 8006cf0:	080076d0 	.word	0x080076d0
 8006cf4:	080076d0 	.word	0x080076d0
 8006cf8:	080076d4 	.word	0x080076d4

08006cfc <memset>:
 8006cfc:	4402      	add	r2, r0
 8006cfe:	4603      	mov	r3, r0
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d100      	bne.n	8006d06 <memset+0xa>
 8006d04:	4770      	bx	lr
 8006d06:	f803 1b01 	strb.w	r1, [r3], #1
 8006d0a:	e7f9      	b.n	8006d00 <memset+0x4>

08006d0c <siprintf>:
 8006d0c:	b40e      	push	{r1, r2, r3}
 8006d0e:	b500      	push	{lr}
 8006d10:	b09c      	sub	sp, #112	; 0x70
 8006d12:	ab1d      	add	r3, sp, #116	; 0x74
 8006d14:	9002      	str	r0, [sp, #8]
 8006d16:	9006      	str	r0, [sp, #24]
 8006d18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d1c:	4809      	ldr	r0, [pc, #36]	; (8006d44 <siprintf+0x38>)
 8006d1e:	9107      	str	r1, [sp, #28]
 8006d20:	9104      	str	r1, [sp, #16]
 8006d22:	4909      	ldr	r1, [pc, #36]	; (8006d48 <siprintf+0x3c>)
 8006d24:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d28:	9105      	str	r1, [sp, #20]
 8006d2a:	6800      	ldr	r0, [r0, #0]
 8006d2c:	9301      	str	r3, [sp, #4]
 8006d2e:	a902      	add	r1, sp, #8
 8006d30:	f000 f868 	bl	8006e04 <_svfiprintf_r>
 8006d34:	9b02      	ldr	r3, [sp, #8]
 8006d36:	2200      	movs	r2, #0
 8006d38:	701a      	strb	r2, [r3, #0]
 8006d3a:	b01c      	add	sp, #112	; 0x70
 8006d3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d40:	b003      	add	sp, #12
 8006d42:	4770      	bx	lr
 8006d44:	24000028 	.word	0x24000028
 8006d48:	ffff0208 	.word	0xffff0208

08006d4c <__ssputs_r>:
 8006d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d50:	688e      	ldr	r6, [r1, #8]
 8006d52:	429e      	cmp	r6, r3
 8006d54:	4682      	mov	sl, r0
 8006d56:	460c      	mov	r4, r1
 8006d58:	4690      	mov	r8, r2
 8006d5a:	461f      	mov	r7, r3
 8006d5c:	d838      	bhi.n	8006dd0 <__ssputs_r+0x84>
 8006d5e:	898a      	ldrh	r2, [r1, #12]
 8006d60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d64:	d032      	beq.n	8006dcc <__ssputs_r+0x80>
 8006d66:	6825      	ldr	r5, [r4, #0]
 8006d68:	6909      	ldr	r1, [r1, #16]
 8006d6a:	eba5 0901 	sub.w	r9, r5, r1
 8006d6e:	6965      	ldr	r5, [r4, #20]
 8006d70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d78:	3301      	adds	r3, #1
 8006d7a:	444b      	add	r3, r9
 8006d7c:	106d      	asrs	r5, r5, #1
 8006d7e:	429d      	cmp	r5, r3
 8006d80:	bf38      	it	cc
 8006d82:	461d      	movcc	r5, r3
 8006d84:	0553      	lsls	r3, r2, #21
 8006d86:	d531      	bpl.n	8006dec <__ssputs_r+0xa0>
 8006d88:	4629      	mov	r1, r5
 8006d8a:	f000 fb63 	bl	8007454 <_malloc_r>
 8006d8e:	4606      	mov	r6, r0
 8006d90:	b950      	cbnz	r0, 8006da8 <__ssputs_r+0x5c>
 8006d92:	230c      	movs	r3, #12
 8006d94:	f8ca 3000 	str.w	r3, [sl]
 8006d98:	89a3      	ldrh	r3, [r4, #12]
 8006d9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d9e:	81a3      	strh	r3, [r4, #12]
 8006da0:	f04f 30ff 	mov.w	r0, #4294967295
 8006da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006da8:	6921      	ldr	r1, [r4, #16]
 8006daa:	464a      	mov	r2, r9
 8006dac:	f000 fabe 	bl	800732c <memcpy>
 8006db0:	89a3      	ldrh	r3, [r4, #12]
 8006db2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dba:	81a3      	strh	r3, [r4, #12]
 8006dbc:	6126      	str	r6, [r4, #16]
 8006dbe:	6165      	str	r5, [r4, #20]
 8006dc0:	444e      	add	r6, r9
 8006dc2:	eba5 0509 	sub.w	r5, r5, r9
 8006dc6:	6026      	str	r6, [r4, #0]
 8006dc8:	60a5      	str	r5, [r4, #8]
 8006dca:	463e      	mov	r6, r7
 8006dcc:	42be      	cmp	r6, r7
 8006dce:	d900      	bls.n	8006dd2 <__ssputs_r+0x86>
 8006dd0:	463e      	mov	r6, r7
 8006dd2:	6820      	ldr	r0, [r4, #0]
 8006dd4:	4632      	mov	r2, r6
 8006dd6:	4641      	mov	r1, r8
 8006dd8:	f000 fab6 	bl	8007348 <memmove>
 8006ddc:	68a3      	ldr	r3, [r4, #8]
 8006dde:	1b9b      	subs	r3, r3, r6
 8006de0:	60a3      	str	r3, [r4, #8]
 8006de2:	6823      	ldr	r3, [r4, #0]
 8006de4:	4433      	add	r3, r6
 8006de6:	6023      	str	r3, [r4, #0]
 8006de8:	2000      	movs	r0, #0
 8006dea:	e7db      	b.n	8006da4 <__ssputs_r+0x58>
 8006dec:	462a      	mov	r2, r5
 8006dee:	f000 fba5 	bl	800753c <_realloc_r>
 8006df2:	4606      	mov	r6, r0
 8006df4:	2800      	cmp	r0, #0
 8006df6:	d1e1      	bne.n	8006dbc <__ssputs_r+0x70>
 8006df8:	6921      	ldr	r1, [r4, #16]
 8006dfa:	4650      	mov	r0, sl
 8006dfc:	f000 fabe 	bl	800737c <_free_r>
 8006e00:	e7c7      	b.n	8006d92 <__ssputs_r+0x46>
	...

08006e04 <_svfiprintf_r>:
 8006e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e08:	4698      	mov	r8, r3
 8006e0a:	898b      	ldrh	r3, [r1, #12]
 8006e0c:	061b      	lsls	r3, r3, #24
 8006e0e:	b09d      	sub	sp, #116	; 0x74
 8006e10:	4607      	mov	r7, r0
 8006e12:	460d      	mov	r5, r1
 8006e14:	4614      	mov	r4, r2
 8006e16:	d50e      	bpl.n	8006e36 <_svfiprintf_r+0x32>
 8006e18:	690b      	ldr	r3, [r1, #16]
 8006e1a:	b963      	cbnz	r3, 8006e36 <_svfiprintf_r+0x32>
 8006e1c:	2140      	movs	r1, #64	; 0x40
 8006e1e:	f000 fb19 	bl	8007454 <_malloc_r>
 8006e22:	6028      	str	r0, [r5, #0]
 8006e24:	6128      	str	r0, [r5, #16]
 8006e26:	b920      	cbnz	r0, 8006e32 <_svfiprintf_r+0x2e>
 8006e28:	230c      	movs	r3, #12
 8006e2a:	603b      	str	r3, [r7, #0]
 8006e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e30:	e0d1      	b.n	8006fd6 <_svfiprintf_r+0x1d2>
 8006e32:	2340      	movs	r3, #64	; 0x40
 8006e34:	616b      	str	r3, [r5, #20]
 8006e36:	2300      	movs	r3, #0
 8006e38:	9309      	str	r3, [sp, #36]	; 0x24
 8006e3a:	2320      	movs	r3, #32
 8006e3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e40:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e44:	2330      	movs	r3, #48	; 0x30
 8006e46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006ff0 <_svfiprintf_r+0x1ec>
 8006e4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e4e:	f04f 0901 	mov.w	r9, #1
 8006e52:	4623      	mov	r3, r4
 8006e54:	469a      	mov	sl, r3
 8006e56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e5a:	b10a      	cbz	r2, 8006e60 <_svfiprintf_r+0x5c>
 8006e5c:	2a25      	cmp	r2, #37	; 0x25
 8006e5e:	d1f9      	bne.n	8006e54 <_svfiprintf_r+0x50>
 8006e60:	ebba 0b04 	subs.w	fp, sl, r4
 8006e64:	d00b      	beq.n	8006e7e <_svfiprintf_r+0x7a>
 8006e66:	465b      	mov	r3, fp
 8006e68:	4622      	mov	r2, r4
 8006e6a:	4629      	mov	r1, r5
 8006e6c:	4638      	mov	r0, r7
 8006e6e:	f7ff ff6d 	bl	8006d4c <__ssputs_r>
 8006e72:	3001      	adds	r0, #1
 8006e74:	f000 80aa 	beq.w	8006fcc <_svfiprintf_r+0x1c8>
 8006e78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e7a:	445a      	add	r2, fp
 8006e7c:	9209      	str	r2, [sp, #36]	; 0x24
 8006e7e:	f89a 3000 	ldrb.w	r3, [sl]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f000 80a2 	beq.w	8006fcc <_svfiprintf_r+0x1c8>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e92:	f10a 0a01 	add.w	sl, sl, #1
 8006e96:	9304      	str	r3, [sp, #16]
 8006e98:	9307      	str	r3, [sp, #28]
 8006e9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e9e:	931a      	str	r3, [sp, #104]	; 0x68
 8006ea0:	4654      	mov	r4, sl
 8006ea2:	2205      	movs	r2, #5
 8006ea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ea8:	4851      	ldr	r0, [pc, #324]	; (8006ff0 <_svfiprintf_r+0x1ec>)
 8006eaa:	f7f9 fa39 	bl	8000320 <memchr>
 8006eae:	9a04      	ldr	r2, [sp, #16]
 8006eb0:	b9d8      	cbnz	r0, 8006eea <_svfiprintf_r+0xe6>
 8006eb2:	06d0      	lsls	r0, r2, #27
 8006eb4:	bf44      	itt	mi
 8006eb6:	2320      	movmi	r3, #32
 8006eb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ebc:	0711      	lsls	r1, r2, #28
 8006ebe:	bf44      	itt	mi
 8006ec0:	232b      	movmi	r3, #43	; 0x2b
 8006ec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ec6:	f89a 3000 	ldrb.w	r3, [sl]
 8006eca:	2b2a      	cmp	r3, #42	; 0x2a
 8006ecc:	d015      	beq.n	8006efa <_svfiprintf_r+0xf6>
 8006ece:	9a07      	ldr	r2, [sp, #28]
 8006ed0:	4654      	mov	r4, sl
 8006ed2:	2000      	movs	r0, #0
 8006ed4:	f04f 0c0a 	mov.w	ip, #10
 8006ed8:	4621      	mov	r1, r4
 8006eda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ede:	3b30      	subs	r3, #48	; 0x30
 8006ee0:	2b09      	cmp	r3, #9
 8006ee2:	d94e      	bls.n	8006f82 <_svfiprintf_r+0x17e>
 8006ee4:	b1b0      	cbz	r0, 8006f14 <_svfiprintf_r+0x110>
 8006ee6:	9207      	str	r2, [sp, #28]
 8006ee8:	e014      	b.n	8006f14 <_svfiprintf_r+0x110>
 8006eea:	eba0 0308 	sub.w	r3, r0, r8
 8006eee:	fa09 f303 	lsl.w	r3, r9, r3
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	9304      	str	r3, [sp, #16]
 8006ef6:	46a2      	mov	sl, r4
 8006ef8:	e7d2      	b.n	8006ea0 <_svfiprintf_r+0x9c>
 8006efa:	9b03      	ldr	r3, [sp, #12]
 8006efc:	1d19      	adds	r1, r3, #4
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	9103      	str	r1, [sp, #12]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	bfbb      	ittet	lt
 8006f06:	425b      	neglt	r3, r3
 8006f08:	f042 0202 	orrlt.w	r2, r2, #2
 8006f0c:	9307      	strge	r3, [sp, #28]
 8006f0e:	9307      	strlt	r3, [sp, #28]
 8006f10:	bfb8      	it	lt
 8006f12:	9204      	strlt	r2, [sp, #16]
 8006f14:	7823      	ldrb	r3, [r4, #0]
 8006f16:	2b2e      	cmp	r3, #46	; 0x2e
 8006f18:	d10c      	bne.n	8006f34 <_svfiprintf_r+0x130>
 8006f1a:	7863      	ldrb	r3, [r4, #1]
 8006f1c:	2b2a      	cmp	r3, #42	; 0x2a
 8006f1e:	d135      	bne.n	8006f8c <_svfiprintf_r+0x188>
 8006f20:	9b03      	ldr	r3, [sp, #12]
 8006f22:	1d1a      	adds	r2, r3, #4
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	9203      	str	r2, [sp, #12]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	bfb8      	it	lt
 8006f2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f30:	3402      	adds	r4, #2
 8006f32:	9305      	str	r3, [sp, #20]
 8006f34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007000 <_svfiprintf_r+0x1fc>
 8006f38:	7821      	ldrb	r1, [r4, #0]
 8006f3a:	2203      	movs	r2, #3
 8006f3c:	4650      	mov	r0, sl
 8006f3e:	f7f9 f9ef 	bl	8000320 <memchr>
 8006f42:	b140      	cbz	r0, 8006f56 <_svfiprintf_r+0x152>
 8006f44:	2340      	movs	r3, #64	; 0x40
 8006f46:	eba0 000a 	sub.w	r0, r0, sl
 8006f4a:	fa03 f000 	lsl.w	r0, r3, r0
 8006f4e:	9b04      	ldr	r3, [sp, #16]
 8006f50:	4303      	orrs	r3, r0
 8006f52:	3401      	adds	r4, #1
 8006f54:	9304      	str	r3, [sp, #16]
 8006f56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f5a:	4826      	ldr	r0, [pc, #152]	; (8006ff4 <_svfiprintf_r+0x1f0>)
 8006f5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f60:	2206      	movs	r2, #6
 8006f62:	f7f9 f9dd 	bl	8000320 <memchr>
 8006f66:	2800      	cmp	r0, #0
 8006f68:	d038      	beq.n	8006fdc <_svfiprintf_r+0x1d8>
 8006f6a:	4b23      	ldr	r3, [pc, #140]	; (8006ff8 <_svfiprintf_r+0x1f4>)
 8006f6c:	bb1b      	cbnz	r3, 8006fb6 <_svfiprintf_r+0x1b2>
 8006f6e:	9b03      	ldr	r3, [sp, #12]
 8006f70:	3307      	adds	r3, #7
 8006f72:	f023 0307 	bic.w	r3, r3, #7
 8006f76:	3308      	adds	r3, #8
 8006f78:	9303      	str	r3, [sp, #12]
 8006f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f7c:	4433      	add	r3, r6
 8006f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8006f80:	e767      	b.n	8006e52 <_svfiprintf_r+0x4e>
 8006f82:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f86:	460c      	mov	r4, r1
 8006f88:	2001      	movs	r0, #1
 8006f8a:	e7a5      	b.n	8006ed8 <_svfiprintf_r+0xd4>
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	3401      	adds	r4, #1
 8006f90:	9305      	str	r3, [sp, #20]
 8006f92:	4619      	mov	r1, r3
 8006f94:	f04f 0c0a 	mov.w	ip, #10
 8006f98:	4620      	mov	r0, r4
 8006f9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f9e:	3a30      	subs	r2, #48	; 0x30
 8006fa0:	2a09      	cmp	r2, #9
 8006fa2:	d903      	bls.n	8006fac <_svfiprintf_r+0x1a8>
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d0c5      	beq.n	8006f34 <_svfiprintf_r+0x130>
 8006fa8:	9105      	str	r1, [sp, #20]
 8006faa:	e7c3      	b.n	8006f34 <_svfiprintf_r+0x130>
 8006fac:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fb0:	4604      	mov	r4, r0
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e7f0      	b.n	8006f98 <_svfiprintf_r+0x194>
 8006fb6:	ab03      	add	r3, sp, #12
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	462a      	mov	r2, r5
 8006fbc:	4b0f      	ldr	r3, [pc, #60]	; (8006ffc <_svfiprintf_r+0x1f8>)
 8006fbe:	a904      	add	r1, sp, #16
 8006fc0:	4638      	mov	r0, r7
 8006fc2:	f3af 8000 	nop.w
 8006fc6:	1c42      	adds	r2, r0, #1
 8006fc8:	4606      	mov	r6, r0
 8006fca:	d1d6      	bne.n	8006f7a <_svfiprintf_r+0x176>
 8006fcc:	89ab      	ldrh	r3, [r5, #12]
 8006fce:	065b      	lsls	r3, r3, #25
 8006fd0:	f53f af2c 	bmi.w	8006e2c <_svfiprintf_r+0x28>
 8006fd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fd6:	b01d      	add	sp, #116	; 0x74
 8006fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fdc:	ab03      	add	r3, sp, #12
 8006fde:	9300      	str	r3, [sp, #0]
 8006fe0:	462a      	mov	r2, r5
 8006fe2:	4b06      	ldr	r3, [pc, #24]	; (8006ffc <_svfiprintf_r+0x1f8>)
 8006fe4:	a904      	add	r1, sp, #16
 8006fe6:	4638      	mov	r0, r7
 8006fe8:	f000 f87a 	bl	80070e0 <_printf_i>
 8006fec:	e7eb      	b.n	8006fc6 <_svfiprintf_r+0x1c2>
 8006fee:	bf00      	nop
 8006ff0:	08007694 	.word	0x08007694
 8006ff4:	0800769e 	.word	0x0800769e
 8006ff8:	00000000 	.word	0x00000000
 8006ffc:	08006d4d 	.word	0x08006d4d
 8007000:	0800769a 	.word	0x0800769a

08007004 <_printf_common>:
 8007004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007008:	4616      	mov	r6, r2
 800700a:	4699      	mov	r9, r3
 800700c:	688a      	ldr	r2, [r1, #8]
 800700e:	690b      	ldr	r3, [r1, #16]
 8007010:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007014:	4293      	cmp	r3, r2
 8007016:	bfb8      	it	lt
 8007018:	4613      	movlt	r3, r2
 800701a:	6033      	str	r3, [r6, #0]
 800701c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007020:	4607      	mov	r7, r0
 8007022:	460c      	mov	r4, r1
 8007024:	b10a      	cbz	r2, 800702a <_printf_common+0x26>
 8007026:	3301      	adds	r3, #1
 8007028:	6033      	str	r3, [r6, #0]
 800702a:	6823      	ldr	r3, [r4, #0]
 800702c:	0699      	lsls	r1, r3, #26
 800702e:	bf42      	ittt	mi
 8007030:	6833      	ldrmi	r3, [r6, #0]
 8007032:	3302      	addmi	r3, #2
 8007034:	6033      	strmi	r3, [r6, #0]
 8007036:	6825      	ldr	r5, [r4, #0]
 8007038:	f015 0506 	ands.w	r5, r5, #6
 800703c:	d106      	bne.n	800704c <_printf_common+0x48>
 800703e:	f104 0a19 	add.w	sl, r4, #25
 8007042:	68e3      	ldr	r3, [r4, #12]
 8007044:	6832      	ldr	r2, [r6, #0]
 8007046:	1a9b      	subs	r3, r3, r2
 8007048:	42ab      	cmp	r3, r5
 800704a:	dc26      	bgt.n	800709a <_printf_common+0x96>
 800704c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007050:	1e13      	subs	r3, r2, #0
 8007052:	6822      	ldr	r2, [r4, #0]
 8007054:	bf18      	it	ne
 8007056:	2301      	movne	r3, #1
 8007058:	0692      	lsls	r2, r2, #26
 800705a:	d42b      	bmi.n	80070b4 <_printf_common+0xb0>
 800705c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007060:	4649      	mov	r1, r9
 8007062:	4638      	mov	r0, r7
 8007064:	47c0      	blx	r8
 8007066:	3001      	adds	r0, #1
 8007068:	d01e      	beq.n	80070a8 <_printf_common+0xa4>
 800706a:	6823      	ldr	r3, [r4, #0]
 800706c:	68e5      	ldr	r5, [r4, #12]
 800706e:	6832      	ldr	r2, [r6, #0]
 8007070:	f003 0306 	and.w	r3, r3, #6
 8007074:	2b04      	cmp	r3, #4
 8007076:	bf08      	it	eq
 8007078:	1aad      	subeq	r5, r5, r2
 800707a:	68a3      	ldr	r3, [r4, #8]
 800707c:	6922      	ldr	r2, [r4, #16]
 800707e:	bf0c      	ite	eq
 8007080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007084:	2500      	movne	r5, #0
 8007086:	4293      	cmp	r3, r2
 8007088:	bfc4      	itt	gt
 800708a:	1a9b      	subgt	r3, r3, r2
 800708c:	18ed      	addgt	r5, r5, r3
 800708e:	2600      	movs	r6, #0
 8007090:	341a      	adds	r4, #26
 8007092:	42b5      	cmp	r5, r6
 8007094:	d11a      	bne.n	80070cc <_printf_common+0xc8>
 8007096:	2000      	movs	r0, #0
 8007098:	e008      	b.n	80070ac <_printf_common+0xa8>
 800709a:	2301      	movs	r3, #1
 800709c:	4652      	mov	r2, sl
 800709e:	4649      	mov	r1, r9
 80070a0:	4638      	mov	r0, r7
 80070a2:	47c0      	blx	r8
 80070a4:	3001      	adds	r0, #1
 80070a6:	d103      	bne.n	80070b0 <_printf_common+0xac>
 80070a8:	f04f 30ff 	mov.w	r0, #4294967295
 80070ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070b0:	3501      	adds	r5, #1
 80070b2:	e7c6      	b.n	8007042 <_printf_common+0x3e>
 80070b4:	18e1      	adds	r1, r4, r3
 80070b6:	1c5a      	adds	r2, r3, #1
 80070b8:	2030      	movs	r0, #48	; 0x30
 80070ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070be:	4422      	add	r2, r4
 80070c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070c8:	3302      	adds	r3, #2
 80070ca:	e7c7      	b.n	800705c <_printf_common+0x58>
 80070cc:	2301      	movs	r3, #1
 80070ce:	4622      	mov	r2, r4
 80070d0:	4649      	mov	r1, r9
 80070d2:	4638      	mov	r0, r7
 80070d4:	47c0      	blx	r8
 80070d6:	3001      	adds	r0, #1
 80070d8:	d0e6      	beq.n	80070a8 <_printf_common+0xa4>
 80070da:	3601      	adds	r6, #1
 80070dc:	e7d9      	b.n	8007092 <_printf_common+0x8e>
	...

080070e0 <_printf_i>:
 80070e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070e4:	7e0f      	ldrb	r7, [r1, #24]
 80070e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80070e8:	2f78      	cmp	r7, #120	; 0x78
 80070ea:	4691      	mov	r9, r2
 80070ec:	4680      	mov	r8, r0
 80070ee:	460c      	mov	r4, r1
 80070f0:	469a      	mov	sl, r3
 80070f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80070f6:	d807      	bhi.n	8007108 <_printf_i+0x28>
 80070f8:	2f62      	cmp	r7, #98	; 0x62
 80070fa:	d80a      	bhi.n	8007112 <_printf_i+0x32>
 80070fc:	2f00      	cmp	r7, #0
 80070fe:	f000 80d8 	beq.w	80072b2 <_printf_i+0x1d2>
 8007102:	2f58      	cmp	r7, #88	; 0x58
 8007104:	f000 80a3 	beq.w	800724e <_printf_i+0x16e>
 8007108:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800710c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007110:	e03a      	b.n	8007188 <_printf_i+0xa8>
 8007112:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007116:	2b15      	cmp	r3, #21
 8007118:	d8f6      	bhi.n	8007108 <_printf_i+0x28>
 800711a:	a101      	add	r1, pc, #4	; (adr r1, 8007120 <_printf_i+0x40>)
 800711c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007120:	08007179 	.word	0x08007179
 8007124:	0800718d 	.word	0x0800718d
 8007128:	08007109 	.word	0x08007109
 800712c:	08007109 	.word	0x08007109
 8007130:	08007109 	.word	0x08007109
 8007134:	08007109 	.word	0x08007109
 8007138:	0800718d 	.word	0x0800718d
 800713c:	08007109 	.word	0x08007109
 8007140:	08007109 	.word	0x08007109
 8007144:	08007109 	.word	0x08007109
 8007148:	08007109 	.word	0x08007109
 800714c:	08007299 	.word	0x08007299
 8007150:	080071bd 	.word	0x080071bd
 8007154:	0800727b 	.word	0x0800727b
 8007158:	08007109 	.word	0x08007109
 800715c:	08007109 	.word	0x08007109
 8007160:	080072bb 	.word	0x080072bb
 8007164:	08007109 	.word	0x08007109
 8007168:	080071bd 	.word	0x080071bd
 800716c:	08007109 	.word	0x08007109
 8007170:	08007109 	.word	0x08007109
 8007174:	08007283 	.word	0x08007283
 8007178:	682b      	ldr	r3, [r5, #0]
 800717a:	1d1a      	adds	r2, r3, #4
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	602a      	str	r2, [r5, #0]
 8007180:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007184:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007188:	2301      	movs	r3, #1
 800718a:	e0a3      	b.n	80072d4 <_printf_i+0x1f4>
 800718c:	6820      	ldr	r0, [r4, #0]
 800718e:	6829      	ldr	r1, [r5, #0]
 8007190:	0606      	lsls	r6, r0, #24
 8007192:	f101 0304 	add.w	r3, r1, #4
 8007196:	d50a      	bpl.n	80071ae <_printf_i+0xce>
 8007198:	680e      	ldr	r6, [r1, #0]
 800719a:	602b      	str	r3, [r5, #0]
 800719c:	2e00      	cmp	r6, #0
 800719e:	da03      	bge.n	80071a8 <_printf_i+0xc8>
 80071a0:	232d      	movs	r3, #45	; 0x2d
 80071a2:	4276      	negs	r6, r6
 80071a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071a8:	485e      	ldr	r0, [pc, #376]	; (8007324 <_printf_i+0x244>)
 80071aa:	230a      	movs	r3, #10
 80071ac:	e019      	b.n	80071e2 <_printf_i+0x102>
 80071ae:	680e      	ldr	r6, [r1, #0]
 80071b0:	602b      	str	r3, [r5, #0]
 80071b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80071b6:	bf18      	it	ne
 80071b8:	b236      	sxthne	r6, r6
 80071ba:	e7ef      	b.n	800719c <_printf_i+0xbc>
 80071bc:	682b      	ldr	r3, [r5, #0]
 80071be:	6820      	ldr	r0, [r4, #0]
 80071c0:	1d19      	adds	r1, r3, #4
 80071c2:	6029      	str	r1, [r5, #0]
 80071c4:	0601      	lsls	r1, r0, #24
 80071c6:	d501      	bpl.n	80071cc <_printf_i+0xec>
 80071c8:	681e      	ldr	r6, [r3, #0]
 80071ca:	e002      	b.n	80071d2 <_printf_i+0xf2>
 80071cc:	0646      	lsls	r6, r0, #25
 80071ce:	d5fb      	bpl.n	80071c8 <_printf_i+0xe8>
 80071d0:	881e      	ldrh	r6, [r3, #0]
 80071d2:	4854      	ldr	r0, [pc, #336]	; (8007324 <_printf_i+0x244>)
 80071d4:	2f6f      	cmp	r7, #111	; 0x6f
 80071d6:	bf0c      	ite	eq
 80071d8:	2308      	moveq	r3, #8
 80071da:	230a      	movne	r3, #10
 80071dc:	2100      	movs	r1, #0
 80071de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071e2:	6865      	ldr	r5, [r4, #4]
 80071e4:	60a5      	str	r5, [r4, #8]
 80071e6:	2d00      	cmp	r5, #0
 80071e8:	bfa2      	ittt	ge
 80071ea:	6821      	ldrge	r1, [r4, #0]
 80071ec:	f021 0104 	bicge.w	r1, r1, #4
 80071f0:	6021      	strge	r1, [r4, #0]
 80071f2:	b90e      	cbnz	r6, 80071f8 <_printf_i+0x118>
 80071f4:	2d00      	cmp	r5, #0
 80071f6:	d04d      	beq.n	8007294 <_printf_i+0x1b4>
 80071f8:	4615      	mov	r5, r2
 80071fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80071fe:	fb03 6711 	mls	r7, r3, r1, r6
 8007202:	5dc7      	ldrb	r7, [r0, r7]
 8007204:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007208:	4637      	mov	r7, r6
 800720a:	42bb      	cmp	r3, r7
 800720c:	460e      	mov	r6, r1
 800720e:	d9f4      	bls.n	80071fa <_printf_i+0x11a>
 8007210:	2b08      	cmp	r3, #8
 8007212:	d10b      	bne.n	800722c <_printf_i+0x14c>
 8007214:	6823      	ldr	r3, [r4, #0]
 8007216:	07de      	lsls	r6, r3, #31
 8007218:	d508      	bpl.n	800722c <_printf_i+0x14c>
 800721a:	6923      	ldr	r3, [r4, #16]
 800721c:	6861      	ldr	r1, [r4, #4]
 800721e:	4299      	cmp	r1, r3
 8007220:	bfde      	ittt	le
 8007222:	2330      	movle	r3, #48	; 0x30
 8007224:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007228:	f105 35ff 	addle.w	r5, r5, #4294967295
 800722c:	1b52      	subs	r2, r2, r5
 800722e:	6122      	str	r2, [r4, #16]
 8007230:	f8cd a000 	str.w	sl, [sp]
 8007234:	464b      	mov	r3, r9
 8007236:	aa03      	add	r2, sp, #12
 8007238:	4621      	mov	r1, r4
 800723a:	4640      	mov	r0, r8
 800723c:	f7ff fee2 	bl	8007004 <_printf_common>
 8007240:	3001      	adds	r0, #1
 8007242:	d14c      	bne.n	80072de <_printf_i+0x1fe>
 8007244:	f04f 30ff 	mov.w	r0, #4294967295
 8007248:	b004      	add	sp, #16
 800724a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800724e:	4835      	ldr	r0, [pc, #212]	; (8007324 <_printf_i+0x244>)
 8007250:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007254:	6829      	ldr	r1, [r5, #0]
 8007256:	6823      	ldr	r3, [r4, #0]
 8007258:	f851 6b04 	ldr.w	r6, [r1], #4
 800725c:	6029      	str	r1, [r5, #0]
 800725e:	061d      	lsls	r5, r3, #24
 8007260:	d514      	bpl.n	800728c <_printf_i+0x1ac>
 8007262:	07df      	lsls	r7, r3, #31
 8007264:	bf44      	itt	mi
 8007266:	f043 0320 	orrmi.w	r3, r3, #32
 800726a:	6023      	strmi	r3, [r4, #0]
 800726c:	b91e      	cbnz	r6, 8007276 <_printf_i+0x196>
 800726e:	6823      	ldr	r3, [r4, #0]
 8007270:	f023 0320 	bic.w	r3, r3, #32
 8007274:	6023      	str	r3, [r4, #0]
 8007276:	2310      	movs	r3, #16
 8007278:	e7b0      	b.n	80071dc <_printf_i+0xfc>
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	f043 0320 	orr.w	r3, r3, #32
 8007280:	6023      	str	r3, [r4, #0]
 8007282:	2378      	movs	r3, #120	; 0x78
 8007284:	4828      	ldr	r0, [pc, #160]	; (8007328 <_printf_i+0x248>)
 8007286:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800728a:	e7e3      	b.n	8007254 <_printf_i+0x174>
 800728c:	0659      	lsls	r1, r3, #25
 800728e:	bf48      	it	mi
 8007290:	b2b6      	uxthmi	r6, r6
 8007292:	e7e6      	b.n	8007262 <_printf_i+0x182>
 8007294:	4615      	mov	r5, r2
 8007296:	e7bb      	b.n	8007210 <_printf_i+0x130>
 8007298:	682b      	ldr	r3, [r5, #0]
 800729a:	6826      	ldr	r6, [r4, #0]
 800729c:	6961      	ldr	r1, [r4, #20]
 800729e:	1d18      	adds	r0, r3, #4
 80072a0:	6028      	str	r0, [r5, #0]
 80072a2:	0635      	lsls	r5, r6, #24
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	d501      	bpl.n	80072ac <_printf_i+0x1cc>
 80072a8:	6019      	str	r1, [r3, #0]
 80072aa:	e002      	b.n	80072b2 <_printf_i+0x1d2>
 80072ac:	0670      	lsls	r0, r6, #25
 80072ae:	d5fb      	bpl.n	80072a8 <_printf_i+0x1c8>
 80072b0:	8019      	strh	r1, [r3, #0]
 80072b2:	2300      	movs	r3, #0
 80072b4:	6123      	str	r3, [r4, #16]
 80072b6:	4615      	mov	r5, r2
 80072b8:	e7ba      	b.n	8007230 <_printf_i+0x150>
 80072ba:	682b      	ldr	r3, [r5, #0]
 80072bc:	1d1a      	adds	r2, r3, #4
 80072be:	602a      	str	r2, [r5, #0]
 80072c0:	681d      	ldr	r5, [r3, #0]
 80072c2:	6862      	ldr	r2, [r4, #4]
 80072c4:	2100      	movs	r1, #0
 80072c6:	4628      	mov	r0, r5
 80072c8:	f7f9 f82a 	bl	8000320 <memchr>
 80072cc:	b108      	cbz	r0, 80072d2 <_printf_i+0x1f2>
 80072ce:	1b40      	subs	r0, r0, r5
 80072d0:	6060      	str	r0, [r4, #4]
 80072d2:	6863      	ldr	r3, [r4, #4]
 80072d4:	6123      	str	r3, [r4, #16]
 80072d6:	2300      	movs	r3, #0
 80072d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072dc:	e7a8      	b.n	8007230 <_printf_i+0x150>
 80072de:	6923      	ldr	r3, [r4, #16]
 80072e0:	462a      	mov	r2, r5
 80072e2:	4649      	mov	r1, r9
 80072e4:	4640      	mov	r0, r8
 80072e6:	47d0      	blx	sl
 80072e8:	3001      	adds	r0, #1
 80072ea:	d0ab      	beq.n	8007244 <_printf_i+0x164>
 80072ec:	6823      	ldr	r3, [r4, #0]
 80072ee:	079b      	lsls	r3, r3, #30
 80072f0:	d413      	bmi.n	800731a <_printf_i+0x23a>
 80072f2:	68e0      	ldr	r0, [r4, #12]
 80072f4:	9b03      	ldr	r3, [sp, #12]
 80072f6:	4298      	cmp	r0, r3
 80072f8:	bfb8      	it	lt
 80072fa:	4618      	movlt	r0, r3
 80072fc:	e7a4      	b.n	8007248 <_printf_i+0x168>
 80072fe:	2301      	movs	r3, #1
 8007300:	4632      	mov	r2, r6
 8007302:	4649      	mov	r1, r9
 8007304:	4640      	mov	r0, r8
 8007306:	47d0      	blx	sl
 8007308:	3001      	adds	r0, #1
 800730a:	d09b      	beq.n	8007244 <_printf_i+0x164>
 800730c:	3501      	adds	r5, #1
 800730e:	68e3      	ldr	r3, [r4, #12]
 8007310:	9903      	ldr	r1, [sp, #12]
 8007312:	1a5b      	subs	r3, r3, r1
 8007314:	42ab      	cmp	r3, r5
 8007316:	dcf2      	bgt.n	80072fe <_printf_i+0x21e>
 8007318:	e7eb      	b.n	80072f2 <_printf_i+0x212>
 800731a:	2500      	movs	r5, #0
 800731c:	f104 0619 	add.w	r6, r4, #25
 8007320:	e7f5      	b.n	800730e <_printf_i+0x22e>
 8007322:	bf00      	nop
 8007324:	080076a5 	.word	0x080076a5
 8007328:	080076b6 	.word	0x080076b6

0800732c <memcpy>:
 800732c:	440a      	add	r2, r1
 800732e:	4291      	cmp	r1, r2
 8007330:	f100 33ff 	add.w	r3, r0, #4294967295
 8007334:	d100      	bne.n	8007338 <memcpy+0xc>
 8007336:	4770      	bx	lr
 8007338:	b510      	push	{r4, lr}
 800733a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800733e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007342:	4291      	cmp	r1, r2
 8007344:	d1f9      	bne.n	800733a <memcpy+0xe>
 8007346:	bd10      	pop	{r4, pc}

08007348 <memmove>:
 8007348:	4288      	cmp	r0, r1
 800734a:	b510      	push	{r4, lr}
 800734c:	eb01 0402 	add.w	r4, r1, r2
 8007350:	d902      	bls.n	8007358 <memmove+0x10>
 8007352:	4284      	cmp	r4, r0
 8007354:	4623      	mov	r3, r4
 8007356:	d807      	bhi.n	8007368 <memmove+0x20>
 8007358:	1e43      	subs	r3, r0, #1
 800735a:	42a1      	cmp	r1, r4
 800735c:	d008      	beq.n	8007370 <memmove+0x28>
 800735e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007362:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007366:	e7f8      	b.n	800735a <memmove+0x12>
 8007368:	4402      	add	r2, r0
 800736a:	4601      	mov	r1, r0
 800736c:	428a      	cmp	r2, r1
 800736e:	d100      	bne.n	8007372 <memmove+0x2a>
 8007370:	bd10      	pop	{r4, pc}
 8007372:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007376:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800737a:	e7f7      	b.n	800736c <memmove+0x24>

0800737c <_free_r>:
 800737c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800737e:	2900      	cmp	r1, #0
 8007380:	d044      	beq.n	800740c <_free_r+0x90>
 8007382:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007386:	9001      	str	r0, [sp, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	f1a1 0404 	sub.w	r4, r1, #4
 800738e:	bfb8      	it	lt
 8007390:	18e4      	addlt	r4, r4, r3
 8007392:	f000 f913 	bl	80075bc <__malloc_lock>
 8007396:	4a1e      	ldr	r2, [pc, #120]	; (8007410 <_free_r+0x94>)
 8007398:	9801      	ldr	r0, [sp, #4]
 800739a:	6813      	ldr	r3, [r2, #0]
 800739c:	b933      	cbnz	r3, 80073ac <_free_r+0x30>
 800739e:	6063      	str	r3, [r4, #4]
 80073a0:	6014      	str	r4, [r2, #0]
 80073a2:	b003      	add	sp, #12
 80073a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073a8:	f000 b90e 	b.w	80075c8 <__malloc_unlock>
 80073ac:	42a3      	cmp	r3, r4
 80073ae:	d908      	bls.n	80073c2 <_free_r+0x46>
 80073b0:	6825      	ldr	r5, [r4, #0]
 80073b2:	1961      	adds	r1, r4, r5
 80073b4:	428b      	cmp	r3, r1
 80073b6:	bf01      	itttt	eq
 80073b8:	6819      	ldreq	r1, [r3, #0]
 80073ba:	685b      	ldreq	r3, [r3, #4]
 80073bc:	1949      	addeq	r1, r1, r5
 80073be:	6021      	streq	r1, [r4, #0]
 80073c0:	e7ed      	b.n	800739e <_free_r+0x22>
 80073c2:	461a      	mov	r2, r3
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	b10b      	cbz	r3, 80073cc <_free_r+0x50>
 80073c8:	42a3      	cmp	r3, r4
 80073ca:	d9fa      	bls.n	80073c2 <_free_r+0x46>
 80073cc:	6811      	ldr	r1, [r2, #0]
 80073ce:	1855      	adds	r5, r2, r1
 80073d0:	42a5      	cmp	r5, r4
 80073d2:	d10b      	bne.n	80073ec <_free_r+0x70>
 80073d4:	6824      	ldr	r4, [r4, #0]
 80073d6:	4421      	add	r1, r4
 80073d8:	1854      	adds	r4, r2, r1
 80073da:	42a3      	cmp	r3, r4
 80073dc:	6011      	str	r1, [r2, #0]
 80073de:	d1e0      	bne.n	80073a2 <_free_r+0x26>
 80073e0:	681c      	ldr	r4, [r3, #0]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	6053      	str	r3, [r2, #4]
 80073e6:	4421      	add	r1, r4
 80073e8:	6011      	str	r1, [r2, #0]
 80073ea:	e7da      	b.n	80073a2 <_free_r+0x26>
 80073ec:	d902      	bls.n	80073f4 <_free_r+0x78>
 80073ee:	230c      	movs	r3, #12
 80073f0:	6003      	str	r3, [r0, #0]
 80073f2:	e7d6      	b.n	80073a2 <_free_r+0x26>
 80073f4:	6825      	ldr	r5, [r4, #0]
 80073f6:	1961      	adds	r1, r4, r5
 80073f8:	428b      	cmp	r3, r1
 80073fa:	bf04      	itt	eq
 80073fc:	6819      	ldreq	r1, [r3, #0]
 80073fe:	685b      	ldreq	r3, [r3, #4]
 8007400:	6063      	str	r3, [r4, #4]
 8007402:	bf04      	itt	eq
 8007404:	1949      	addeq	r1, r1, r5
 8007406:	6021      	streq	r1, [r4, #0]
 8007408:	6054      	str	r4, [r2, #4]
 800740a:	e7ca      	b.n	80073a2 <_free_r+0x26>
 800740c:	b003      	add	sp, #12
 800740e:	bd30      	pop	{r4, r5, pc}
 8007410:	240001c4 	.word	0x240001c4

08007414 <sbrk_aligned>:
 8007414:	b570      	push	{r4, r5, r6, lr}
 8007416:	4e0e      	ldr	r6, [pc, #56]	; (8007450 <sbrk_aligned+0x3c>)
 8007418:	460c      	mov	r4, r1
 800741a:	6831      	ldr	r1, [r6, #0]
 800741c:	4605      	mov	r5, r0
 800741e:	b911      	cbnz	r1, 8007426 <sbrk_aligned+0x12>
 8007420:	f000 f8bc 	bl	800759c <_sbrk_r>
 8007424:	6030      	str	r0, [r6, #0]
 8007426:	4621      	mov	r1, r4
 8007428:	4628      	mov	r0, r5
 800742a:	f000 f8b7 	bl	800759c <_sbrk_r>
 800742e:	1c43      	adds	r3, r0, #1
 8007430:	d00a      	beq.n	8007448 <sbrk_aligned+0x34>
 8007432:	1cc4      	adds	r4, r0, #3
 8007434:	f024 0403 	bic.w	r4, r4, #3
 8007438:	42a0      	cmp	r0, r4
 800743a:	d007      	beq.n	800744c <sbrk_aligned+0x38>
 800743c:	1a21      	subs	r1, r4, r0
 800743e:	4628      	mov	r0, r5
 8007440:	f000 f8ac 	bl	800759c <_sbrk_r>
 8007444:	3001      	adds	r0, #1
 8007446:	d101      	bne.n	800744c <sbrk_aligned+0x38>
 8007448:	f04f 34ff 	mov.w	r4, #4294967295
 800744c:	4620      	mov	r0, r4
 800744e:	bd70      	pop	{r4, r5, r6, pc}
 8007450:	240001c8 	.word	0x240001c8

08007454 <_malloc_r>:
 8007454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007458:	1ccd      	adds	r5, r1, #3
 800745a:	f025 0503 	bic.w	r5, r5, #3
 800745e:	3508      	adds	r5, #8
 8007460:	2d0c      	cmp	r5, #12
 8007462:	bf38      	it	cc
 8007464:	250c      	movcc	r5, #12
 8007466:	2d00      	cmp	r5, #0
 8007468:	4607      	mov	r7, r0
 800746a:	db01      	blt.n	8007470 <_malloc_r+0x1c>
 800746c:	42a9      	cmp	r1, r5
 800746e:	d905      	bls.n	800747c <_malloc_r+0x28>
 8007470:	230c      	movs	r3, #12
 8007472:	603b      	str	r3, [r7, #0]
 8007474:	2600      	movs	r6, #0
 8007476:	4630      	mov	r0, r6
 8007478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800747c:	4e2e      	ldr	r6, [pc, #184]	; (8007538 <_malloc_r+0xe4>)
 800747e:	f000 f89d 	bl	80075bc <__malloc_lock>
 8007482:	6833      	ldr	r3, [r6, #0]
 8007484:	461c      	mov	r4, r3
 8007486:	bb34      	cbnz	r4, 80074d6 <_malloc_r+0x82>
 8007488:	4629      	mov	r1, r5
 800748a:	4638      	mov	r0, r7
 800748c:	f7ff ffc2 	bl	8007414 <sbrk_aligned>
 8007490:	1c43      	adds	r3, r0, #1
 8007492:	4604      	mov	r4, r0
 8007494:	d14d      	bne.n	8007532 <_malloc_r+0xde>
 8007496:	6834      	ldr	r4, [r6, #0]
 8007498:	4626      	mov	r6, r4
 800749a:	2e00      	cmp	r6, #0
 800749c:	d140      	bne.n	8007520 <_malloc_r+0xcc>
 800749e:	6823      	ldr	r3, [r4, #0]
 80074a0:	4631      	mov	r1, r6
 80074a2:	4638      	mov	r0, r7
 80074a4:	eb04 0803 	add.w	r8, r4, r3
 80074a8:	f000 f878 	bl	800759c <_sbrk_r>
 80074ac:	4580      	cmp	r8, r0
 80074ae:	d13a      	bne.n	8007526 <_malloc_r+0xd2>
 80074b0:	6821      	ldr	r1, [r4, #0]
 80074b2:	3503      	adds	r5, #3
 80074b4:	1a6d      	subs	r5, r5, r1
 80074b6:	f025 0503 	bic.w	r5, r5, #3
 80074ba:	3508      	adds	r5, #8
 80074bc:	2d0c      	cmp	r5, #12
 80074be:	bf38      	it	cc
 80074c0:	250c      	movcc	r5, #12
 80074c2:	4629      	mov	r1, r5
 80074c4:	4638      	mov	r0, r7
 80074c6:	f7ff ffa5 	bl	8007414 <sbrk_aligned>
 80074ca:	3001      	adds	r0, #1
 80074cc:	d02b      	beq.n	8007526 <_malloc_r+0xd2>
 80074ce:	6823      	ldr	r3, [r4, #0]
 80074d0:	442b      	add	r3, r5
 80074d2:	6023      	str	r3, [r4, #0]
 80074d4:	e00e      	b.n	80074f4 <_malloc_r+0xa0>
 80074d6:	6822      	ldr	r2, [r4, #0]
 80074d8:	1b52      	subs	r2, r2, r5
 80074da:	d41e      	bmi.n	800751a <_malloc_r+0xc6>
 80074dc:	2a0b      	cmp	r2, #11
 80074de:	d916      	bls.n	800750e <_malloc_r+0xba>
 80074e0:	1961      	adds	r1, r4, r5
 80074e2:	42a3      	cmp	r3, r4
 80074e4:	6025      	str	r5, [r4, #0]
 80074e6:	bf18      	it	ne
 80074e8:	6059      	strne	r1, [r3, #4]
 80074ea:	6863      	ldr	r3, [r4, #4]
 80074ec:	bf08      	it	eq
 80074ee:	6031      	streq	r1, [r6, #0]
 80074f0:	5162      	str	r2, [r4, r5]
 80074f2:	604b      	str	r3, [r1, #4]
 80074f4:	4638      	mov	r0, r7
 80074f6:	f104 060b 	add.w	r6, r4, #11
 80074fa:	f000 f865 	bl	80075c8 <__malloc_unlock>
 80074fe:	f026 0607 	bic.w	r6, r6, #7
 8007502:	1d23      	adds	r3, r4, #4
 8007504:	1af2      	subs	r2, r6, r3
 8007506:	d0b6      	beq.n	8007476 <_malloc_r+0x22>
 8007508:	1b9b      	subs	r3, r3, r6
 800750a:	50a3      	str	r3, [r4, r2]
 800750c:	e7b3      	b.n	8007476 <_malloc_r+0x22>
 800750e:	6862      	ldr	r2, [r4, #4]
 8007510:	42a3      	cmp	r3, r4
 8007512:	bf0c      	ite	eq
 8007514:	6032      	streq	r2, [r6, #0]
 8007516:	605a      	strne	r2, [r3, #4]
 8007518:	e7ec      	b.n	80074f4 <_malloc_r+0xa0>
 800751a:	4623      	mov	r3, r4
 800751c:	6864      	ldr	r4, [r4, #4]
 800751e:	e7b2      	b.n	8007486 <_malloc_r+0x32>
 8007520:	4634      	mov	r4, r6
 8007522:	6876      	ldr	r6, [r6, #4]
 8007524:	e7b9      	b.n	800749a <_malloc_r+0x46>
 8007526:	230c      	movs	r3, #12
 8007528:	603b      	str	r3, [r7, #0]
 800752a:	4638      	mov	r0, r7
 800752c:	f000 f84c 	bl	80075c8 <__malloc_unlock>
 8007530:	e7a1      	b.n	8007476 <_malloc_r+0x22>
 8007532:	6025      	str	r5, [r4, #0]
 8007534:	e7de      	b.n	80074f4 <_malloc_r+0xa0>
 8007536:	bf00      	nop
 8007538:	240001c4 	.word	0x240001c4

0800753c <_realloc_r>:
 800753c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007540:	4680      	mov	r8, r0
 8007542:	4614      	mov	r4, r2
 8007544:	460e      	mov	r6, r1
 8007546:	b921      	cbnz	r1, 8007552 <_realloc_r+0x16>
 8007548:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800754c:	4611      	mov	r1, r2
 800754e:	f7ff bf81 	b.w	8007454 <_malloc_r>
 8007552:	b92a      	cbnz	r2, 8007560 <_realloc_r+0x24>
 8007554:	f7ff ff12 	bl	800737c <_free_r>
 8007558:	4625      	mov	r5, r4
 800755a:	4628      	mov	r0, r5
 800755c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007560:	f000 f838 	bl	80075d4 <_malloc_usable_size_r>
 8007564:	4284      	cmp	r4, r0
 8007566:	4607      	mov	r7, r0
 8007568:	d802      	bhi.n	8007570 <_realloc_r+0x34>
 800756a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800756e:	d812      	bhi.n	8007596 <_realloc_r+0x5a>
 8007570:	4621      	mov	r1, r4
 8007572:	4640      	mov	r0, r8
 8007574:	f7ff ff6e 	bl	8007454 <_malloc_r>
 8007578:	4605      	mov	r5, r0
 800757a:	2800      	cmp	r0, #0
 800757c:	d0ed      	beq.n	800755a <_realloc_r+0x1e>
 800757e:	42bc      	cmp	r4, r7
 8007580:	4622      	mov	r2, r4
 8007582:	4631      	mov	r1, r6
 8007584:	bf28      	it	cs
 8007586:	463a      	movcs	r2, r7
 8007588:	f7ff fed0 	bl	800732c <memcpy>
 800758c:	4631      	mov	r1, r6
 800758e:	4640      	mov	r0, r8
 8007590:	f7ff fef4 	bl	800737c <_free_r>
 8007594:	e7e1      	b.n	800755a <_realloc_r+0x1e>
 8007596:	4635      	mov	r5, r6
 8007598:	e7df      	b.n	800755a <_realloc_r+0x1e>
	...

0800759c <_sbrk_r>:
 800759c:	b538      	push	{r3, r4, r5, lr}
 800759e:	4d06      	ldr	r5, [pc, #24]	; (80075b8 <_sbrk_r+0x1c>)
 80075a0:	2300      	movs	r3, #0
 80075a2:	4604      	mov	r4, r0
 80075a4:	4608      	mov	r0, r1
 80075a6:	602b      	str	r3, [r5, #0]
 80075a8:	f7f9 fb9e 	bl	8000ce8 <_sbrk>
 80075ac:	1c43      	adds	r3, r0, #1
 80075ae:	d102      	bne.n	80075b6 <_sbrk_r+0x1a>
 80075b0:	682b      	ldr	r3, [r5, #0]
 80075b2:	b103      	cbz	r3, 80075b6 <_sbrk_r+0x1a>
 80075b4:	6023      	str	r3, [r4, #0]
 80075b6:	bd38      	pop	{r3, r4, r5, pc}
 80075b8:	240001cc 	.word	0x240001cc

080075bc <__malloc_lock>:
 80075bc:	4801      	ldr	r0, [pc, #4]	; (80075c4 <__malloc_lock+0x8>)
 80075be:	f000 b811 	b.w	80075e4 <__retarget_lock_acquire_recursive>
 80075c2:	bf00      	nop
 80075c4:	240001d0 	.word	0x240001d0

080075c8 <__malloc_unlock>:
 80075c8:	4801      	ldr	r0, [pc, #4]	; (80075d0 <__malloc_unlock+0x8>)
 80075ca:	f000 b80c 	b.w	80075e6 <__retarget_lock_release_recursive>
 80075ce:	bf00      	nop
 80075d0:	240001d0 	.word	0x240001d0

080075d4 <_malloc_usable_size_r>:
 80075d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075d8:	1f18      	subs	r0, r3, #4
 80075da:	2b00      	cmp	r3, #0
 80075dc:	bfbc      	itt	lt
 80075de:	580b      	ldrlt	r3, [r1, r0]
 80075e0:	18c0      	addlt	r0, r0, r3
 80075e2:	4770      	bx	lr

080075e4 <__retarget_lock_acquire_recursive>:
 80075e4:	4770      	bx	lr

080075e6 <__retarget_lock_release_recursive>:
 80075e6:	4770      	bx	lr

080075e8 <_init>:
 80075e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ea:	bf00      	nop
 80075ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ee:	bc08      	pop	{r3}
 80075f0:	469e      	mov	lr, r3
 80075f2:	4770      	bx	lr

080075f4 <_fini>:
 80075f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f6:	bf00      	nop
 80075f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075fa:	bc08      	pop	{r3}
 80075fc:	469e      	mov	lr, r3
 80075fe:	4770      	bx	lr
